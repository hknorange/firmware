
Node1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08009f88  08009f88  00019f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d8  0800a5d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5d8  0800a5d8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5d8  0800a5d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5d8  0800a5d8  0001a5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a5e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001f0  0800a7d0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  0800a7d0  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001074a  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294d  00000000  00000000  00030963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c41  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125d2  00000000  00000000  0004ede9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009243b  00000000  00000000  000613bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f37f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  000f3848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f70 	.word	0x08009f70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08009f70 	.word	0x08009f70

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2uiz>:
 8001038:	0042      	lsls	r2, r0, #1
 800103a:	d20e      	bcs.n	800105a <__aeabi_f2uiz+0x22>
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30b      	bcc.n	800105a <__aeabi_f2uiz+0x22>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d409      	bmi.n	8001060 <__aeabi_f2uiz+0x28>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	fa23 f002 	lsr.w	r0, r3, r2
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2uiz+0x32>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d102      	bne.n	8001070 <__aeabi_f2uiz+0x38>
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	4770      	bx	lr
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__aeabi_d2lz>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	4605      	mov	r5, r0
 800107c:	460c      	mov	r4, r1
 800107e:	2200      	movs	r2, #0
 8001080:	2300      	movs	r3, #0
 8001082:	4628      	mov	r0, r5
 8001084:	4621      	mov	r1, r4
 8001086:	f7ff fca3 	bl	80009d0 <__aeabi_dcmplt>
 800108a:	b928      	cbnz	r0, 8001098 <__aeabi_d2lz+0x20>
 800108c:	4628      	mov	r0, r5
 800108e:	4621      	mov	r1, r4
 8001090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001094:	f000 b80a 	b.w	80010ac <__aeabi_d2ulz>
 8001098:	4628      	mov	r0, r5
 800109a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800109e:	f000 f805 	bl	80010ac <__aeabi_d2ulz>
 80010a2:	4240      	negs	r0, r0
 80010a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop

080010ac <__aeabi_d2ulz>:
 80010ac:	b5d0      	push	{r4, r6, r7, lr}
 80010ae:	2200      	movs	r2, #0
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <__aeabi_d2ulz+0x34>)
 80010b2:	4606      	mov	r6, r0
 80010b4:	460f      	mov	r7, r1
 80010b6:	f7ff fa19 	bl	80004ec <__aeabi_dmul>
 80010ba:	f7ff fcef 	bl	8000a9c <__aeabi_d2uiz>
 80010be:	4604      	mov	r4, r0
 80010c0:	f7ff f99a 	bl	80003f8 <__aeabi_ui2d>
 80010c4:	2200      	movs	r2, #0
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <__aeabi_d2ulz+0x38>)
 80010c8:	f7ff fa10 	bl	80004ec <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4630      	mov	r0, r6
 80010d2:	4639      	mov	r1, r7
 80010d4:	f7ff f852 	bl	800017c <__aeabi_dsub>
 80010d8:	f7ff fce0 	bl	8000a9c <__aeabi_d2uiz>
 80010dc:	4621      	mov	r1, r4
 80010de:	bdd0      	pop	{r4, r6, r7, pc}
 80010e0:	3df00000 	.word	0x3df00000
 80010e4:	41f00000 	.word	0x41f00000

080010e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ec:	f3bf 8f4f 	dsb	sy
}
 80010f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <__NVIC_SystemReset+0x24>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010fa:	4904      	ldr	r1, [pc, #16]	; (800110c <__NVIC_SystemReset+0x24>)
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_SystemReset+0x28>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001102:	f3bf 8f4f 	dsb	sy
}
 8001106:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <__NVIC_SystemReset+0x20>
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0004 	.word	0x05fa0004

08001114 <HAL_TIM_PeriodElapsedCallback>:
void write_infor_default(void);
void check_connect_ble(char* er);
/*
 * interrupt timer 2
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
//	HAL_GPIO_TogglePin(LED_SIGN1_GPIO_Port, LED_SIGN1_Pin);
	HAL_GPIO_TogglePin(LED_SIGN2_GPIO_Port, LED_SIGN2_Pin);
 800111c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	f002 f96b 	bl	80033fc <HAL_GPIO_TogglePin>
	ADC_Read_Sensor();
 8001126:	f000 f8cf 	bl	80012c8 <ADC_Read_Sensor>
//	printf("----------interrupt for ADC-------\r\n");
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00

08001138 <main>:

int main(void)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af02      	add	r7, sp, #8

	HAL_Init();
 800113e:	f001 f823 	bl	8002188 <HAL_Init>
	SystemClock_Config();
 8001142:	f000 fbb9 	bl	80018b8 <SystemClock_Config>
	MX_GPIO_Init();
 8001146:	f000 fd33 	bl	8001bb0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800114a:	f000 fc0d 	bl	8001968 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800114e:	f000 fcb1 	bl	8001ab4 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001152:	f000 fc61 	bl	8001a18 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001156:	f000 fcd7 	bl	8001b08 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800115a:	f000 fcff 	bl	8001b5c <MX_USART3_UART_Init>
	MX_IWDG_Init();
 800115e:	f000 fc41 	bl	80019e4 <MX_IWDG_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001162:	482c      	ldr	r0, [pc, #176]	; (8001214 <main+0xdc>)
 8001164:	f002 ff80 	bl	8004068 <HAL_TIM_Base_Start_IT>
	printf("@@@@@@@@@@@@@@@@@@@@@\r\n");
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <main+0xe0>)
 800116a:	f005 f987 	bl	800647c <puts>
	//	write_infor_default();
	read_infor_default();
 800116e:	f000 fa29 	bl	80015c4 <read_infor_default>
	timeout_tick = HAL_GetTick();
 8001172:	f001 f861 	bl	8002238 <HAL_GetTick>
 8001176:	4603      	mov	r3, r0
 8001178:	4a28      	ldr	r2, [pc, #160]	; (800121c <main+0xe4>)
 800117a:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart3,&bluetooth.rx_buffer,1);
 800117c:	2201      	movs	r2, #1
 800117e:	4928      	ldr	r1, [pc, #160]	; (8001220 <main+0xe8>)
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <main+0xec>)
 8001182:	f003 fc84 	bl	8004a8e <HAL_UART_Receive_IT>
	while (1)
	{
		Fuel_China();
 8001186:	f000 f997 	bl	80014b8 <Fuel_China>
		if(HAL_GetTick() - timeout_tick > TIMESEND){
 800118a:	f001 f855 	bl	8002238 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0xe4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800119a:	d92a      	bls.n	80011f2 <main+0xba>
		  sprintf((char*)data_send,"\"%.2f\",\"%.2f\"",fuelchina.flue,adc_weight.weight);
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <main+0xf0>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f94a 	bl	800043c <__aeabi_f2d>
 80011a8:	4604      	mov	r4, r0
 80011aa:	460d      	mov	r5, r1
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <main+0xf4>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f943 	bl	800043c <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9cd 2300 	strd	r2, r3, [sp]
 80011be:	4622      	mov	r2, r4
 80011c0:	462b      	mov	r3, r5
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <main+0xf8>)
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <main+0xfc>)
 80011c6:	f005 f971 	bl	80064ac <siprintf>
	//		  printf("len:%d\r\n",strlen(data_send));
	//		  printf("len:%d\r\n",sizeof(data_send));
		  HAL_UART_Transmit(&huart3, data_send, strlen(data_send), 300);
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <main+0xfc>)
 80011cc:	f7fe ffca 	bl	8000164 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011d8:	4916      	ldr	r1, [pc, #88]	; (8001234 <main+0xfc>)
 80011da:	4812      	ldr	r0, [pc, #72]	; (8001224 <main+0xec>)
 80011dc:	f003 fb42 	bl	8004864 <HAL_UART_Transmit>
		  printf("data:%s\r\n",data_send);
 80011e0:	4914      	ldr	r1, [pc, #80]	; (8001234 <main+0xfc>)
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <main+0x100>)
 80011e4:	f005 f8c4 	bl	8006370 <iprintf>
		  timeout_tick = HAL_GetTick();
 80011e8:	f001 f826 	bl	8002238 <HAL_GetTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <main+0xe4>)
 80011f0:	6013      	str	r3, [r2, #0]
		}
		if(sta_flash == true){
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <main+0x104>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <main+0xce>
	//			printf("############\r\n");
	//			printf("%s\r\n",(char*)bluetooth.rx_array_buffer);
			update_infor_default((char*)bluetooth.rx_array_buffer);
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <main+0x108>)
 80011fc:	f000 fa9a 	bl	8001734 <update_infor_default>
			sta_flash = false;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <main+0x104>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]


		}
		check_connect_ble((char*)bluetooth.rx_array_buffer);
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <main+0x108>)
 8001208:	f000 fb2a 	bl	8001860 <check_connect_ble>
//		printf("bluetooth.rx_array_buffer:%s\r\n",bluetooth.rx_array_buffer);
//		HAL_Delay(20000);
		HAL_IWDG_Refresh(&hiwdg);
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <main+0x10c>)
 800120e:	f002 f950 	bl	80034b2 <HAL_IWDG_Refresh>
		Fuel_China();
 8001212:	e7b8      	b.n	8001186 <main+0x4e>
 8001214:	20000248 	.word	0x20000248
 8001218:	08009f88 	.word	0x08009f88
 800121c:	20000430 	.word	0x20000430
 8001220:	2000042e 	.word	0x2000042e
 8001224:	20000320 	.word	0x20000320
 8001228:	20000380 	.word	0x20000380
 800122c:	20000368 	.word	0x20000368
 8001230:	08009fa0 	.word	0x08009fa0
 8001234:	20000434 	.word	0x20000434
 8001238:	08009fb0 	.word	0x08009fb0
 800123c:	20000448 	.word	0x20000448
 8001240:	20000410 	.word	0x20000410
 8001244:	2000023c 	.word	0x2000023c

08001248 <HAL_UART_RxCpltCallback>:

/*
 * interrup uart ble
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
//	printf("aaaaaaaaaaaa\r\n");
	if(huart->Instance == huart3.Instance){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d126      	bne.n	80012aa <HAL_UART_RxCpltCallback+0x62>
		if(bluetooth.rx_buffer != '#'){
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 800125e:	7f9b      	ldrb	r3, [r3, #30]
 8001260:	2b23      	cmp	r3, #35	; 0x23
 8001262:	d00d      	beq.n	8001280 <HAL_UART_RxCpltCallback+0x38>
			bluetooth.rx_array_buffer[bluetooth.index] = bluetooth.rx_buffer;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001266:	7fdb      	ldrb	r3, [r3, #31]
 8001268:	461a      	mov	r2, r3
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 800126c:	7f99      	ldrb	r1, [r3, #30]
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001270:	5499      	strb	r1, [r3, r2]
			bluetooth.index++;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001274:	7fdb      	ldrb	r3, [r3, #31]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 800127c:	77da      	strb	r2, [r3, #31]
 800127e:	e00f      	b.n	80012a0 <HAL_UART_RxCpltCallback+0x58>
//			printf("bbbbbbbbbbbbbbbbb\r\n");
			//HAL_UART_Transmit(&huart1, &bluetooth.rx_buffer, 1, 1000);
		}
		else{
			bluetooth.rx_array_buffer[bluetooth.index] = '\0';
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001282:	7fdb      	ldrb	r3, [r3, #31]
 8001284:	461a      	mov	r2, r3
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001288:	2100      	movs	r1, #0
 800128a:	5499      	strb	r1, [r3, r2]
			bluetooth.index = 0;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 800128e:	2200      	movs	r2, #0
 8001290:	77da      	strb	r2, [r3, #31]
			printf("data ble:%s\n",bluetooth.rx_array_buffer);
 8001292:	4909      	ldr	r1, [pc, #36]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 8001296:	f005 f86b 	bl	8006370 <iprintf>
			sta_flash = true;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &bluetooth.rx_buffer, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 80012a6:	f003 fbf2 	bl	8004a8e <HAL_UART_Receive_IT>
	}
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000320 	.word	0x20000320
 80012b8:	20000410 	.word	0x20000410
 80012bc:	08009fbc 	.word	0x08009fbc
 80012c0:	20000448 	.word	0x20000448
 80012c4:	2000042e 	.word	0x2000042e

080012c8 <ADC_Read_Sensor>:

/*
 * read value adc
 */

void ADC_Read_Sensor(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80012cc:	481c      	ldr	r0, [pc, #112]	; (8001340 <ADC_Read_Sensor+0x78>)
 80012ce:	f001 f8b9 	bl	8002444 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012d2:	f04f 31ff 	mov.w	r1, #4294967295
 80012d6:	481a      	ldr	r0, [pc, #104]	; (8001340 <ADC_Read_Sensor+0x78>)
 80012d8:	f001 f98e 	bl	80025f8 <HAL_ADC_PollForConversion>
	++adc_weight.cout;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <ADC_Read_Sensor+0x7c>)
 80012de:	7d1b      	ldrb	r3, [r3, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <ADC_Read_Sensor+0x7c>)
 80012e6:	751a      	strb	r2, [r3, #20]
	adc_weight.weight_value_adc[adc_weight.cout] = HAL_ADC_GetValue(&hadc1);
 80012e8:	4815      	ldr	r0, [pc, #84]	; (8001340 <ADC_Read_Sensor+0x78>)
 80012ea:	f001 fa8b 	bl	8002804 <HAL_ADC_GetValue>
 80012ee:	4601      	mov	r1, r0
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <ADC_Read_Sensor+0x7c>)
 80012f2:	7d1b      	ldrb	r3, [r3, #20]
 80012f4:	461a      	mov	r2, r3
 80012f6:	b289      	uxth	r1, r1
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <ADC_Read_Sensor+0x7c>)
 80012fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	printf("adc value %d:%d\r\n",adc_weight.cout,adc_weight.weight_value_adc[adc_weight.cout]);
	HAL_ADC_Stop(&hadc1);
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <ADC_Read_Sensor+0x78>)
 8001300:	f001 f94e 	bl	80025a0 <HAL_ADC_Stop>
	if(adc_weight.cout == 5){
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <ADC_Read_Sensor+0x7c>)
 8001306:	7d1b      	ldrb	r3, [r3, #20]
 8001308:	2b05      	cmp	r3, #5
 800130a:	d116      	bne.n	800133a <ADC_Read_Sensor+0x72>
		adc_weight.cout = 0;
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <ADC_Read_Sensor+0x7c>)
 800130e:	2200      	movs	r2, #0
 8001310:	751a      	strb	r2, [r3, #20]
		adc_weight.weight_value_adc[0] = ADC_AVR_Weight(adc_weight.weight_value_adc);
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <ADC_Read_Sensor+0x7c>)
 8001314:	f000 f818 	bl	8001348 <ADC_AVR_Weight>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe8c 	bl	8001038 <__aeabi_f2uiz>
 8001320:	4603      	mov	r3, r0
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <ADC_Read_Sensor+0x7c>)
 8001326:	801a      	strh	r2, [r3, #0]
		ADC_Weight(adc_weight.weight_value_adc[0]);
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <ADC_Read_Sensor+0x7c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fcdb 	bl	8000ce8 <__aeabi_ui2f>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f82f 	bl	8001398 <ADC_Weight>
	}
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000020c 	.word	0x2000020c
 8001344:	20000368 	.word	0x20000368

08001348 <ADC_AVR_Weight>:
}

/*
 * adc cal aver value adc
 */
float ADC_AVR_Weight(uint16_t arr[]){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	float result;
	for(int i=1;i<=5;i++)
 8001350:	2301      	movs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	e011      	b.n	800137a <ADC_AVR_Weight+0x32>
		result += arr[i];
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fcc5 	bl	8000cf0 <__aeabi_i2f>
 8001366:	4603      	mov	r3, r0
 8001368:	4619      	mov	r1, r3
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff fc0c 	bl	8000b88 <__addsf3>
 8001370:	4603      	mov	r3, r0
 8001372:	60fb      	str	r3, [r7, #12]
	for(int i=1;i<=5;i++)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3301      	adds	r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b05      	cmp	r3, #5
 800137e:	ddea      	ble.n	8001356 <ADC_AVR_Weight+0xe>

	return result/5.0;
 8001380:	4904      	ldr	r1, [pc, #16]	; (8001394 <ADC_AVR_Weight+0x4c>)
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff fdbc 	bl	8000f00 <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40a00000 	.word	0x40a00000

08001398 <ADC_Weight>:
/*
 * get value weight
 */
void ADC_Weight(float val){
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	float weight_voltage = (float)val/3971*3.2;
 80013a0:	4929      	ldr	r1, [pc, #164]	; (8001448 <ADC_Weight+0xb0>)
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fdac 	bl	8000f00 <__aeabi_fdiv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f846 	bl	800043c <__aeabi_f2d>
 80013b0:	a323      	add	r3, pc, #140	; (adr r3, 8001440 <ADC_Weight+0xa8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f899 	bl	80004ec <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb8b 	bl	8000adc <__aeabi_d2f>
 80013c6:	4603      	mov	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
//	printf("voltage weight:%f",weight_voltage);
	adc_weight.weight = ((weight_voltage *MAX_CONCER /3.2)*MAX_WEIGH)/MAX_CONCER;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <ADC_Weight+0xb4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fce1 	bl	8000d98 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f82f 	bl	800043c <__aeabi_f2d>
 80013de:	a318      	add	r3, pc, #96	; (adr r3, 8001440 <ADC_Weight+0xa8>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f9ac 	bl	8000740 <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <ADC_Weight+0xb8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f821 	bl	800043c <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7ff f873 	bl	80004ec <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <ADC_Weight+0xb4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f812 	bl	800043c <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4620      	mov	r0, r4
 800141e:	4629      	mov	r1, r5
 8001420:	f7ff f98e 	bl	8000740 <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fb56 	bl	8000adc <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <ADC_Weight+0xbc>)
 8001434:	6113      	str	r3, [r2, #16]
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bdb0      	pop	{r4, r5, r7, pc}
 800143e:	bf00      	nop
 8001440:	9999999a 	.word	0x9999999a
 8001444:	40099999 	.word	0x40099999
 8001448:	45783000 	.word	0x45783000
 800144c:	2000000c 	.word	0x2000000c
 8001450:	20000008 	.word	0x20000008
 8001454:	20000368 	.word	0x20000368

08001458 <UART_Get_Fuel>:
/*
 * get value uart fuel china
 * *XD,0000,01,2170,2171,0000,0276,1357#
 *
 */
char* UART_Get_Fuel(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
	char *level_value;
	char *pf;
	uint8_t lenstr = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Receive(&huart2, fuelchina.rxdata, sizeof(fuelchina.rxdata), 1000);
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	4910      	ldr	r1, [pc, #64]	; (80014ac <UART_Get_Fuel+0x54>)
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <UART_Get_Fuel+0x58>)
 800146c:	f003 fa7d 	bl	800496a <HAL_UART_Receive>
	pf = strstr((char*)fuelchina.rxdata, "XD");
 8001470:	4910      	ldr	r1, [pc, #64]	; (80014b4 <UART_Get_Fuel+0x5c>)
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <UART_Get_Fuel+0x54>)
 8001474:	f005 f853 	bl	800651e <strstr>
 8001478:	60b8      	str	r0, [r7, #8]
	if(pf != NULL){
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00f      	beq.n	80014a0 <UART_Get_Fuel+0x48>
	lenstr = strcspn((char*)fuelchina.rxdata, "XD");
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <UART_Get_Fuel+0x5c>)
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <UART_Get_Fuel+0x54>)
 8001484:	f005 f83a 	bl	80064fc <strcspn>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
//	printf("index:%d\r\n",lenstr);
//	printf("fuel:%s\r\n",(char*)fuelchina.rxdata);
	level_value = substring((char*)fuelchina.rxdata,lenstr + 17,4);
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	3311      	adds	r3, #17
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <UART_Get_Fuel+0x54>)
 8001496:	f000 f85d 	bl	8001554 <substring>
 800149a:	6078      	str	r0, [r7, #4]
//	printf("fuel number:%s\r\n",level_value);
	return level_value;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	e000      	b.n	80014a2 <UART_Get_Fuel+0x4a>
	}
	else{
		return 0;
 80014a0:	2300      	movs	r3, #0
	}
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000380 	.word	0x20000380
 80014b0:	200002d8 	.word	0x200002d8
 80014b4:	08009fcc 	.word	0x08009fcc

080014b8 <Fuel_China>:
/*
 * GET VALUE FUEL china
 */
void Fuel_China(void){
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	char *result;
	result = UART_Get_Fuel();
 80014be:	f7ff ffcb 	bl	8001458 <UART_Get_Fuel>
 80014c2:	6078      	str	r0, [r7, #4]
//	printf("FUel china:%f\r\n",atoi(result)/10.0);
	fuelchina.flue = (atoi(result)/10.0)* MAX_VOL/(MAX_HEIGH*1000);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f004 f9c4 	bl	8005852 <atoi>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ffa3 	bl	8000418 <__aeabi_i2d>
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <Fuel_China+0x88>)
 80014d8:	f7ff f932 	bl	8000740 <__aeabi_ddiv>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4614      	mov	r4, r2
 80014e2:	461d      	mov	r5, r3
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <Fuel_China+0x8c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe ffa7 	bl	800043c <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7fe fff9 	bl	80004ec <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	461d      	mov	r5, r3
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <Fuel_China+0x90>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4911      	ldr	r1, [pc, #68]	; (800154c <Fuel_China+0x94>)
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fc45 	bl	8000d98 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff93 	bl	800043c <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7ff f90f 	bl	8000740 <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fad7 	bl	8000adc <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <Fuel_China+0x98>)
 8001532:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bdb0      	pop	{r4, r5, r7, pc}
 800153e:	bf00      	nop
 8001540:	40240000 	.word	0x40240000
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
 800154c:	447a0000 	.word	0x447a0000
 8001550:	20000380 	.word	0x20000380

08001554 <substring>:
/*
 * substring string
 */

char *substring(char *string, int position, int length)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
   char *p;
   int c;
   p = malloc(length+1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f9b7 	bl	80058d8 <malloc>
 800156a:	4603      	mov	r3, r0
 800156c:	613b      	str	r3, [r7, #16]
   if (p == NULL){
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <substring+0x2c>
      printf("Unable to allocate memory.\n");
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <substring+0x6c>)
 8001576:	f004 ff81 	bl	800647c <puts>
      exit(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f004 f974 	bl	8005868 <exit>
   }
   for (c = 0; c < length; c++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00e      	b.n	80015a4 <substring+0x50>
   {
      *(p+c) = *(string+position-1);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	441a      	add	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	440b      	add	r3, r1
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	701a      	strb	r2, [r3, #0]
      string++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
   for (c = 0; c < length; c++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbec      	blt.n	8001586 <substring+0x32>
   }
   *(p+c) = '\0';
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
   return p;
 80015b6:	693b      	ldr	r3, [r7, #16]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	08009fd0 	.word	0x08009fd0

080015c4 <read_infor_default>:
/*
 * read value in fash
 */
void read_infor_default(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
	printf("------------------readinfordefault########\r\n");
 80015ca:	483e      	ldr	r0, [pc, #248]	; (80016c4 <read_infor_default+0x100>)
 80015cc:	f004 ff56 	bl	800647c <puts>
	char data[10];
	Flash_ReadChar(data, DATA_VOLUME_ADDRESS, LEN_VOLUME_ADDRESS);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4a3d      	ldr	r2, [pc, #244]	; (80016c8 <read_infor_default+0x104>)
 80015d4:	493d      	ldr	r1, [pc, #244]	; (80016cc <read_infor_default+0x108>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f8b6 	bl	8005748 <Flash_ReadChar>
//	printf("data:%s\r\n",data);
	MAX_VOL = atof(data);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 f934 	bl	800584c <atof>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa76 	bl	8000adc <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <read_infor_default+0x10c>)
 80015f4:	6013      	str	r3, [r2, #0]
	printf("VOL:%f\r\n",MAX_VOL);
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <read_infor_default+0x10c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff1e 	bl	800043c <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4833      	ldr	r0, [pc, #204]	; (80016d4 <read_infor_default+0x110>)
 8001606:	f004 feb3 	bl	8006370 <iprintf>
	memset(data,'\0',10);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	220a      	movs	r2, #10
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f004 f969 	bl	80058e8 <memset>
	HAL_Delay(300);
 8001616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800161a:	f000 fe17 	bl	800224c <HAL_Delay>
	Flash_ReadChar(data, DATA_WEIGHT_ADDRESS, LEN_WEIGHT_ADDRESS);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <read_infor_default+0x114>)
 8001622:	492e      	ldr	r1, [pc, #184]	; (80016dc <read_infor_default+0x118>)
 8001624:	4618      	mov	r0, r3
 8001626:	f004 f88f 	bl	8005748 <Flash_ReadChar>
//	printf("data:%s\r\n",data);
	MAX_WEIGH = atof(data);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4618      	mov	r0, r3
 800162e:	f004 f90d 	bl	800584c <atof>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa4f 	bl	8000adc <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <read_infor_default+0x11c>)
 8001642:	6013      	str	r3, [r2, #0]
	printf("WEIGHT:%f\r\n",MAX_WEIGH);
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <read_infor_default+0x11c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fef7 	bl	800043c <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4824      	ldr	r0, [pc, #144]	; (80016e4 <read_infor_default+0x120>)
 8001654:	f004 fe8c 	bl	8006370 <iprintf>
	memset(data,'\0',10);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	220a      	movs	r2, #10
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 f942 	bl	80058e8 <memset>
	HAL_Delay(300);
 8001664:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001668:	f000 fdf0 	bl	800224c <HAL_Delay>
	Flash_ReadChar(data, DATA_HIGH_ADDRESS, LEN_HIGH_ADDRESS);
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <read_infor_default+0x124>)
 8001670:	491e      	ldr	r1, [pc, #120]	; (80016ec <read_infor_default+0x128>)
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f868 	bl	8005748 <Flash_ReadChar>
//	printf("data:%s\r\n",data);
	MAX_HEIGH = atof(data);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f004 f8e6 	bl	800584c <atof>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa28 	bl	8000adc <__aeabi_d2f>
 800168c:	4603      	mov	r3, r0
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <read_infor_default+0x12c>)
 8001690:	6013      	str	r3, [r2, #0]
	printf("HEIGH:%f\r\n",MAX_HEIGH);
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <read_infor_default+0x12c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fed0 	bl	800043c <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <read_infor_default+0x130>)
 80016a2:	f004 fe65 	bl	8006370 <iprintf>
	memset(data,'\0',10);
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	220a      	movs	r2, #10
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 f91b 	bl	80058e8 <memset>
	HAL_Delay(300);
 80016b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016b6:	f000 fdc9 	bl	800224c <HAL_Delay>
//	printf("data:%s\r\n",data);
//	MAX_CONCER = atof(data);
//	printf("CONCER:%f\r\n",MAX_CONCER);
//	memset(data,'\0',10);
//	HAL_Delay(300);
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08009fec 	.word	0x08009fec
 80016c8:	0801fc00 	.word	0x0801fc00
 80016cc:	0801f810 	.word	0x0801f810
 80016d0:	20000000 	.word	0x20000000
 80016d4:	0800a018 	.word	0x0800a018
 80016d8:	0801ec00 	.word	0x0801ec00
 80016dc:	0801e800 	.word	0x0801e800
 80016e0:	20000008 	.word	0x20000008
 80016e4:	0800a024 	.word	0x0800a024
 80016e8:	0801f400 	.word	0x0801f400
 80016ec:	0801f000 	.word	0x0801f000
 80016f0:	20000004 	.word	0x20000004
 80016f4:	0800a030 	.word	0x0800a030

080016f8 <is_float_number>:
	HAL_Delay(150);
//	Flash_ProgramPage("120", DATA_CONCER_ADDRESS, LEN_CONCER_ADDRESS);
//	HAL_Delay(150);

}
bool is_float_number(const char* str){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	char *p;
	float ret;
	ret = strtod(str,&p);
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f005 fd2a 	bl	8007160 <strtod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff f9e2 	bl	8000adc <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]
//	printf("@@@@@@@@@@@\r\n");
//	printf("Phan gia tri (double) la: %lf\r\n", ret);
	if(strlen(p) >= 1){
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <is_float_number+0x30>
		return false;
 8001724:	2300      	movs	r3, #0
 8001726:	e000      	b.n	800172a <is_float_number+0x32>
	}
	else{
		return true;
 8001728:	2301      	movs	r3, #1
	}
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <update_infor_default>:
void update_infor_default(char *rec){ //400.50,1.19,45.5# //@400.0,1.19,60000.0#
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08f      	sub	sp, #60	; 0x3c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	bool act = true;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	printf("bluetooth:%s\r\n",rec);
	if(strcmp(rec,"n/a") == 0){
 8001742:	493b      	ldr	r1, [pc, #236]	; (8001830 <update_infor_default+0xfc>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7fe fd03 	bl	8000150 <strcmp>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <update_infor_default+0x24>
		printf("string la n/a\r\n");
 8001750:	4838      	ldr	r0, [pc, #224]	; (8001834 <update_infor_default+0x100>)
 8001752:	f004 fe93 	bl	800647c <puts>
 8001756:	e067      	b.n	8001828 <update_infor_default+0xf4>
		return;
	}
//	printf("bbbbbbbbbbbbbbbbbbbbbbb\r\n");
	char *sub = strtok(rec,",");
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <update_infor_default+0x104>)
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f005 fd0c 	bl	8007178 <strtok>
 8001760:	6378      	str	r0, [r7, #52]	; 0x34
	char data[4][10];
	uint8_t index=0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	while(sub != NULL){
 8001768:	e030      	b.n	80017cc <update_infor_default+0x98>
//		printf("%s\r\n",sub);q
		strcpy(data[index],sub);
 800176a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800176e:	f107 0108 	add.w	r1, r7, #8
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	440b      	add	r3, r1
 800177c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800177e:	4618      	mov	r0, r3
 8001780:	f004 feb4 	bl	80064ec <strcpy>
//		if(!is_float_number(data[index])){
//			act = false;
			printf("float number %d:%d\n",index,is_float_number(data[index]));
 8001784:	f897 4033 	ldrb.w	r4, [r7, #51]	; 0x33
 8001788:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800178c:	f107 0108 	add.w	r1, r7, #8
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffac 	bl	80016f8 <is_float_number>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	4825      	ldr	r0, [pc, #148]	; (800183c <update_infor_default+0x108>)
 80017a8:	f004 fde2 	bl	8006370 <iprintf>
//		}

		sub = strtok(NULL,",");
 80017ac:	4922      	ldr	r1, [pc, #136]	; (8001838 <update_infor_default+0x104>)
 80017ae:	2000      	movs	r0, #0
 80017b0:	f005 fce2 	bl	8007178 <strtok>
 80017b4:	6378      	str	r0, [r7, #52]	; 0x34
		index ++;
 80017b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		printf("so number index %d\n",index);
 80017c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017c4:	4619      	mov	r1, r3
 80017c6:	481e      	ldr	r0, [pc, #120]	; (8001840 <update_infor_default+0x10c>)
 80017c8:	f004 fdd2 	bl	8006370 <iprintf>
	while(sub != NULL){
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1cb      	bne.n	800176a <update_infor_default+0x36>

	}
	if(index == 3){
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d126      	bne.n	8001828 <update_infor_default+0xf4>
//		printf("000000000000\n");
//		printf("%s\n",data[0]);
//		printf("%s\n",data[1]);
//		printf("%s\n",data[2]);

		Flash_ProgramPage(data[0], DATA_VOLUME_ADDRESS, LEN_VOLUME_ADDRESS);
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <update_infor_default+0x110>)
 80017e0:	4919      	ldr	r1, [pc, #100]	; (8001848 <update_infor_default+0x114>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f800 	bl	80057e8 <Flash_ProgramPage>
		HAL_Delay(40);
 80017e8:	2028      	movs	r0, #40	; 0x28
 80017ea:	f000 fd2f 	bl	800224c <HAL_Delay>
		Flash_ProgramPage(data[2], DATA_WEIGHT_ADDRESS, LEN_WEIGHT_ADDRESS);
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	3314      	adds	r3, #20
 80017f4:	4a15      	ldr	r2, [pc, #84]	; (800184c <update_infor_default+0x118>)
 80017f6:	4916      	ldr	r1, [pc, #88]	; (8001850 <update_infor_default+0x11c>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fff5 	bl	80057e8 <Flash_ProgramPage>
		HAL_Delay(40);
 80017fe:	2028      	movs	r0, #40	; 0x28
 8001800:	f000 fd24 	bl	800224c <HAL_Delay>
		Flash_ProgramPage(data[1], DATA_HIGH_ADDRESS, LEN_HIGH_ADDRESS);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	330a      	adds	r3, #10
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <update_infor_default+0x120>)
 800180c:	4912      	ldr	r1, [pc, #72]	; (8001858 <update_infor_default+0x124>)
 800180e:	4618      	mov	r0, r3
 8001810:	f003 ffea 	bl	80057e8 <Flash_ProgramPage>
		HAL_Delay(40);
 8001814:	2028      	movs	r0, #40	; 0x28
 8001816:	f000 fd19 	bl	800224c <HAL_Delay>
		memset(bluetooth.rx_array_buffer,'\0',30);
 800181a:	221e      	movs	r2, #30
 800181c:	2100      	movs	r1, #0
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <update_infor_default+0x128>)
 8001820:	f004 f862 	bl	80058e8 <memset>
		NVIC_SystemReset();
 8001824:	f7ff fc60 	bl	80010e8 <__NVIC_SystemReset>
	}

//	printf("ket thuc update ble\r\n");


}
 8001828:	373c      	adds	r7, #60	; 0x3c
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	0800a04c 	.word	0x0800a04c
 8001834:	0800a050 	.word	0x0800a050
 8001838:	0800a060 	.word	0x0800a060
 800183c:	0800a064 	.word	0x0800a064
 8001840:	0800a078 	.word	0x0800a078
 8001844:	0801fc00 	.word	0x0801fc00
 8001848:	0801f810 	.word	0x0801f810
 800184c:	0801ec00 	.word	0x0801ec00
 8001850:	0801e800 	.word	0x0801e800
 8001854:	0801f400 	.word	0x0801f400
 8001858:	0801f000 	.word	0x0801f000
 800185c:	20000410 	.word	0x20000410

08001860 <check_connect_ble>:
void check_connect_ble(char *er){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	char *err;
	err = strstr(er,"ERROR");
 8001868:	4908      	ldr	r1, [pc, #32]	; (800188c <check_connect_ble+0x2c>)
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 fe57 	bl	800651e <strstr>
 8001870:	60f8      	str	r0, [r7, #12]
	if(err!=NULL){
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <check_connect_ble+0x22>
		memset(bluetooth.rx_array_buffer,'\0',30);
 8001878:	221e      	movs	r2, #30
 800187a:	2100      	movs	r1, #0
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <check_connect_ble+0x30>)
 800187e:	f004 f833 	bl	80058e8 <memset>
	}
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	0800a08c 	.word	0x0800a08c
 8001890:	20000410 	.word	0x20000410

08001894 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800189c:	1d39      	adds	r1, r7, #4
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	2201      	movs	r2, #1
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <__io_putchar+0x20>)
 80018a6:	f002 ffdd 	bl	8004864 <HAL_UART_Transmit>
  return ch;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000290 	.word	0x20000290

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	; 0x50
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c2:	2228      	movs	r2, #40	; 0x28
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 f80e 	bl	80058e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018e8:	230a      	movs	r3, #10
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	2301      	movs	r3, #1
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f0:	2310      	movs	r3, #16
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018f4:	2301      	movs	r3, #1
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f8:	2302      	movs	r3, #2
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fde1 	bl	80034d0 <HAL_RCC_OscConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001914:	f000 f98c 	bl	8001c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001918:	230f      	movs	r3, #15
 800191a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001928:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f002 f84d 	bl	80039d4 <HAL_RCC_ClockConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001940:	f000 f976 	bl	8001c30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001944:	2302      	movs	r3, #2
 8001946:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800194c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f002 f9cd 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800195c:	f000 f968 	bl	8001c30 <Error_Handler>
  }
}
 8001960:	bf00      	nop
 8001962:	3750      	adds	r7, #80	; 0x50
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_ADC1_Init+0x74>)
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <MX_ADC1_Init+0x78>)
 800197c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_ADC1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_ADC1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_ADC1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_ADC1_Init+0x74>)
 8001992:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_ADC1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_ADC1_Init+0x74>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_ADC1_Init+0x74>)
 80019a6:	f000 fc75 	bl	8002294 <HAL_ADC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80019b0:	f000 f93e 	bl	8001c30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_ADC1_Init+0x74>)
 80019c6:	f000 fffb 	bl	80029c0 <HAL_ADC_ConfigChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80019d0:	f000 f92e 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000020c 	.word	0x2000020c
 80019e0:	40012400 	.word	0x40012400

080019e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_IWDG_Init+0x2c>)
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <MX_IWDG_Init+0x30>)
 80019ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_IWDG_Init+0x2c>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_IWDG_Init+0x2c>)
 80019f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_IWDG_Init+0x2c>)
 80019fe:	f001 fd16 	bl	800342e <HAL_IWDG_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001a08:	f000 f912 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000023c 	.word	0x2000023c
 8001a14:	40003000 	.word	0x40003000

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a5e:	4814      	ldr	r0, [pc, #80]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a60:	f002 fab2 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a6a:	f000 f8e1 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a7c:	f002 fc4e 	bl	800431c <HAL_TIM_ConfigClockSource>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a86:	f000 f8d3 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM2_Init+0x98>)
 8001a98:	f002 fe24 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001aa2:	f000 f8c5 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000248 	.word	0x20000248

08001ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART1_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aec:	f002 fe6a 	bl	80047c4 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f89b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000290 	.word	0x20000290
 8001b04:	40013800 	.word	0x40013800

08001b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART2_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f002 fe40 	bl	80047c4 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 f871 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200002d8 	.word	0x200002d8
 8001b58:	40004400 	.word	0x40004400

08001b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART3_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b94:	f002 fe16 	bl	80047c4 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f847 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000320 	.word	0x20000320
 8001bac:	40004800 	.word	0x40004800

08001bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_GPIO_Init+0x78>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SIGN2_Pin|LED_SIGN1_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <MX_GPIO_Init+0x7c>)
 8001bfc:	f001 fbe6 	bl	80033cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_SIGN2_Pin LED_SIGN1_Pin */
  GPIO_InitStruct.Pin = LED_SIGN2_Pin|LED_SIGN1_Pin;
 8001c00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_GPIO_Init+0x7c>)
 8001c1a:	f001 fa53 	bl	80030c4 <HAL_GPIO_Init>

}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010c00 	.word	0x40010c00

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>
	...

08001c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6193      	str	r3, [r2, #24]
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	61d3      	str	r3, [r2, #28]
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_MspInit+0x5c>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_MspInit+0x60>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_MspInit+0x60>)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000

08001ca0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_ADC_MspInit+0x7c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d129      	bne.n	8001d14 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_ADC_MspInit+0x80>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <HAL_ADC_MspInit+0x84>)
 8001d00:	f001 f9e0 	bl	80030c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 4, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2104      	movs	r1, #4
 8001d08:	2012      	movs	r0, #18
 8001d0a:	f001 f8cc 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d0e:	2012      	movs	r0, #18
 8001d10:	f001 f8e5 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40012400 	.word	0x40012400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d113      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_TIM_Base_MspInit+0x44>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2102      	movs	r1, #2
 8001d56:	201c      	movs	r0, #28
 8001d58:	f001 f8a5 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5c:	201c      	movs	r0, #28
 8001d5e:	f001 f8be 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ef8 <HAL_UART_MspInit+0x188>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d132      	bne.n	8001df6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d90:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a59      	ldr	r2, [pc, #356]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0320 	add.w	r3, r7, #32
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	484a      	ldr	r0, [pc, #296]	; (8001f00 <HAL_UART_MspInit+0x190>)
 8001dd6:	f001 f975 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	4619      	mov	r1, r3
 8001dee:	4844      	ldr	r0, [pc, #272]	; (8001f00 <HAL_UART_MspInit+0x190>)
 8001df0:	f001 f968 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001df4:	e07c      	b.n	8001ef0 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a42      	ldr	r2, [pc, #264]	; (8001f04 <HAL_UART_MspInit+0x194>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d138      	bne.n	8001e72 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e00:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4a3d      	ldr	r2, [pc, #244]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0a:	61d3      	str	r3, [r2, #28]
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a37      	ldr	r2, [pc, #220]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4619      	mov	r1, r3
 8001e42:	482f      	ldr	r0, [pc, #188]	; (8001f00 <HAL_UART_MspInit+0x190>)
 8001e44:	f001 f93e 	bl	80030c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4829      	ldr	r0, [pc, #164]	; (8001f00 <HAL_UART_MspInit+0x190>)
 8001e5c:	f001 f932 	bl	80030c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2105      	movs	r1, #5
 8001e64:	2026      	movs	r0, #38	; 0x26
 8001e66:	f001 f81e 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e6a:	2026      	movs	r0, #38	; 0x26
 8001e6c:	f001 f837 	bl	8002ede <HAL_NVIC_EnableIRQ>
}
 8001e70:	e03e      	b.n	8001ef0 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_UART_MspInit+0x198>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d139      	bne.n	8001ef0 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_UART_MspInit+0x18c>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <HAL_UART_MspInit+0x19c>)
 8001ec2:	f001 f8ff 	bl	80030c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480c      	ldr	r0, [pc, #48]	; (8001f0c <HAL_UART_MspInit+0x19c>)
 8001edc:	f001 f8f2 	bl	80030c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2027      	movs	r0, #39	; 0x27
 8001ee6:	f000 ffde 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eea:	2027      	movs	r0, #39	; 0x27
 8001eec:	f000 fff7 	bl	8002ede <HAL_NVIC_EnableIRQ>
}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010800 	.word	0x40010800
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40004800 	.word	0x40004800
 8001f0c:	40010c00 	.word	0x40010c00

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f000 f95d 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <ADC1_2_IRQHandler+0x10>)
 8001f66:	f000 fc59 	bl	800281c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000020c 	.word	0x2000020c

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f002 f8c7 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000248 	.word	0x20000248

08001f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <USART2_IRQHandler+0x10>)
 8001f8e:	f002 fda3 	bl	8004ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002d8 	.word	0x200002d8

08001f9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART3_IRQHandler+0x10>)
 8001fa2:	f002 fd99 	bl	8004ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000320 	.word	0x20000320

08001fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <_kill>:

int _kill(int pid, int sig)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fc8:	f003 fc48 	bl	800585c <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2216      	movs	r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_exit>:

void _exit (int status)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffe7 	bl	8001fbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff0:	e7fe      	b.n	8001ff0 <_exit+0x12>

08001ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e00a      	b.n	800201a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002004:	f3af 8000 	nop.w
 8002008:	4601      	mov	r1, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	b2ca      	uxtb	r2, r1
 8002012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf0      	blt.n	8002004 <_read+0x12>
  }

  return len;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e009      	b.n	8002052 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fc24 	bl	8001894 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf1      	blt.n	800203e <_write+0x12>
  }
  return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_close>:

int _close(int file)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208a:	605a      	str	r2, [r3, #4]
  return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <_isatty>:

int _isatty(int file)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f003 fbb2 	bl	800585c <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20005000 	.word	0x20005000
 8002124:	00000400 	.word	0x00000400
 8002128:	2000044c 	.word	0x2000044c
 800212c:	20000468 	.word	0x20000468

08002130 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800213c:	f7ff fff8 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002142:	490c      	ldr	r1, [pc, #48]	; (8002174 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002158:	4c09      	ldr	r4, [pc, #36]	; (8002180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002166:	f003 fb93 	bl	8005890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216a:	f7fe ffe5 	bl	8001138 <main>
  bx lr
 800216e:	4770      	bx	lr
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002178:	0800a5e0 	.word	0x0800a5e0
  ldr r2, =_sbss
 800217c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002180:	20000468 	.word	0x20000468

08002184 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <CAN1_RX1_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_Init+0x28>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_Init+0x28>)
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 fe79 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fd4a 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fe91 	bl	8002efa <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 fe59 	bl	8002ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000010 	.word	0x20000010
 800220c:	20000018 	.word	0x20000018
 8002210:	20000014 	.word	0x20000014

08002214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_IncTick+0x1c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_IncTick+0x20>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_IncTick+0x20>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000018 	.word	0x20000018
 8002234:	20000450 	.word	0x20000450

08002238 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_GetTick+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	20000450 	.word	0x20000450

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff fff0 	bl	8002238 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffe0 	bl	8002238 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000018 	.word	0x20000018

08002294 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0be      	b.n	8002434 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fce4 	bl	8001ca0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fcc3 	bl	8002c64 <ADC_ConversionStop_Disable>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8099 	bne.w	8002422 <HAL_ADC_Init+0x18e>
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8095 	bne.w	8002422 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002300:	f023 0302 	bic.w	r3, r3, #2
 8002304:	f043 0202 	orr.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002314:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b1b      	ldrb	r3, [r3, #12]
 800231a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800231c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4313      	orrs	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232c:	d003      	beq.n	8002336 <HAL_ADC_Init+0xa2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_ADC_Init+0xa8>
 8002336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233a:	e000      	b.n	800233e <HAL_ADC_Init+0xaa>
 800233c:	2300      	movs	r3, #0
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7d1b      	ldrb	r3, [r3, #20]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d119      	bne.n	8002380 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7b1b      	ldrb	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	3b01      	subs	r3, #1
 800235a:	035a      	lsls	r2, r3, #13
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e00b      	b.n	8002380 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f043 0220 	orr.w	r2, r3, #32
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_ADC_Init+0x1a8>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b0:	d003      	beq.n	80023ba <HAL_ADC_Init+0x126>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d104      	bne.n	80023c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	3b01      	subs	r3, #1
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_ADC_Init+0x1ac>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10b      	bne.n	8002400 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023fe:	e018      	b.n	8002432 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f023 0312 	bic.w	r3, r3, #18
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002420:	e007      	b.n	8002432 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	ffe1f7fd 	.word	0xffe1f7fd
 8002440:	ff1f0efe 	.word	0xff1f0efe

08002444 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_Start+0x1a>
 800245a:	2302      	movs	r3, #2
 800245c:	e098      	b.n	8002590 <HAL_ADC_Start+0x14c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fba2 	bl	8002bb0 <ADC_Enable>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8087 	bne.w	8002586 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a41      	ldr	r2, [pc, #260]	; (8002598 <HAL_ADC_Start+0x154>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_Start+0x5e>
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_ADC_Start+0x158>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d115      	bne.n	80024ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024cc:	e01d      	b.n	800250a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a2f      	ldr	r2, [pc, #188]	; (800259c <HAL_ADC_Start+0x158>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_ADC_Start+0xaa>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_ADC_Start+0x154>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <HAL_ADC_Start+0xc6>
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_ADC_Start+0x158>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f023 0206 	bic.w	r2, r3, #6
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
 8002522:	e002      	b.n	800252a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0202 	mvn.w	r2, #2
 800253a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002546:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800254a:	d113      	bne.n	8002574 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_Start+0x154>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d105      	bne.n	8002562 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_ADC_Start+0x158>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d108      	bne.n	8002574 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	e00c      	b.n	800258e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e003      	b.n	800258e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012800 	.word	0x40012800
 800259c:	40012400 	.word	0x40012400

080025a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Stop+0x1a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e01a      	b.n	80025f0 <HAL_ADC_Stop+0x50>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fb4e 	bl	8002c64 <ADC_ConversionStop_Disable>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800260e:	f7ff fe13 	bl	8002238 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0d3      	b.n	80027e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d131      	bne.n	80026ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12a      	bne.n	80026ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002656:	e021      	b.n	800269c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265e:	d01d      	beq.n	800269c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_ADC_PollForConversion+0x7e>
 8002666:	f7ff fde7 	bl	8002238 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d212      	bcs.n	800269c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0a2      	b.n	80027e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0d6      	beq.n	8002658 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026aa:	e070      	b.n	800278e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026ac:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <HAL_ADC_PollForConversion+0x1f4>)
 80026ae:	681c      	ldr	r4, [r3, #0]
 80026b0:	2002      	movs	r0, #2
 80026b2:	f001 fbd3 	bl	8003e5c <HAL_RCCEx_GetPeriphCLKFreq>
 80026b6:	4603      	mov	r3, r0
 80026b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_ADC_PollForConversion+0x1f8>)
 80026c4:	400b      	ands	r3, r1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_ADC_PollForConversion+0x104>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_ADC_PollForConversion+0x1fc>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_PollForConversion+0x104>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <HAL_ADC_PollForConversion+0x200>)
 80026e0:	400b      	ands	r3, r1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x100>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_ADC_PollForConversion+0x204>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_PollForConversion+0x100>
 80026f4:	2314      	movs	r3, #20
 80026f6:	e020      	b.n	800273a <HAL_ADC_PollForConversion+0x142>
 80026f8:	2329      	movs	r3, #41	; 0x29
 80026fa:	e01e      	b.n	800273a <HAL_ADC_PollForConversion+0x142>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6919      	ldr	r1, [r3, #16]
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_ADC_PollForConversion+0x200>)
 8002704:	400b      	ands	r3, r1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_ADC_PollForConversion+0x120>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_ADC_PollForConversion+0x204>)
 8002712:	400b      	ands	r3, r1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_ADC_PollForConversion+0x13c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_ADC_PollForConversion+0x208>)
 8002720:	400b      	ands	r3, r1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d108      	bne.n	8002738 <HAL_ADC_PollForConversion+0x140>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68d9      	ldr	r1, [r3, #12]
 800272c:	4b34      	ldr	r3, [pc, #208]	; (8002800 <HAL_ADC_PollForConversion+0x208>)
 800272e:	400b      	ands	r3, r1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_PollForConversion+0x140>
 8002734:	2354      	movs	r3, #84	; 0x54
 8002736:	e000      	b.n	800273a <HAL_ADC_PollForConversion+0x142>
 8002738:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002740:	e021      	b.n	8002786 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d01a      	beq.n	8002780 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_ADC_PollForConversion+0x168>
 8002750:	f7ff fd72 	bl	8002238 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d20f      	bcs.n	8002780 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d90b      	bls.n	8002780 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e030      	b.n	80027e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	429a      	cmp	r2, r3
 800278c:	d8d9      	bhi.n	8002742 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0212 	mvn.w	r2, #18
 8002796:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027b2:	d115      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000010 	.word	0x20000010
 80027f0:	24924924 	.word	0x24924924
 80027f4:	00924924 	.word	0x00924924
 80027f8:	12492492 	.word	0x12492492
 80027fc:	00492492 	.word	0x00492492
 8002800:	00249249 	.word	0x00249249

08002804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d03e      	beq.n	80028bc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d039      	beq.n	80028bc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800286a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800286e:	d11d      	bne.n	80028ac <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002874:	2b00      	cmp	r3, #0
 8002876:	d119      	bne.n	80028ac <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0220 	bic.w	r2, r2, #32
 8002886:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f874 	bl	800299a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f06f 0212 	mvn.w	r2, #18
 80028ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d04d      	beq.n	8002962 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d048      	beq.n	8002962 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80028f2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80028f6:	d012      	beq.n	800291e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002902:	2b00      	cmp	r3, #0
 8002904:	d125      	bne.n	8002952 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002910:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002914:	d11d      	bne.n	8002952 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800291a:	2b00      	cmp	r3, #0
 800291c:	d119      	bne.n	8002952 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f043 0201 	orr.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f9c7 	bl	8002ce6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 020c 	mvn.w	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d012      	beq.n	8002992 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f812 	bl	80029ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0201 	mvn.w	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x20>
 80029dc:	2302      	movs	r3, #2
 80029de:	e0dc      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x1da>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d81c      	bhi.n	8002a2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	3b05      	subs	r3, #5
 8002a02:	221f      	movs	r2, #31
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	4019      	ands	r1, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b05      	subs	r3, #5
 8002a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34
 8002a28:	e03c      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d81c      	bhi.n	8002a6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b23      	subs	r3, #35	; 0x23
 8002a44:	221f      	movs	r2, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	4019      	ands	r1, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b23      	subs	r3, #35	; 0x23
 8002a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6a:	e01b      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b41      	subs	r3, #65	; 0x41
 8002a7e:	221f      	movs	r2, #31
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	3b41      	subs	r3, #65	; 0x41
 8002a98:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d91c      	bls.n	8002ae6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4019      	ands	r1, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b1e      	subs	r3, #30
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	e019      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6919      	ldr	r1, [r3, #16]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	2207      	movs	r2, #7
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4019      	ands	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6898      	ldr	r0, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d003      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b26:	2b11      	cmp	r3, #17
 8002b28:	d132      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d125      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d126      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d11a      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_ADC_ConfigChannel+0x1ec>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	0c9a      	lsrs	r2, r3, #18
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x1b2>
 8002b7e:	e007      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012400 	.word	0x40012400
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d040      	beq.n	8002c50 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <ADC_Enable+0xac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <ADC_Enable+0xb0>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9b      	lsrs	r3, r3, #18
 8002bea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bec:	e002      	b.n	8002bf4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bfa:	f7ff fb1d 	bl	8002238 <HAL_GetTick>
 8002bfe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c00:	e01f      	b.n	8002c42 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c02:	f7ff fb19 	bl	8002238 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d918      	bls.n	8002c42 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d011      	beq.n	8002c42 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d1d8      	bne.n	8002c02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000010 	.word	0x20000010
 8002c60:	431bde83 	.word	0x431bde83

08002c64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12e      	bne.n	8002cdc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c8e:	f7ff fad3 	bl	8002238 <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c94:	e01b      	b.n	8002cce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c96:	f7ff facf 	bl	8002238 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d914      	bls.n	8002cce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10d      	bne.n	8002cce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f043 0210 	orr.w	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e007      	b.n	8002cde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d0dc      	beq.n	8002c96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <__NVIC_SetPriorityGrouping>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4906      	ldr	r1, [pc, #24]	; (8002d90 <__NVIC_EnableIRQ+0x34>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f7ff ff90 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff2d 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff42 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff90 	bl	8002de8 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5f 	bl	8002d94 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff35 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa2 	bl	8002e4c <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d008      	beq.n	8002f3c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e020      	b.n	8002f7e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d005      	beq.n	8002fac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
 8002faa:	e051      	b.n	8003050 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 020e 	bic.w	r2, r2, #14
 8002fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_DMA_Abort_IT+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d029      	beq.n	800302a <HAL_DMA_Abort_IT+0xa2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_DMA_Abort_IT+0xd8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_DMA_Abort_IT+0x9e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_DMA_Abort_IT+0xdc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01a      	beq.n	8003020 <HAL_DMA_Abort_IT+0x98>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_DMA_Abort_IT+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d012      	beq.n	800301a <HAL_DMA_Abort_IT+0x92>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_DMA_Abort_IT+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00a      	beq.n	8003014 <HAL_DMA_Abort_IT+0x8c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_DMA_Abort_IT+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d102      	bne.n	800300e <HAL_DMA_Abort_IT+0x86>
 8003008:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800300c:	e00e      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 800300e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003012:	e00b      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 8003014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003018:	e008      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 800301a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301e:	e005      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 8003020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003024:	e002      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 8003026:	2310      	movs	r3, #16
 8003028:	e000      	b.n	800302c <HAL_DMA_Abort_IT+0xa4>
 800302a:	2301      	movs	r3, #1
 800302c:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_DMA_Abort_IT+0xec>)
 800302e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
    } 
  }
  return status;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40020008 	.word	0x40020008
 8003060:	4002001c 	.word	0x4002001c
 8003064:	40020030 	.word	0x40020030
 8003068:	40020044 	.word	0x40020044
 800306c:	40020058 	.word	0x40020058
 8003070:	4002006c 	.word	0x4002006c
 8003074:	40020000 	.word	0x40020000

08003078 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_FLASH_Unlock+0x40>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_FLASH_Unlock+0x40>)
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_FLASH_Unlock+0x44>)
 8003092:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_FLASH_Unlock+0x40>)
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_FLASH_Unlock+0x48>)
 8003098:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_FLASH_Unlock+0x40>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80030aa:	79fb      	ldrb	r3, [r7, #7]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	45670123 	.word	0x45670123
 80030c0:	cdef89ab 	.word	0xcdef89ab

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b08b      	sub	sp, #44	; 0x2c
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	e169      	b.n	80033ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030d8:	2201      	movs	r2, #1
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f040 8158 	bne.w	80033a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a9a      	ldr	r2, [pc, #616]	; (8003364 <HAL_GPIO_Init+0x2a0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d05e      	beq.n	80031be <HAL_GPIO_Init+0xfa>
 8003100:	4a98      	ldr	r2, [pc, #608]	; (8003364 <HAL_GPIO_Init+0x2a0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d875      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 8003106:	4a98      	ldr	r2, [pc, #608]	; (8003368 <HAL_GPIO_Init+0x2a4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d058      	beq.n	80031be <HAL_GPIO_Init+0xfa>
 800310c:	4a96      	ldr	r2, [pc, #600]	; (8003368 <HAL_GPIO_Init+0x2a4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d86f      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 8003112:	4a96      	ldr	r2, [pc, #600]	; (800336c <HAL_GPIO_Init+0x2a8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d052      	beq.n	80031be <HAL_GPIO_Init+0xfa>
 8003118:	4a94      	ldr	r2, [pc, #592]	; (800336c <HAL_GPIO_Init+0x2a8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d869      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 800311e:	4a94      	ldr	r2, [pc, #592]	; (8003370 <HAL_GPIO_Init+0x2ac>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04c      	beq.n	80031be <HAL_GPIO_Init+0xfa>
 8003124:	4a92      	ldr	r2, [pc, #584]	; (8003370 <HAL_GPIO_Init+0x2ac>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d863      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 800312a:	4a92      	ldr	r2, [pc, #584]	; (8003374 <HAL_GPIO_Init+0x2b0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d046      	beq.n	80031be <HAL_GPIO_Init+0xfa>
 8003130:	4a90      	ldr	r2, [pc, #576]	; (8003374 <HAL_GPIO_Init+0x2b0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d85d      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 8003136:	2b12      	cmp	r3, #18
 8003138:	d82a      	bhi.n	8003190 <HAL_GPIO_Init+0xcc>
 800313a:	2b12      	cmp	r3, #18
 800313c:	d859      	bhi.n	80031f2 <HAL_GPIO_Init+0x12e>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_GPIO_Init+0x80>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	080031bf 	.word	0x080031bf
 8003148:	08003199 	.word	0x08003199
 800314c:	080031ab 	.word	0x080031ab
 8003150:	080031ed 	.word	0x080031ed
 8003154:	080031f3 	.word	0x080031f3
 8003158:	080031f3 	.word	0x080031f3
 800315c:	080031f3 	.word	0x080031f3
 8003160:	080031f3 	.word	0x080031f3
 8003164:	080031f3 	.word	0x080031f3
 8003168:	080031f3 	.word	0x080031f3
 800316c:	080031f3 	.word	0x080031f3
 8003170:	080031f3 	.word	0x080031f3
 8003174:	080031f3 	.word	0x080031f3
 8003178:	080031f3 	.word	0x080031f3
 800317c:	080031f3 	.word	0x080031f3
 8003180:	080031f3 	.word	0x080031f3
 8003184:	080031f3 	.word	0x080031f3
 8003188:	080031a1 	.word	0x080031a1
 800318c:	080031b5 	.word	0x080031b5
 8003190:	4a79      	ldr	r2, [pc, #484]	; (8003378 <HAL_GPIO_Init+0x2b4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003196:	e02c      	b.n	80031f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	623b      	str	r3, [r7, #32]
          break;
 800319e:	e029      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	623b      	str	r3, [r7, #32]
          break;
 80031a8:	e024      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	3308      	adds	r3, #8
 80031b0:	623b      	str	r3, [r7, #32]
          break;
 80031b2:	e01f      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	330c      	adds	r3, #12
 80031ba:	623b      	str	r3, [r7, #32]
          break;
 80031bc:	e01a      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031c6:	2304      	movs	r3, #4
 80031c8:	623b      	str	r3, [r7, #32]
          break;
 80031ca:	e013      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d4:	2308      	movs	r3, #8
 80031d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	611a      	str	r2, [r3, #16]
          break;
 80031de:	e009      	b.n	80031f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e0:	2308      	movs	r3, #8
 80031e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	615a      	str	r2, [r3, #20]
          break;
 80031ea:	e003      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
          break;
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x130>
          break;
 80031f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2bff      	cmp	r3, #255	; 0xff
 80031f8:	d801      	bhi.n	80031fe <HAL_GPIO_Init+0x13a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_Init+0x13e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	; 0xff
 8003208:	d802      	bhi.n	8003210 <HAL_GPIO_Init+0x14c>
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	e002      	b.n	8003216 <HAL_GPIO_Init+0x152>
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	3b08      	subs	r3, #8
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	210f      	movs	r1, #15
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	6a39      	ldr	r1, [r7, #32]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80b1 	beq.w	80033a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003244:	4b4d      	ldr	r3, [pc, #308]	; (800337c <HAL_GPIO_Init+0x2b8>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a4c      	ldr	r2, [pc, #304]	; (800337c <HAL_GPIO_Init+0x2b8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b4a      	ldr	r3, [pc, #296]	; (800337c <HAL_GPIO_Init+0x2b8>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800325c:	4a48      	ldr	r2, [pc, #288]	; (8003380 <HAL_GPIO_Init+0x2bc>)
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3302      	adds	r3, #2
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a40      	ldr	r2, [pc, #256]	; (8003384 <HAL_GPIO_Init+0x2c0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_GPIO_Init+0x1ec>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <HAL_GPIO_Init+0x2c4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00d      	beq.n	80032ac <HAL_GPIO_Init+0x1e8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3e      	ldr	r2, [pc, #248]	; (800338c <HAL_GPIO_Init+0x2c8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <HAL_GPIO_Init+0x1e4>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_GPIO_Init+0x2cc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_GPIO_Init+0x1e0>
 80032a0:	2303      	movs	r3, #3
 80032a2:	e006      	b.n	80032b2 <HAL_GPIO_Init+0x1ee>
 80032a4:	2304      	movs	r3, #4
 80032a6:	e004      	b.n	80032b2 <HAL_GPIO_Init+0x1ee>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e002      	b.n	80032b2 <HAL_GPIO_Init+0x1ee>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_GPIO_Init+0x1ee>
 80032b0:	2300      	movs	r3, #0
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	f002 0203 	and.w	r2, r2, #3
 80032b8:	0092      	lsls	r2, r2, #2
 80032ba:	4093      	lsls	r3, r2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032c2:	492f      	ldr	r1, [pc, #188]	; (8003380 <HAL_GPIO_Init+0x2bc>)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	3302      	adds	r3, #2
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	492c      	ldr	r1, [pc, #176]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	4928      	ldr	r1, [pc, #160]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4922      	ldr	r1, [pc, #136]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	43db      	mvns	r3, r3
 800331a:	491e      	ldr	r1, [pc, #120]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 800331c:	4013      	ands	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4918      	ldr	r1, [pc, #96]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e006      	b.n	8003348 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	43db      	mvns	r3, r3
 8003342:	4914      	ldr	r1, [pc, #80]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003344:	4013      	ands	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d021      	beq.n	8003398 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_GPIO_Init+0x2d0>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e021      	b.n	80033a6 <HAL_GPIO_Init+0x2e2>
 8003362:	bf00      	nop
 8003364:	10320000 	.word	0x10320000
 8003368:	10310000 	.word	0x10310000
 800336c:	10220000 	.word	0x10220000
 8003370:	10210000 	.word	0x10210000
 8003374:	10120000 	.word	0x10120000
 8003378:	10110000 	.word	0x10110000
 800337c:	40021000 	.word	0x40021000
 8003380:	40010000 	.word	0x40010000
 8003384:	40010800 	.word	0x40010800
 8003388:	40010c00 	.word	0x40010c00
 800338c:	40011000 	.word	0x40011000
 8003390:	40011400 	.word	0x40011400
 8003394:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_GPIO_Init+0x304>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	43db      	mvns	r3, r3
 80033a0:	4909      	ldr	r1, [pc, #36]	; (80033c8 <HAL_GPIO_Init+0x304>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	3301      	adds	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f ae8e 	bne.w	80030d8 <HAL_GPIO_Init+0x14>
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	372c      	adds	r7, #44	; 0x2c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	40010400 	.word	0x40010400

080033cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	4613      	mov	r3, r2
 80033da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033dc:	787b      	ldrb	r3, [r7, #1]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e8:	e003      	b.n	80033f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	041a      	lsls	r2, r3, #16
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	43d9      	mvns	r1, r3
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	400b      	ands	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e034      	b.n	80034aa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003448:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f245 5255 	movw	r2, #21845	; 0x5555
 8003452:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6892      	ldr	r2, [r2, #8]
 8003466:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003468:	f7fe fee6 	bl	8002238 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800346e:	e00f      	b.n	8003490 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003470:	f7fe fee2 	bl	8002238 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b27      	cmp	r3, #39	; 0x27
 800347c:	d908      	bls.n	8003490 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e00c      	b.n	80034aa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e8      	bne.n	8003470 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80034a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80034c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e272      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8087 	beq.w	80035fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f0:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d00c      	beq.n	8003516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034fc:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d112      	bne.n	800352e <HAL_RCC_OscConfig+0x5e>
 8003508:	4b8c      	ldr	r3, [pc, #560]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d10b      	bne.n	800352e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d06c      	beq.n	80035fc <HAL_RCC_OscConfig+0x12c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d168      	bne.n	80035fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e24c      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x76>
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7f      	ldr	r2, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e02e      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x98>
 800354e:	4b7b      	ldr	r3, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7a      	ldr	r2, [pc, #488]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a77      	ldr	r2, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0xbc>
 8003572:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a71      	ldr	r2, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 800358c:	4b6b      	ldr	r3, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fe44 	bl	8002238 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fe40 	bl	8002238 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e200      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe4>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fe30 	bl	8002238 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe fe2c 	bl	8002238 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1ec      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x10c>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360a:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x18c>
 8003622:	4b46      	ldr	r3, [pc, #280]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x176>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c0      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4939      	ldr	r1, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fde5 	bl	8002238 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe fde1 	bl	8002238 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a1      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4927      	ldr	r1, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fdc4 	bl	8002238 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fdc0 	bl	8002238 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e180      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03a      	beq.n	8003754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d019      	beq.n	800371a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_RCC_OscConfig+0x274>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fe fda4 	bl	8002238 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe fda0 	bl	8002238 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e160      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003712:	2001      	movs	r0, #1
 8003714:	f000 face 	bl	8003cb4 <RCC_Delay>
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_OscConfig+0x274>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003720:	f7fe fd8a 	bl	8002238 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003726:	e00f      	b.n	8003748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003728:	f7fe fd86 	bl	8002238 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d908      	bls.n	8003748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e146      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	42420000 	.word	0x42420000
 8003744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b92      	ldr	r3, [pc, #584]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e9      	bne.n	8003728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a6 	beq.w	80038ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b8b      	ldr	r3, [pc, #556]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4b88      	ldr	r3, [pc, #544]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4a87      	ldr	r2, [pc, #540]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	61d3      	str	r3, [r2, #28]
 800377e:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b82      	ldr	r3, [pc, #520]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7e      	ldr	r2, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fe fd47 	bl	8002238 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe fd43 	bl	8002238 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e103      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x312>
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a6e      	ldr	r2, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e02d      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x334>
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a69      	ldr	r2, [pc, #420]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a66      	ldr	r2, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6213      	str	r3, [r2, #32]
 8003802:	e01c      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d10c      	bne.n	8003826 <HAL_RCC_OscConfig+0x356>
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	e00b      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4a5a      	ldr	r2, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6213      	str	r3, [r2, #32]
 8003832:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a57      	ldr	r2, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d015      	beq.n	8003872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe fcf7 	bl	8002238 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fe fcf3 	bl	8002238 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0b1      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ee      	beq.n	800384e <HAL_RCC_OscConfig+0x37e>
 8003870:	e014      	b.n	800389c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fce1 	bl	8002238 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fcdd 	bl	8002238 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e09b      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8087 	beq.w	80039c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d061      	beq.n	8003988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d146      	bne.n	800395a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fe fcb1 	bl	8002238 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038da:	f7fe fcad 	bl	8002238 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e06d      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d108      	bne.n	8003914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4921      	ldr	r1, [pc, #132]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a19      	ldr	r1, [r3, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	430b      	orrs	r3, r1
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe fc81 	bl	8002238 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe fc7d 	bl	8002238 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e03d      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x46a>
 8003958:	e035      	b.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe fc6a 	bl	8002238 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fc66 	bl	8002238 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e026      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x498>
 8003986:	e01e      	b.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e019      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
 800399c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x500>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0d0      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	4965      	ldr	r1, [pc, #404]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d040      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e073      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06b      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4936      	ldr	r1, [pc, #216]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe fbb8 	bl	8002238 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe fbb4 	bl	8002238 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e053      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d210      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 0207 	bic.w	r2, r3, #7
 8003b0a:	4922      	ldr	r1, [pc, #136]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fb16 	bl	80021b4 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	0800a098 	.word	0x0800a098
 8003ba0:	20000010 	.word	0x20000010
 8003ba4:	20000014 	.word	0x20000014

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x36>
 8003bd6:	e027      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bda:	613b      	str	r3, [r7, #16]
      break;
 8003bdc:	e027      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	0c9b      	lsrs	r3, r3, #18
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	0c5b      	lsrs	r3, r3, #17
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e004      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2a:	613b      	str	r3, [r7, #16]
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	693b      	ldr	r3, [r7, #16]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	0800a0b0 	.word	0x0800a0b0
 8003c48:	0800a0c0 	.word	0x0800a0c0
 8003c4c:	003d0900 	.word	0x003d0900

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20000010 	.word	0x20000010

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff2 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	0800a0a8 	.word	0x0800a0a8

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffde 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0adb      	lsrs	r3, r3, #11
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	0800a0a8 	.word	0x0800a0a8

08003cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <RCC_Delay+0x34>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <RCC_Delay+0x38>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0a5b      	lsrs	r3, r3, #9
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cd0:	bf00      	nop
  }
  while (Delay --);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <RCC_Delay+0x1c>
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	20000010 	.word	0x20000010
 8003cec:	10624dd3 	.word	0x10624dd3

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d07d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d26:	61d3      	str	r3, [r2, #28]
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d118      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d44:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a42      	ldr	r2, [pc, #264]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d50:	f7fe fa72 	bl	8002238 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d56:	e008      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d58:	f7fe fa6e 	bl	8002238 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	; 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e06d      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02e      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d027      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d94:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003da4:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d014      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fa3d 	bl	8002238 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc2:	f7fe fa39 	bl	8002238 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e036      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ee      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4917      	ldr	r1, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	490b      	ldr	r1, [pc, #44]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42420440 	.word	0x42420440

08003e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	f200 808a 	bhi.w	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d045      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d075      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e92:	e082      	b.n	8003f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e94:	4b46      	ldr	r3, [pc, #280]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e9a:	4b45      	ldr	r3, [pc, #276]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d07b      	beq.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	0c9b      	lsrs	r3, r3, #18
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ebe:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0c5b      	lsrs	r3, r3, #17
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ed8:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f00:	d102      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	61bb      	str	r3, [r7, #24]
      break;
 8003f06:	e04a      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
      break;
 8003f16:	e042      	b.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f28:	d108      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e01f      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f46:	d109      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f54:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e00f      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f66:	d11c      	bne.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d016      	beq.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f78:	61bb      	str	r3, [r7, #24]
      break;
 8003f7a:	e012      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f7c:	e011      	b.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f7e:	f7ff fe85 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0b9b      	lsrs	r3, r3, #14
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	61bb      	str	r3, [r7, #24]
      break;
 8003f98:	e004      	b.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003fa2:	bf00      	nop
    }
  }
  return (frequency);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800a0c4 	.word	0x0800a0c4
 8003fb8:	0800a0d4 	.word	0x0800a0d4
 8003fbc:	007a1200 	.word	0x007a1200
 8003fc0:	003d0900 	.word	0x003d0900
 8003fc4:	aaaaaaab 	.word	0xaaaaaaab

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e041      	b.n	800405e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fe9a 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 fa74 	bl	80044f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d001      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e03a      	b.n	80040f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_TIM_Base_Start_IT+0x98>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x58>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d009      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x58>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <HAL_TIM_Base_Start_IT+0x9c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x58>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <HAL_TIM_Base_Start_IT+0xa0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d111      	bne.n	80040e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d010      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	e007      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9b4 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9a7 	bl	80044aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9b6 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0204 	mvn.w	r2, #4
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f98a 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f97d 	bl	80044aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f98c 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0208 	mvn.w	r2, #8
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f960 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f953 	bl	80044aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f962 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f936 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f929 	bl	80044aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f938 	bl	80044ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc ff42 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa7b 	bl	80047b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8fc 	bl	80044e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0220 	mvn.w	r2, #32
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa46 	bl	80047a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIM_ConfigClockSource+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e0b4      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004370:	d03e      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004376:	f200 8087 	bhi.w	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	f000 8086 	beq.w	800448e <HAL_TIM_ConfigClockSource+0x172>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d87f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d01a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xa6>
 800438c:	2b70      	cmp	r3, #112	; 0x70
 800438e:	d87b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d050      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x11a>
 8004394:	2b60      	cmp	r3, #96	; 0x60
 8004396:	d877      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d03c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xfa>
 800439c:	2b50      	cmp	r3, #80	; 0x50
 800439e:	d873      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d058      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x13a>
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d86f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d86b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d060      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d867      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d05a      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	e062      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 f968 	bl	80046a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      break;
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 f951 	bl	80046a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004412:	609a      	str	r2, [r3, #8]
      break;
 8004414:	e03c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 f8c8 	bl	80045b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	; 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f91f 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 8004434:	e02c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 f8e6 	bl	8004614 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2160      	movs	r1, #96	; 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f90f 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 8004454:	e01c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 f8a8 	bl	80045b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2140      	movs	r1, #64	; 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f8ff 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 8004474:	e00c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 f8f6 	bl	8004672 <TIM_ITRx_SetConfig>
      break;
 8004486:	e003      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e000      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
	...

080044f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a29      	ldr	r2, [pc, #164]	; (80045ac <TIM_Base_SetConfig+0xb8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0x30>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0x30>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <TIM_Base_SetConfig+0xbc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0x30>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <TIM_Base_SetConfig+0xc0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <TIM_Base_SetConfig+0xb8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x62>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <TIM_Base_SetConfig+0xbc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x62>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <TIM_Base_SetConfig+0xc0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <TIM_Base_SetConfig+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	615a      	str	r2, [r3, #20]
}
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800

080045b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f023 030a 	bic.w	r3, r3, #10
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f023 0210 	bic.w	r2, r3, #16
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800463e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	031b      	lsls	r3, r3, #12
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004650:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	f043 0307 	orr.w	r3, r3, #7
 8004694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	609a      	str	r2, [r3, #8]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b087      	sub	sp, #28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	021a      	lsls	r2, r3, #8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e046      	b.n	800478a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a16      	ldr	r2, [pc, #88]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004748:	d009      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a12      	ldr	r2, [pc, #72]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a10      	ldr	r2, [pc, #64]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10c      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4313      	orrs	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800

080047a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e042      	b.n	800485c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fac0 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fe57 	bl	80054bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b20      	cmp	r3, #32
 8004882:	d16d      	bne.n	8004960 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Transmit+0x2c>
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e066      	b.n	8004962 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	; 0x21
 800489e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a2:	f7fd fcc9 	bl	8002238 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x6c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d8:	e02a      	b.n	8004930 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fba6 	bl	8005036 <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e036      	b.n	8004962 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	3302      	adds	r3, #2
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	e007      	b.n	8004922 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1cf      	bne.n	80048da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fb76 	bl	8005036 <UART_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e006      	b.n	8004962 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b08a      	sub	sp, #40	; 0x28
 800496e:	af02      	add	r7, sp, #8
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b20      	cmp	r3, #32
 8004988:	d17c      	bne.n	8004a84 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_UART_Receive+0x2c>
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e075      	b.n	8004a86 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2222      	movs	r2, #34	; 0x22
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ae:	f7fd fc43 	bl	8002238 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c8:	d108      	bne.n	80049dc <HAL_UART_Receive+0x72>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e003      	b.n	80049e4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049e4:	e043      	b.n	8004a6e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2120      	movs	r1, #32
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fb20 	bl	8005036 <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e042      	b.n	8004a86 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10c      	bne.n	8004a20 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e01f      	b.n	8004a60 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d007      	beq.n	8004a3a <HAL_UART_Receive+0xd0>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <HAL_UART_Receive+0xde>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e008      	b.n	8004a5a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1b6      	bne.n	80049e6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e000      	b.n	8004a86 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d112      	bne.n	8004ace <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_UART_Receive_IT+0x26>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e00b      	b.n	8004ad0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fb24 	bl	8005112 <UART_Start_Receive_IT>
 8004aca:	4603      	mov	r3, r0
 8004acc:	e000      	b.n	8004ad0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b0ba      	sub	sp, #232	; 0xe8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_UART_IRQHandler+0x66>
 8004b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fc01 	bl	800533e <UART_Receive_IT>
      return;
 8004b3c:	e25b      	b.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80de 	beq.w	8004d04 <HAL_UART_IRQHandler+0x22c>
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80d1 	beq.w	8004d04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_UART_IRQHandler+0xae>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <HAL_UART_IRQHandler+0xd2>
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f043 0202 	orr.w	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_UART_IRQHandler+0xf6>
 8004bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	f043 0204 	orr.w	r2, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_UART_IRQHandler+0x126>
 8004bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d105      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	f043 0208 	orr.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 81f2 	beq.w	8004fec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_UART_IRQHandler+0x14e>
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb8c 	bl	800533e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <HAL_UART_IRQHandler+0x17a>
 8004c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d04f      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa96 	bl	8005184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d041      	beq.n	8004cea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004caa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1d9      	bne.n	8004c66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d013      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <HAL_UART_IRQHandler+0x3e0>)
 8004cc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe f95e 	bl	8002f88 <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce0:	e00e      	b.n	8004d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f993 	bl	800500e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce8:	e00a      	b.n	8004d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f98f 	bl	800500e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	e006      	b.n	8004d00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f98b 	bl	800500e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cfe:	e175      	b.n	8004fec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	bf00      	nop
    return;
 8004d02:	e173      	b.n	8004fec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	f040 814f 	bne.w	8004fac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8148 	beq.w	8004fac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8141 	beq.w	8004fac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80b6 	beq.w	8004ebc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 8145 	beq.w	8004ff0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	f080 813e 	bcs.w	8004ff0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	f000 8088 	beq.w	8004e98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004db4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1d9      	bne.n	8004d88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3314      	adds	r3, #20
 8004dda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3314      	adds	r3, #20
 8004df4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004df8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e1      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e34:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e3      	bne.n	8004e10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e3      	bne.n	8004e56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe f83d 	bl	8002f12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8b6 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb4:	e09c      	b.n	8004ff0 <HAL_UART_IRQHandler+0x518>
 8004eb6:	bf00      	nop
 8004eb8:	08005249 	.word	0x08005249
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 808e 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8089 	beq.w	8004ff4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f06:	647a      	str	r2, [r7, #68]	; 0x44
 8004f08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e3      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3314      	adds	r3, #20
 8004f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e3      	bne.n	8004f1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0310 	bic.w	r3, r3, #16
 8004f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f84:	61fa      	str	r2, [r7, #28]
 8004f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69b9      	ldr	r1, [r7, #24]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	617b      	str	r3, [r7, #20]
   return(result);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e3      	bne.n	8004f60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f83b 	bl	8005020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004faa:	e023      	b.n	8004ff4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_UART_IRQHandler+0x4f4>
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f953 	bl	8005270 <UART_Transmit_IT>
    return;
 8004fca:	e014      	b.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
 8004fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f992 	bl	800530e <UART_EndTransmit_IT>
    return;
 8004fea:	e004      	b.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ff4:	bf00      	nop
  }
}
 8004ff6:	37e8      	adds	r7, #232	; 0xe8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b090      	sub	sp, #64	; 0x40
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005046:	e050      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d04c      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	2b00      	cmp	r3, #0
 8005054:	d007      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0x30>
 8005056:	f7fd f8ef 	bl	8002238 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005062:	429a      	cmp	r2, r3
 8005064:	d241      	bcs.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005086:	637a      	str	r2, [r7, #52]	; 0x34
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800508c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	613b      	str	r3, [r7, #16]
   return(result);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	623a      	str	r2, [r7, #32]
 80050bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	69f9      	ldr	r1, [r7, #28]
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e00f      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d09f      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3740      	adds	r7, #64	; 0x40
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	88fa      	ldrh	r2, [r7, #6]
 8005130:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2222      	movs	r2, #34	; 0x22
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005156:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b095      	sub	sp, #84	; 0x54
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ac:	643a      	str	r2, [r7, #64]	; 0x40
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d119      	bne.n	8005230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	60bb      	str	r3, [r7, #8]
   return(result);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 0310 	bic.w	r3, r3, #16
 8005212:	647b      	str	r3, [r7, #68]	; 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800521c:	61ba      	str	r2, [r7, #24]
 800521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6979      	ldr	r1, [r7, #20]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	613b      	str	r3, [r7, #16]
   return(result);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800523e:	bf00      	nop
 8005240:	3754      	adds	r7, #84	; 0x54
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff fed3 	bl	800500e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b21      	cmp	r3, #33	; 0x21
 8005282:	d13e      	bne.n	8005302 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d114      	bne.n	80052b8 <UART_Transmit_IT+0x48>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d110      	bne.n	80052b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	1c9a      	adds	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]
 80052b6:	e008      	b.n	80052ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	1c59      	adds	r1, r3, #1
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6211      	str	r1, [r2, #32]
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	4619      	mov	r1, r3
 80052d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe64 	bl	8004ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08c      	sub	sp, #48	; 0x30
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b22      	cmp	r3, #34	; 0x22
 8005350:	f040 80ae 	bne.w	80054b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535c:	d117      	bne.n	800538e <UART_Receive_IT+0x50>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d113      	bne.n	800538e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537c:	b29a      	uxth	r2, r3
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
 800538c:	e026      	b.n	80053dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a0:	d007      	beq.n	80053b2 <UART_Receive_IT+0x74>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <UART_Receive_IT+0x82>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e008      	b.n	80053d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4619      	mov	r1, r3
 80053ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d15d      	bne.n	80054ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0220 	bic.w	r2, r2, #32
 80053fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800540e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	2b01      	cmp	r3, #1
 8005434:	d135      	bne.n	80054a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	613b      	str	r3, [r7, #16]
   return(result);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 0310 	bic.w	r3, r3, #16
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545c:	623a      	str	r2, [r7, #32]
 800545e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	61bb      	str	r3, [r7, #24]
   return(result);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b10      	cmp	r3, #16
 800547c:	d10a      	bne.n	8005494 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fdc0 	bl	8005020 <HAL_UARTEx_RxEventCallback>
 80054a0:	e002      	b.n	80054a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fb fed0 	bl	8001248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e002      	b.n	80054b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3730      	adds	r7, #48	; 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054f6:	f023 030c 	bic.w	r3, r3, #12
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	430b      	orrs	r3, r1
 8005502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <UART_SetConfig+0x114>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d103      	bne.n	800552c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fe fbb2 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	e002      	b.n	8005532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800552c:	f7fe fb9a 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009a      	lsls	r2, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <UART_SetConfig+0x118>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	0119      	lsls	r1, r3, #4
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009a      	lsls	r2, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fbb2 f2f3 	udiv	r2, r2, r3
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <UART_SetConfig+0x118>)
 800556a:	fba3 0302 	umull	r0, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2064      	movs	r0, #100	; 0x64
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	; 0x32
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <UART_SetConfig+0x118>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005588:	4419      	add	r1, r3
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009a      	lsls	r2, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <UART_SetConfig+0x118>)
 80055a2:	fba3 0302 	umull	r0, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	2064      	movs	r0, #100	; 0x64
 80055aa:	fb00 f303 	mul.w	r3, r0, r3
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	3332      	adds	r3, #50	; 0x32
 80055b4:	4a07      	ldr	r2, [pc, #28]	; (80055d4 <UART_SetConfig+0x118>)
 80055b6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	440a      	add	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40013800 	.word	0x40013800
 80055d4:	51eb851f 	.word	0x51eb851f

080055d8 <deleteBuffer>:
#include <flash.h>

uint8_t lengthPage;

void deleteBuffer(char* data)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(data);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7fa fdbf 	bl	8000164 <strlen>
 80055e6:	4603      	mov	r3, r0
 80055e8:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
 80055ee:	e007      	b.n	8005600 <deleteBuffer+0x28>
	{
		data[i] = 0;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	3301      	adds	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	7bbb      	ldrb	r3, [r7, #14]
 8005604:	429a      	cmp	r2, r3
 8005606:	d3f3      	bcc.n	80055f0 <deleteBuffer+0x18>
	}
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <Flash_Unlock>:
{
	HAL_FLASH_Lock();
}

void Flash_Unlock()
{
 8005612:	b580      	push	{r7, lr}
 8005614:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8005616:	f7fd fd2f 	bl	8003078 <HAL_FLASH_Unlock>
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <Flash_Erase>:

void Flash_Erase(uint32_t addr)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  while((FLASH->SR&FLASH_SR_BSY));
 8005628:	bf00      	nop
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <Flash_Erase+0x64>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f9      	bne.n	800562a <Flash_Erase+0xa>
  FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <Flash_Erase+0x64>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4a12      	ldr	r2, [pc, #72]	; (8005684 <Flash_Erase+0x64>)
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	6113      	str	r3, [r2, #16]
  FLASH->AR = addr; //Page Address
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <Flash_Erase+0x64>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6153      	str	r3, [r2, #20]
  FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8005648:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <Flash_Erase+0x64>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <Flash_Erase+0x64>)
 800564e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005652:	6113      	str	r3, [r2, #16]
  while((FLASH->SR&FLASH_SR_BSY));
 8005654:	bf00      	nop
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <Flash_Erase+0x64>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f9      	bne.n	8005656 <Flash_Erase+0x36>
	FLASH->CR &= ~FLASH_SR_BSY;
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <Flash_Erase+0x64>)
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <Flash_Erase+0x64>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6113      	str	r3, [r2, #16]
  FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <Flash_Erase+0x64>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4a04      	ldr	r2, [pc, #16]	; (8005684 <Flash_Erase+0x64>)
 8005674:	f023 0302 	bic.w	r3, r3, #2
 8005678:	6113      	str	r3, [r2, #16]
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40022000 	.word	0x40022000

08005688 <Flash_Read_Int>:
	FLASH->CR &= ~FLASH_CR_PG;
	Flash_Lock();
}

uint16_t Flash_Read_Int(uint32_t addr)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	uint16_t* val = (uint16_t *)addr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]
	return *val;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	881b      	ldrh	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
	...

080056a4 <Flash_Write_Char>:

void Flash_Write_Char(uint32_t addr, char* data)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	Flash_Unlock();
 80056ae:	f7ff ffb0 	bl	8005612 <Flash_Unlock>
	int i;
  FLASH->CR |= FLASH_CR_PG;
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <Flash_Write_Char+0x9c>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4a22      	ldr	r2, [pc, #136]	; (8005740 <Flash_Write_Char+0x9c>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6113      	str	r3, [r2, #16]
	int var = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
	lengthPage = strlen(data);
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f7fa fd4e 	bl	8000164 <strlen>
 80056c8:	4603      	mov	r3, r0
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <Flash_Write_Char+0xa0>)
 80056ce:	701a      	strb	r2, [r3, #0]
  for(i=0; i<lengthPage; i+=1)
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e016      	b.n	8005704 <Flash_Write_Char+0x60>
  {
    while((FLASH->SR&FLASH_SR_BSY));
 80056d6:	bf00      	nop
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <Flash_Write_Char+0x9c>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f9      	bne.n	80056d8 <Flash_Write_Char+0x34>
		var = (int)data[i];
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
    *(__IO uint16_t*)(addr + i*2) = var;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	b292      	uxth	r2, r2
 80056fc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<lengthPage; i+=1)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <Flash_Write_Char+0xa0>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4293      	cmp	r3, r2
 800570e:	dbe2      	blt.n	80056d6 <Flash_Write_Char+0x32>
  }
	while((FLASH->SR&FLASH_SR_BSY)){};
 8005710:	bf00      	nop
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <Flash_Write_Char+0x9c>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f9      	bne.n	8005712 <Flash_Write_Char+0x6e>
  FLASH->CR &= ~FLASH_CR_PG;
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <Flash_Write_Char+0x9c>)
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <Flash_Write_Char+0x9c>)
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_LOCK;
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <Flash_Write_Char+0x9c>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <Flash_Write_Char+0x9c>)
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	6113      	str	r3, [r2, #16]
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40022000 	.word	0x40022000
 8005744:	20000454 	.word	0x20000454

08005748 <Flash_ReadChar>:

void Flash_ReadChar(char* dataOut, uint32_t addr1, uint32_t addr2)
{
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
	int check = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
	deleteBuffer(dataOut);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff3d 	bl	80055d8 <deleteBuffer>
	if((unsigned char)Flash_Read_Int(addr2+(uint32_t)2) == 255)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3302      	adds	r3, #2
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff90 	bl	8005688 <Flash_Read_Int>
 8005768:	4603      	mov	r3, r0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2bff      	cmp	r3, #255	; 0xff
 800576e:	d107      	bne.n	8005780 <Flash_ReadChar+0x38>
	{
		check = (unsigned char)Flash_Read_Int(addr2)-48;
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff89 	bl	8005688 <Flash_Read_Int>
 8005776:	4603      	mov	r3, r0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	3b30      	subs	r3, #48	; 0x30
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e015      	b.n	80057ac <Flash_ReadChar+0x64>
	}
	else
	{
		check = ((unsigned char)Flash_Read_Int(addr2)-48)*10 + (unsigned char)Flash_Read_Int(addr2+2)-48;
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff81 	bl	8005688 <Flash_Read_Int>
 8005786:	4603      	mov	r3, r0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	461c      	mov	r4, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3302      	adds	r3, #2
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff ff73 	bl	8005688 <Flash_Read_Int>
 80057a2:	4603      	mov	r3, r0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	4423      	add	r3, r4
 80057a8:	3b30      	subs	r3, #48	; 0x30
 80057aa:	617b      	str	r3, [r7, #20]
	}
	for(int i = 0; i < check; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e011      	b.n	80057d6 <Flash_ReadChar+0x8e>
	{
		dataOut[i] = Flash_Read_Int(addr1 + (uint32_t)(i*2));
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4413      	add	r3, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff63 	bl	8005688 <Flash_Read_Int>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4619      	mov	r1, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	b2ca      	uxtb	r2, r1
 80057ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < check; i++)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	3301      	adds	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	429a      	cmp	r2, r3
 80057dc:	dbe9      	blt.n	80057b2 <Flash_ReadChar+0x6a>
	}
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd90      	pop	{r4, r7, pc}

080057e8 <Flash_ProgramPage>:

void Flash_ProgramPage(char* dataIn, uint32_t addr1, uint32_t addr2)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	//FLASH_Unlock
	Flash_Unlock();
 80057f4:	f7ff ff0d 	bl	8005612 <Flash_Unlock>
	//Flash_Erase Page
	Flash_Erase(addr1);
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	f7ff ff11 	bl	8005620 <Flash_Erase>
	//FLASH_Program HalfWord
	Flash_Write_Char(addr1,dataIn);
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	68b8      	ldr	r0, [r7, #8]
 8005802:	f7ff ff4f 	bl	80056a4 <Flash_Write_Char>
	HAL_Delay(100);
 8005806:	2064      	movs	r0, #100	; 0x64
 8005808:	f7fc fd20 	bl	800224c <HAL_Delay>
	char tempbuf[5] = {0};
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	753b      	strb	r3, [r7, #20]
	sprintf(tempbuf,"%d",lengthPage);
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <Flash_ProgramPage+0x5c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	f107 0310 	add.w	r3, r7, #16
 800581e:	490a      	ldr	r1, [pc, #40]	; (8005848 <Flash_ProgramPage+0x60>)
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fe43 	bl	80064ac <siprintf>
	//FLASH_Unlock
	Flash_Unlock();
 8005826:	f7ff fef4 	bl	8005612 <Flash_Unlock>
	//Flash_Erase Page
	Flash_Erase(addr2);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fef8 	bl	8005620 <Flash_Erase>
	//FLASH_Program HalfWord
	Flash_Write_Char(addr2,tempbuf);
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ff34 	bl	80056a4 <Flash_Write_Char>
}
 800583c:	bf00      	nop
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000454 	.word	0x20000454
 8005848:	0800a094 	.word	0x0800a094

0800584c <atof>:
 800584c:	2100      	movs	r1, #0
 800584e:	f001 bc87 	b.w	8007160 <strtod>

08005852 <atoi>:
 8005852:	220a      	movs	r2, #10
 8005854:	2100      	movs	r1, #0
 8005856:	f001 bd67 	b.w	8007328 <strtol>
	...

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000001c 	.word	0x2000001c

08005868 <exit>:
 8005868:	b508      	push	{r3, lr}
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <exit+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	b113      	cbz	r3, 8005876 <exit+0xe>
 8005870:	2100      	movs	r1, #0
 8005872:	f3af 8000 	nop.w
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <exit+0x24>)
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800587c:	b103      	cbz	r3, 8005880 <exit+0x18>
 800587e:	4798      	blx	r3
 8005880:	4620      	mov	r0, r4
 8005882:	f7fc fbac 	bl	8001fde <_exit>
 8005886:	bf00      	nop
 8005888:	00000000 	.word	0x00000000
 800588c:	0800a0d8 	.word	0x0800a0d8

08005890 <__libc_init_array>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	2600      	movs	r6, #0
 8005894:	4d0c      	ldr	r5, [pc, #48]	; (80058c8 <__libc_init_array+0x38>)
 8005896:	4c0d      	ldr	r4, [pc, #52]	; (80058cc <__libc_init_array+0x3c>)
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	42a6      	cmp	r6, r4
 800589e:	d109      	bne.n	80058b4 <__libc_init_array+0x24>
 80058a0:	f004 fb66 	bl	8009f70 <_init>
 80058a4:	2600      	movs	r6, #0
 80058a6:	4d0a      	ldr	r5, [pc, #40]	; (80058d0 <__libc_init_array+0x40>)
 80058a8:	4c0a      	ldr	r4, [pc, #40]	; (80058d4 <__libc_init_array+0x44>)
 80058aa:	1b64      	subs	r4, r4, r5
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	d105      	bne.n	80058be <__libc_init_array+0x2e>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b8:	4798      	blx	r3
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7ee      	b.n	800589c <__libc_init_array+0xc>
 80058be:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c2:	4798      	blx	r3
 80058c4:	3601      	adds	r6, #1
 80058c6:	e7f2      	b.n	80058ae <__libc_init_array+0x1e>
 80058c8:	0800a5d8 	.word	0x0800a5d8
 80058cc:	0800a5d8 	.word	0x0800a5d8
 80058d0:	0800a5d8 	.word	0x0800a5d8
 80058d4:	0800a5dc 	.word	0x0800a5dc

080058d8 <malloc>:
 80058d8:	4b02      	ldr	r3, [pc, #8]	; (80058e4 <malloc+0xc>)
 80058da:	4601      	mov	r1, r0
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f000 b873 	b.w	80059c8 <_malloc_r>
 80058e2:	bf00      	nop
 80058e4:	2000001c 	.word	0x2000001c

080058e8 <memset>:
 80058e8:	4603      	mov	r3, r0
 80058ea:	4402      	add	r2, r0
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d100      	bne.n	80058f2 <memset+0xa>
 80058f0:	4770      	bx	lr
 80058f2:	f803 1b01 	strb.w	r1, [r3], #1
 80058f6:	e7f9      	b.n	80058ec <memset+0x4>

080058f8 <_free_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4605      	mov	r5, r0
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d040      	beq.n	8005982 <_free_r+0x8a>
 8005900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005904:	1f0c      	subs	r4, r1, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	18e4      	addlt	r4, r4, r3
 800590c:	f003 fa34 	bl	8008d78 <__malloc_lock>
 8005910:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <_free_r+0x8c>)
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	b933      	cbnz	r3, 8005924 <_free_r+0x2c>
 8005916:	6063      	str	r3, [r4, #4]
 8005918:	6014      	str	r4, [r2, #0]
 800591a:	4628      	mov	r0, r5
 800591c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005920:	f003 ba30 	b.w	8008d84 <__malloc_unlock>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d908      	bls.n	800593a <_free_r+0x42>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	1821      	adds	r1, r4, r0
 800592c:	428b      	cmp	r3, r1
 800592e:	bf01      	itttt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	1809      	addeq	r1, r1, r0
 8005936:	6021      	streq	r1, [r4, #0]
 8005938:	e7ed      	b.n	8005916 <_free_r+0x1e>
 800593a:	461a      	mov	r2, r3
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b10b      	cbz	r3, 8005944 <_free_r+0x4c>
 8005940:	42a3      	cmp	r3, r4
 8005942:	d9fa      	bls.n	800593a <_free_r+0x42>
 8005944:	6811      	ldr	r1, [r2, #0]
 8005946:	1850      	adds	r0, r2, r1
 8005948:	42a0      	cmp	r0, r4
 800594a:	d10b      	bne.n	8005964 <_free_r+0x6c>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	4401      	add	r1, r0
 8005950:	1850      	adds	r0, r2, r1
 8005952:	4283      	cmp	r3, r0
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	d1e0      	bne.n	800591a <_free_r+0x22>
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4401      	add	r1, r0
 800595e:	6011      	str	r1, [r2, #0]
 8005960:	6053      	str	r3, [r2, #4]
 8005962:	e7da      	b.n	800591a <_free_r+0x22>
 8005964:	d902      	bls.n	800596c <_free_r+0x74>
 8005966:	230c      	movs	r3, #12
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	e7d6      	b.n	800591a <_free_r+0x22>
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	1821      	adds	r1, r4, r0
 8005970:	428b      	cmp	r3, r1
 8005972:	bf01      	itttt	eq
 8005974:	6819      	ldreq	r1, [r3, #0]
 8005976:	685b      	ldreq	r3, [r3, #4]
 8005978:	1809      	addeq	r1, r1, r0
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	6063      	str	r3, [r4, #4]
 800597e:	6054      	str	r4, [r2, #4]
 8005980:	e7cb      	b.n	800591a <_free_r+0x22>
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20000458 	.word	0x20000458

08005988 <sbrk_aligned>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4e0e      	ldr	r6, [pc, #56]	; (80059c4 <sbrk_aligned+0x3c>)
 800598c:	460c      	mov	r4, r1
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	4605      	mov	r5, r0
 8005992:	b911      	cbnz	r1, 800599a <sbrk_aligned+0x12>
 8005994:	f000 fd7a 	bl	800648c <_sbrk_r>
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	4621      	mov	r1, r4
 800599c:	4628      	mov	r0, r5
 800599e:	f000 fd75 	bl	800648c <_sbrk_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d00a      	beq.n	80059bc <sbrk_aligned+0x34>
 80059a6:	1cc4      	adds	r4, r0, #3
 80059a8:	f024 0403 	bic.w	r4, r4, #3
 80059ac:	42a0      	cmp	r0, r4
 80059ae:	d007      	beq.n	80059c0 <sbrk_aligned+0x38>
 80059b0:	1a21      	subs	r1, r4, r0
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 fd6a 	bl	800648c <_sbrk_r>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d101      	bne.n	80059c0 <sbrk_aligned+0x38>
 80059bc:	f04f 34ff 	mov.w	r4, #4294967295
 80059c0:	4620      	mov	r0, r4
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	2000045c 	.word	0x2000045c

080059c8 <_malloc_r>:
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	1ccd      	adds	r5, r1, #3
 80059ce:	f025 0503 	bic.w	r5, r5, #3
 80059d2:	3508      	adds	r5, #8
 80059d4:	2d0c      	cmp	r5, #12
 80059d6:	bf38      	it	cc
 80059d8:	250c      	movcc	r5, #12
 80059da:	2d00      	cmp	r5, #0
 80059dc:	4607      	mov	r7, r0
 80059de:	db01      	blt.n	80059e4 <_malloc_r+0x1c>
 80059e0:	42a9      	cmp	r1, r5
 80059e2:	d905      	bls.n	80059f0 <_malloc_r+0x28>
 80059e4:	230c      	movs	r3, #12
 80059e6:	2600      	movs	r6, #0
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4630      	mov	r0, r6
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f0:	4e2e      	ldr	r6, [pc, #184]	; (8005aac <_malloc_r+0xe4>)
 80059f2:	f003 f9c1 	bl	8008d78 <__malloc_lock>
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	461c      	mov	r4, r3
 80059fa:	bb34      	cbnz	r4, 8005a4a <_malloc_r+0x82>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4638      	mov	r0, r7
 8005a00:	f7ff ffc2 	bl	8005988 <sbrk_aligned>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	4604      	mov	r4, r0
 8005a08:	d14d      	bne.n	8005aa6 <_malloc_r+0xde>
 8005a0a:	6834      	ldr	r4, [r6, #0]
 8005a0c:	4626      	mov	r6, r4
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d140      	bne.n	8005a94 <_malloc_r+0xcc>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4638      	mov	r0, r7
 8005a18:	eb04 0803 	add.w	r8, r4, r3
 8005a1c:	f000 fd36 	bl	800648c <_sbrk_r>
 8005a20:	4580      	cmp	r8, r0
 8005a22:	d13a      	bne.n	8005a9a <_malloc_r+0xd2>
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	3503      	adds	r5, #3
 8005a28:	1a6d      	subs	r5, r5, r1
 8005a2a:	f025 0503 	bic.w	r5, r5, #3
 8005a2e:	3508      	adds	r5, #8
 8005a30:	2d0c      	cmp	r5, #12
 8005a32:	bf38      	it	cc
 8005a34:	250c      	movcc	r5, #12
 8005a36:	4638      	mov	r0, r7
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7ff ffa5 	bl	8005988 <sbrk_aligned>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d02b      	beq.n	8005a9a <_malloc_r+0xd2>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	442b      	add	r3, r5
 8005a46:	6023      	str	r3, [r4, #0]
 8005a48:	e00e      	b.n	8005a68 <_malloc_r+0xa0>
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	1b52      	subs	r2, r2, r5
 8005a4e:	d41e      	bmi.n	8005a8e <_malloc_r+0xc6>
 8005a50:	2a0b      	cmp	r2, #11
 8005a52:	d916      	bls.n	8005a82 <_malloc_r+0xba>
 8005a54:	1961      	adds	r1, r4, r5
 8005a56:	42a3      	cmp	r3, r4
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	bf18      	it	ne
 8005a5c:	6059      	strne	r1, [r3, #4]
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	bf08      	it	eq
 8005a62:	6031      	streq	r1, [r6, #0]
 8005a64:	5162      	str	r2, [r4, r5]
 8005a66:	604b      	str	r3, [r1, #4]
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f104 060b 	add.w	r6, r4, #11
 8005a6e:	f003 f989 	bl	8008d84 <__malloc_unlock>
 8005a72:	f026 0607 	bic.w	r6, r6, #7
 8005a76:	1d23      	adds	r3, r4, #4
 8005a78:	1af2      	subs	r2, r6, r3
 8005a7a:	d0b6      	beq.n	80059ea <_malloc_r+0x22>
 8005a7c:	1b9b      	subs	r3, r3, r6
 8005a7e:	50a3      	str	r3, [r4, r2]
 8005a80:	e7b3      	b.n	80059ea <_malloc_r+0x22>
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	bf0c      	ite	eq
 8005a88:	6032      	streq	r2, [r6, #0]
 8005a8a:	605a      	strne	r2, [r3, #4]
 8005a8c:	e7ec      	b.n	8005a68 <_malloc_r+0xa0>
 8005a8e:	4623      	mov	r3, r4
 8005a90:	6864      	ldr	r4, [r4, #4]
 8005a92:	e7b2      	b.n	80059fa <_malloc_r+0x32>
 8005a94:	4634      	mov	r4, r6
 8005a96:	6876      	ldr	r6, [r6, #4]
 8005a98:	e7b9      	b.n	8005a0e <_malloc_r+0x46>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	f003 f970 	bl	8008d84 <__malloc_unlock>
 8005aa4:	e7a1      	b.n	80059ea <_malloc_r+0x22>
 8005aa6:	6025      	str	r5, [r4, #0]
 8005aa8:	e7de      	b.n	8005a68 <_malloc_r+0xa0>
 8005aaa:	bf00      	nop
 8005aac:	20000458 	.word	0x20000458

08005ab0 <__cvt>:
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	bfbb      	ittet	lt
 8005aba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	461f      	movlt	r7, r3
 8005ac0:	2300      	movge	r3, #0
 8005ac2:	232d      	movlt	r3, #45	; 0x2d
 8005ac4:	b088      	sub	sp, #32
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005acc:	7013      	strb	r3, [r2, #0]
 8005ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ad0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ad4:	f023 0820 	bic.w	r8, r3, #32
 8005ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005adc:	d005      	beq.n	8005aea <__cvt+0x3a>
 8005ade:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ae2:	d100      	bne.n	8005ae6 <__cvt+0x36>
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e000      	b.n	8005aec <__cvt+0x3c>
 8005aea:	2303      	movs	r3, #3
 8005aec:	aa07      	add	r2, sp, #28
 8005aee:	9204      	str	r2, [sp, #16]
 8005af0:	aa06      	add	r2, sp, #24
 8005af2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005af6:	e9cd 3500 	strd	r3, r5, [sp]
 8005afa:	4622      	mov	r2, r4
 8005afc:	463b      	mov	r3, r7
 8005afe:	f001 fd87 	bl	8007610 <_dtoa_r>
 8005b02:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b06:	4606      	mov	r6, r0
 8005b08:	d102      	bne.n	8005b10 <__cvt+0x60>
 8005b0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b0c:	07db      	lsls	r3, r3, #31
 8005b0e:	d522      	bpl.n	8005b56 <__cvt+0xa6>
 8005b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b14:	eb06 0905 	add.w	r9, r6, r5
 8005b18:	d110      	bne.n	8005b3c <__cvt+0x8c>
 8005b1a:	7833      	ldrb	r3, [r6, #0]
 8005b1c:	2b30      	cmp	r3, #48	; 0x30
 8005b1e:	d10a      	bne.n	8005b36 <__cvt+0x86>
 8005b20:	2200      	movs	r2, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	4620      	mov	r0, r4
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa ff48 	bl	80009bc <__aeabi_dcmpeq>
 8005b2c:	b918      	cbnz	r0, 8005b36 <__cvt+0x86>
 8005b2e:	f1c5 0501 	rsb	r5, r5, #1
 8005b32:	f8ca 5000 	str.w	r5, [sl]
 8005b36:	f8da 3000 	ldr.w	r3, [sl]
 8005b3a:	4499      	add	r9, r3
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4620      	mov	r0, r4
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa ff3a 	bl	80009bc <__aeabi_dcmpeq>
 8005b48:	b108      	cbz	r0, 8005b4e <__cvt+0x9e>
 8005b4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b4e:	2230      	movs	r2, #48	; 0x30
 8005b50:	9b07      	ldr	r3, [sp, #28]
 8005b52:	454b      	cmp	r3, r9
 8005b54:	d307      	bcc.n	8005b66 <__cvt+0xb6>
 8005b56:	4630      	mov	r0, r6
 8005b58:	9b07      	ldr	r3, [sp, #28]
 8005b5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b5c:	1b9b      	subs	r3, r3, r6
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	b008      	add	sp, #32
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	9107      	str	r1, [sp, #28]
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e7f0      	b.n	8005b50 <__cvt+0xa0>

08005b6e <__exponent>:
 8005b6e:	4603      	mov	r3, r0
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	2900      	cmp	r1, #0
 8005b74:	f803 2b02 	strb.w	r2, [r3], #2
 8005b78:	bfb6      	itet	lt
 8005b7a:	222d      	movlt	r2, #45	; 0x2d
 8005b7c:	222b      	movge	r2, #43	; 0x2b
 8005b7e:	4249      	neglt	r1, r1
 8005b80:	2909      	cmp	r1, #9
 8005b82:	7042      	strb	r2, [r0, #1]
 8005b84:	dd2b      	ble.n	8005bde <__exponent+0x70>
 8005b86:	f10d 0407 	add.w	r4, sp, #7
 8005b8a:	46a4      	mov	ip, r4
 8005b8c:	270a      	movs	r7, #10
 8005b8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b92:	460a      	mov	r2, r1
 8005b94:	46a6      	mov	lr, r4
 8005b96:	fb07 1516 	mls	r5, r7, r6, r1
 8005b9a:	2a63      	cmp	r2, #99	; 0x63
 8005b9c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ba6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005baa:	dcf0      	bgt.n	8005b8e <__exponent+0x20>
 8005bac:	3130      	adds	r1, #48	; 0x30
 8005bae:	f1ae 0502 	sub.w	r5, lr, #2
 8005bb2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	1c44      	adds	r4, r0, #1
 8005bba:	4561      	cmp	r1, ip
 8005bbc:	d30a      	bcc.n	8005bd4 <__exponent+0x66>
 8005bbe:	f10d 0209 	add.w	r2, sp, #9
 8005bc2:	eba2 020e 	sub.w	r2, r2, lr
 8005bc6:	4565      	cmp	r5, ip
 8005bc8:	bf88      	it	hi
 8005bca:	2200      	movhi	r2, #0
 8005bcc:	4413      	add	r3, r2
 8005bce:	1a18      	subs	r0, r3, r0
 8005bd0:	b003      	add	sp, #12
 8005bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bdc:	e7ed      	b.n	8005bba <__exponent+0x4c>
 8005bde:	2330      	movs	r3, #48	; 0x30
 8005be0:	3130      	adds	r1, #48	; 0x30
 8005be2:	7083      	strb	r3, [r0, #2]
 8005be4:	70c1      	strb	r1, [r0, #3]
 8005be6:	1d03      	adds	r3, r0, #4
 8005be8:	e7f1      	b.n	8005bce <__exponent+0x60>
	...

08005bec <_printf_float>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	b091      	sub	sp, #68	; 0x44
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	f003 f821 	bl	8008c44 <_localeconv_r>
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	f7fa faac 	bl	8000164 <strlen>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	900a      	str	r0, [sp, #40]	; 0x28
 8005c16:	3307      	adds	r3, #7
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	f103 0208 	add.w	r2, r3, #8
 8005c20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c24:	f8d4 b000 	ldr.w	fp, [r4]
 8005c28:	f8c8 2000 	str.w	r2, [r8]
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c34:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c38:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	4640      	mov	r0, r8
 8005c44:	4b9c      	ldr	r3, [pc, #624]	; (8005eb8 <_printf_float+0x2cc>)
 8005c46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c48:	f7fa feea 	bl	8000a20 <__aeabi_dcmpun>
 8005c4c:	bb70      	cbnz	r0, 8005cac <_printf_float+0xc0>
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	4640      	mov	r0, r8
 8005c54:	4b98      	ldr	r3, [pc, #608]	; (8005eb8 <_printf_float+0x2cc>)
 8005c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c58:	f7fa fec4 	bl	80009e4 <__aeabi_dcmple>
 8005c5c:	bb30      	cbnz	r0, 8005cac <_printf_float+0xc0>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2300      	movs	r3, #0
 8005c62:	4640      	mov	r0, r8
 8005c64:	4651      	mov	r1, sl
 8005c66:	f7fa feb3 	bl	80009d0 <__aeabi_dcmplt>
 8005c6a:	b110      	cbz	r0, 8005c72 <_printf_float+0x86>
 8005c6c:	232d      	movs	r3, #45	; 0x2d
 8005c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c72:	4b92      	ldr	r3, [pc, #584]	; (8005ebc <_printf_float+0x2d0>)
 8005c74:	4892      	ldr	r0, [pc, #584]	; (8005ec0 <_printf_float+0x2d4>)
 8005c76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c7a:	bf94      	ite	ls
 8005c7c:	4698      	movls	r8, r3
 8005c7e:	4680      	movhi	r8, r0
 8005c80:	2303      	movs	r3, #3
 8005c82:	f04f 0a00 	mov.w	sl, #0
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	f02b 0304 	bic.w	r3, fp, #4
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	4633      	mov	r3, r6
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	9700      	str	r7, [sp, #0]
 8005c96:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c98:	f000 f9d4 	bl	8006044 <_printf_common>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f040 8090 	bne.w	8005dc2 <_printf_float+0x1d6>
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	b011      	add	sp, #68	; 0x44
 8005ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cac:	4642      	mov	r2, r8
 8005cae:	4653      	mov	r3, sl
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	f7fa feb4 	bl	8000a20 <__aeabi_dcmpun>
 8005cb8:	b148      	cbz	r0, 8005cce <_printf_float+0xe2>
 8005cba:	f1ba 0f00 	cmp.w	sl, #0
 8005cbe:	bfb8      	it	lt
 8005cc0:	232d      	movlt	r3, #45	; 0x2d
 8005cc2:	4880      	ldr	r0, [pc, #512]	; (8005ec4 <_printf_float+0x2d8>)
 8005cc4:	bfb8      	it	lt
 8005cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cca:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <_printf_float+0x2dc>)
 8005ccc:	e7d3      	b.n	8005c76 <_printf_float+0x8a>
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	d142      	bne.n	8005d5e <_printf_float+0x172>
 8005cd8:	2306      	movs	r3, #6
 8005cda:	6063      	str	r3, [r4, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9206      	str	r2, [sp, #24]
 8005ce0:	aa0e      	add	r2, sp, #56	; 0x38
 8005ce2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ce6:	aa0d      	add	r2, sp, #52	; 0x34
 8005ce8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005cec:	9203      	str	r2, [sp, #12]
 8005cee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	4642      	mov	r2, r8
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4653      	mov	r3, sl
 8005d02:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d04:	f7ff fed4 	bl	8005ab0 <__cvt>
 8005d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	2947      	cmp	r1, #71	; 0x47
 8005d0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d10:	d108      	bne.n	8005d24 <_printf_float+0x138>
 8005d12:	1cc8      	adds	r0, r1, #3
 8005d14:	db02      	blt.n	8005d1c <_printf_float+0x130>
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	dd40      	ble.n	8005d9e <_printf_float+0x1b2>
 8005d1c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d20:	fa5f f989 	uxtb.w	r9, r9
 8005d24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d28:	d81f      	bhi.n	8005d6a <_printf_float+0x17e>
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d32:	910d      	str	r1, [sp, #52]	; 0x34
 8005d34:	f7ff ff1b 	bl	8005b6e <__exponent>
 8005d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d3a:	4682      	mov	sl, r0
 8005d3c:	1813      	adds	r3, r2, r0
 8005d3e:	2a01      	cmp	r2, #1
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	dc02      	bgt.n	8005d4a <_printf_float+0x15e>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	07d2      	lsls	r2, r2, #31
 8005d48:	d501      	bpl.n	8005d4e <_printf_float+0x162>
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d09b      	beq.n	8005c8e <_printf_float+0xa2>
 8005d56:	232d      	movs	r3, #45	; 0x2d
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	e797      	b.n	8005c8e <_printf_float+0xa2>
 8005d5e:	2947      	cmp	r1, #71	; 0x47
 8005d60:	d1bc      	bne.n	8005cdc <_printf_float+0xf0>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ba      	bne.n	8005cdc <_printf_float+0xf0>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7b7      	b.n	8005cda <_printf_float+0xee>
 8005d6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d6e:	d118      	bne.n	8005da2 <_printf_float+0x1b6>
 8005d70:	2900      	cmp	r1, #0
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	dd0b      	ble.n	8005d8e <_printf_float+0x1a2>
 8005d76:	6121      	str	r1, [r4, #16]
 8005d78:	b913      	cbnz	r3, 8005d80 <_printf_float+0x194>
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	07d0      	lsls	r0, r2, #31
 8005d7e:	d502      	bpl.n	8005d86 <_printf_float+0x19a>
 8005d80:	3301      	adds	r3, #1
 8005d82:	440b      	add	r3, r1
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	f04f 0a00 	mov.w	sl, #0
 8005d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d8c:	e7df      	b.n	8005d4e <_printf_float+0x162>
 8005d8e:	b913      	cbnz	r3, 8005d96 <_printf_float+0x1aa>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	07d2      	lsls	r2, r2, #31
 8005d94:	d501      	bpl.n	8005d9a <_printf_float+0x1ae>
 8005d96:	3302      	adds	r3, #2
 8005d98:	e7f4      	b.n	8005d84 <_printf_float+0x198>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e7f2      	b.n	8005d84 <_printf_float+0x198>
 8005d9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da4:	4299      	cmp	r1, r3
 8005da6:	db05      	blt.n	8005db4 <_printf_float+0x1c8>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	6121      	str	r1, [r4, #16]
 8005dac:	07d8      	lsls	r0, r3, #31
 8005dae:	d5ea      	bpl.n	8005d86 <_printf_float+0x19a>
 8005db0:	1c4b      	adds	r3, r1, #1
 8005db2:	e7e7      	b.n	8005d84 <_printf_float+0x198>
 8005db4:	2900      	cmp	r1, #0
 8005db6:	bfcc      	ite	gt
 8005db8:	2201      	movgt	r2, #1
 8005dba:	f1c1 0202 	rsble	r2, r1, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	e7e0      	b.n	8005d84 <_printf_float+0x198>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	055a      	lsls	r2, r3, #21
 8005dc6:	d407      	bmi.n	8005dd8 <_printf_float+0x1ec>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	4642      	mov	r2, r8
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d12b      	bne.n	8005e2e <_printf_float+0x242>
 8005dd6:	e764      	b.n	8005ca2 <_printf_float+0xb6>
 8005dd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ddc:	f240 80dd 	bls.w	8005f9a <_printf_float+0x3ae>
 8005de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	f7fa fde8 	bl	80009bc <__aeabi_dcmpeq>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d033      	beq.n	8005e58 <_printf_float+0x26c>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <_printf_float+0x2e0>)
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f af51 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e04:	429a      	cmp	r2, r3
 8005e06:	db02      	blt.n	8005e0e <_printf_float+0x222>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07d8      	lsls	r0, r3, #31
 8005e0c:	d50f      	bpl.n	8005e2e <_printf_float+0x242>
 8005e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f af42 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e1e:	f04f 0800 	mov.w	r8, #0
 8005e22:	f104 091a 	add.w	r9, r4, #26
 8005e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4543      	cmp	r3, r8
 8005e2c:	dc09      	bgt.n	8005e42 <_printf_float+0x256>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	079b      	lsls	r3, r3, #30
 8005e32:	f100 8102 	bmi.w	800603a <_printf_float+0x44e>
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	bfb8      	it	lt
 8005e3e:	4618      	movlt	r0, r3
 8005e40:	e731      	b.n	8005ca6 <_printf_float+0xba>
 8005e42:	2301      	movs	r3, #1
 8005e44:	464a      	mov	r2, r9
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f af28 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	e7e6      	b.n	8005e26 <_printf_float+0x23a>
 8005e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc38      	bgt.n	8005ed0 <_printf_float+0x2e4>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <_printf_float+0x2e0>)
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f af1a 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d102      	bne.n	8005e7c <_printf_float+0x290>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07d9      	lsls	r1, r3, #31
 8005e7a:	d5d8      	bpl.n	8005e2e <_printf_float+0x242>
 8005e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f af0b 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e8c:	f04f 0900 	mov.w	r9, #0
 8005e90:	f104 0a1a 	add.w	sl, r4, #26
 8005e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e96:	425b      	negs	r3, r3
 8005e98:	454b      	cmp	r3, r9
 8005e9a:	dc01      	bgt.n	8005ea0 <_printf_float+0x2b4>
 8005e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e9e:	e794      	b.n	8005dca <_printf_float+0x1de>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f aef9 	beq.w	8005ca2 <_printf_float+0xb6>
 8005eb0:	f109 0901 	add.w	r9, r9, #1
 8005eb4:	e7ee      	b.n	8005e94 <_printf_float+0x2a8>
 8005eb6:	bf00      	nop
 8005eb8:	7fefffff 	.word	0x7fefffff
 8005ebc:	0800a0dc 	.word	0x0800a0dc
 8005ec0:	0800a0e0 	.word	0x0800a0e0
 8005ec4:	0800a0e8 	.word	0x0800a0e8
 8005ec8:	0800a0e4 	.word	0x0800a0e4
 8005ecc:	0800a0ec 	.word	0x0800a0ec
 8005ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	bfa8      	it	ge
 8005ed8:	461a      	movge	r2, r3
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	4691      	mov	r9, r2
 8005ede:	dc37      	bgt.n	8005f50 <_printf_float+0x364>
 8005ee0:	f04f 0b00 	mov.w	fp, #0
 8005ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee8:	f104 021a 	add.w	r2, r4, #26
 8005eec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ef0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ef4:	455b      	cmp	r3, fp
 8005ef6:	dc33      	bgt.n	8005f60 <_printf_float+0x374>
 8005ef8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005efc:	429a      	cmp	r2, r3
 8005efe:	db3b      	blt.n	8005f78 <_printf_float+0x38c>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07da      	lsls	r2, r3, #31
 8005f04:	d438      	bmi.n	8005f78 <_printf_float+0x38c>
 8005f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f0a:	eba3 020a 	sub.w	r2, r3, sl
 8005f0e:	eba3 0901 	sub.w	r9, r3, r1
 8005f12:	4591      	cmp	r9, r2
 8005f14:	bfa8      	it	ge
 8005f16:	4691      	movge	r9, r2
 8005f18:	f1b9 0f00 	cmp.w	r9, #0
 8005f1c:	dc34      	bgt.n	8005f88 <_printf_float+0x39c>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f26:	f104 0a1a 	add.w	sl, r4, #26
 8005f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	eba3 0309 	sub.w	r3, r3, r9
 8005f34:	4543      	cmp	r3, r8
 8005f36:	f77f af7a 	ble.w	8005e2e <_printf_float+0x242>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f aeac 	beq.w	8005ca2 <_printf_float+0xb6>
 8005f4a:	f108 0801 	add.w	r8, r8, #1
 8005f4e:	e7ec      	b.n	8005f2a <_printf_float+0x33e>
 8005f50:	4613      	mov	r3, r2
 8005f52:	4631      	mov	r1, r6
 8005f54:	4642      	mov	r2, r8
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1c0      	bne.n	8005ee0 <_printf_float+0x2f4>
 8005f5e:	e6a0      	b.n	8005ca2 <_printf_float+0xb6>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f ae99 	beq.w	8005ca2 <_printf_float+0xb6>
 8005f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f72:	f10b 0b01 	add.w	fp, fp, #1
 8005f76:	e7b9      	b.n	8005eec <_printf_float+0x300>
 8005f78:	4631      	mov	r1, r6
 8005f7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	d1bf      	bne.n	8005f06 <_printf_float+0x31a>
 8005f86:	e68c      	b.n	8005ca2 <_printf_float+0xb6>
 8005f88:	464b      	mov	r3, r9
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	eb08 020a 	add.w	r2, r8, sl
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d1c2      	bne.n	8005f1e <_printf_float+0x332>
 8005f98:	e683      	b.n	8005ca2 <_printf_float+0xb6>
 8005f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f9c:	2a01      	cmp	r2, #1
 8005f9e:	dc01      	bgt.n	8005fa4 <_printf_float+0x3b8>
 8005fa0:	07db      	lsls	r3, r3, #31
 8005fa2:	d537      	bpl.n	8006014 <_printf_float+0x428>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f ae77 	beq.w	8005ca2 <_printf_float+0xb6>
 8005fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f ae6f 	beq.w	8005ca2 <_printf_float+0xb6>
 8005fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f7fa fcf6 	bl	80009bc <__aeabi_dcmpeq>
 8005fd0:	b9d8      	cbnz	r0, 800600a <_printf_float+0x41e>
 8005fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd4:	f108 0201 	add.w	r2, r8, #1
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d10e      	bne.n	8006002 <_printf_float+0x416>
 8005fe4:	e65d      	b.n	8005ca2 <_printf_float+0xb6>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	464a      	mov	r2, r9
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae56 	beq.w	8005ca2 <_printf_float+0xb6>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4543      	cmp	r3, r8
 8006000:	dcf1      	bgt.n	8005fe6 <_printf_float+0x3fa>
 8006002:	4653      	mov	r3, sl
 8006004:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006008:	e6e0      	b.n	8005dcc <_printf_float+0x1e0>
 800600a:	f04f 0800 	mov.w	r8, #0
 800600e:	f104 091a 	add.w	r9, r4, #26
 8006012:	e7f2      	b.n	8005ffa <_printf_float+0x40e>
 8006014:	2301      	movs	r3, #1
 8006016:	4642      	mov	r2, r8
 8006018:	e7df      	b.n	8005fda <_printf_float+0x3ee>
 800601a:	2301      	movs	r3, #1
 800601c:	464a      	mov	r2, r9
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae3c 	beq.w	8005ca2 <_printf_float+0xb6>
 800602a:	f108 0801 	add.w	r8, r8, #1
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	4543      	cmp	r3, r8
 8006036:	dcf0      	bgt.n	800601a <_printf_float+0x42e>
 8006038:	e6fd      	b.n	8005e36 <_printf_float+0x24a>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 0919 	add.w	r9, r4, #25
 8006042:	e7f4      	b.n	800602e <_printf_float+0x442>

08006044 <_printf_common>:
 8006044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	4616      	mov	r6, r2
 800604a:	4699      	mov	r9, r3
 800604c:	688a      	ldr	r2, [r1, #8]
 800604e:	690b      	ldr	r3, [r1, #16]
 8006050:	4607      	mov	r7, r0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfb8      	it	lt
 8006056:	4613      	movlt	r3, r2
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800605e:	460c      	mov	r4, r1
 8006060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006064:	b10a      	cbz	r2, 800606a <_printf_common+0x26>
 8006066:	3301      	adds	r3, #1
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	0699      	lsls	r1, r3, #26
 800606e:	bf42      	ittt	mi
 8006070:	6833      	ldrmi	r3, [r6, #0]
 8006072:	3302      	addmi	r3, #2
 8006074:	6033      	strmi	r3, [r6, #0]
 8006076:	6825      	ldr	r5, [r4, #0]
 8006078:	f015 0506 	ands.w	r5, r5, #6
 800607c:	d106      	bne.n	800608c <_printf_common+0x48>
 800607e:	f104 0a19 	add.w	sl, r4, #25
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	6832      	ldr	r2, [r6, #0]
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	42ab      	cmp	r3, r5
 800608a:	dc28      	bgt.n	80060de <_printf_common+0x9a>
 800608c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006090:	1e13      	subs	r3, r2, #0
 8006092:	6822      	ldr	r2, [r4, #0]
 8006094:	bf18      	it	ne
 8006096:	2301      	movne	r3, #1
 8006098:	0692      	lsls	r2, r2, #26
 800609a:	d42d      	bmi.n	80060f8 <_printf_common+0xb4>
 800609c:	4649      	mov	r1, r9
 800609e:	4638      	mov	r0, r7
 80060a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a4:	47c0      	blx	r8
 80060a6:	3001      	adds	r0, #1
 80060a8:	d020      	beq.n	80060ec <_printf_common+0xa8>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	68e5      	ldr	r5, [r4, #12]
 80060ae:	f003 0306 	and.w	r3, r3, #6
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	bf18      	it	ne
 80060b6:	2500      	movne	r5, #0
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	f04f 0600 	mov.w	r6, #0
 80060be:	68a3      	ldr	r3, [r4, #8]
 80060c0:	bf08      	it	eq
 80060c2:	1aad      	subeq	r5, r5, r2
 80060c4:	6922      	ldr	r2, [r4, #16]
 80060c6:	bf08      	it	eq
 80060c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bfc4      	itt	gt
 80060d0:	1a9b      	subgt	r3, r3, r2
 80060d2:	18ed      	addgt	r5, r5, r3
 80060d4:	341a      	adds	r4, #26
 80060d6:	42b5      	cmp	r5, r6
 80060d8:	d11a      	bne.n	8006110 <_printf_common+0xcc>
 80060da:	2000      	movs	r0, #0
 80060dc:	e008      	b.n	80060f0 <_printf_common+0xac>
 80060de:	2301      	movs	r3, #1
 80060e0:	4652      	mov	r2, sl
 80060e2:	4649      	mov	r1, r9
 80060e4:	4638      	mov	r0, r7
 80060e6:	47c0      	blx	r8
 80060e8:	3001      	adds	r0, #1
 80060ea:	d103      	bne.n	80060f4 <_printf_common+0xb0>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	3501      	adds	r5, #1
 80060f6:	e7c4      	b.n	8006082 <_printf_common+0x3e>
 80060f8:	2030      	movs	r0, #48	; 0x30
 80060fa:	18e1      	adds	r1, r4, r3
 80060fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006106:	4422      	add	r2, r4
 8006108:	3302      	adds	r3, #2
 800610a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800610e:	e7c5      	b.n	800609c <_printf_common+0x58>
 8006110:	2301      	movs	r3, #1
 8006112:	4622      	mov	r2, r4
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d0e6      	beq.n	80060ec <_printf_common+0xa8>
 800611e:	3601      	adds	r6, #1
 8006120:	e7d9      	b.n	80060d6 <_printf_common+0x92>
	...

08006124 <_printf_i>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	7e0f      	ldrb	r7, [r1, #24]
 800612a:	4691      	mov	r9, r2
 800612c:	2f78      	cmp	r7, #120	; 0x78
 800612e:	4680      	mov	r8, r0
 8006130:	460c      	mov	r4, r1
 8006132:	469a      	mov	sl, r3
 8006134:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800613a:	d807      	bhi.n	800614c <_printf_i+0x28>
 800613c:	2f62      	cmp	r7, #98	; 0x62
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x32>
 8006140:	2f00      	cmp	r7, #0
 8006142:	f000 80d9 	beq.w	80062f8 <_printf_i+0x1d4>
 8006146:	2f58      	cmp	r7, #88	; 0x58
 8006148:	f000 80a4 	beq.w	8006294 <_printf_i+0x170>
 800614c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006154:	e03a      	b.n	80061cc <_printf_i+0xa8>
 8006156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800615a:	2b15      	cmp	r3, #21
 800615c:	d8f6      	bhi.n	800614c <_printf_i+0x28>
 800615e:	a101      	add	r1, pc, #4	; (adr r1, 8006164 <_printf_i+0x40>)
 8006160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061d1 	.word	0x080061d1
 800616c:	0800614d 	.word	0x0800614d
 8006170:	0800614d 	.word	0x0800614d
 8006174:	0800614d 	.word	0x0800614d
 8006178:	0800614d 	.word	0x0800614d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800614d 	.word	0x0800614d
 8006184:	0800614d 	.word	0x0800614d
 8006188:	0800614d 	.word	0x0800614d
 800618c:	0800614d 	.word	0x0800614d
 8006190:	080062df 	.word	0x080062df
 8006194:	08006201 	.word	0x08006201
 8006198:	080062c1 	.word	0x080062c1
 800619c:	0800614d 	.word	0x0800614d
 80061a0:	0800614d 	.word	0x0800614d
 80061a4:	08006301 	.word	0x08006301
 80061a8:	0800614d 	.word	0x0800614d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800614d 	.word	0x0800614d
 80061b4:	0800614d 	.word	0x0800614d
 80061b8:	080062c9 	.word	0x080062c9
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	602a      	str	r2, [r5, #0]
 80061c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0a4      	b.n	800631a <_printf_i+0x1f6>
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	6829      	ldr	r1, [r5, #0]
 80061d4:	0606      	lsls	r6, r0, #24
 80061d6:	f101 0304 	add.w	r3, r1, #4
 80061da:	d50a      	bpl.n	80061f2 <_printf_i+0xce>
 80061dc:	680e      	ldr	r6, [r1, #0]
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	da03      	bge.n	80061ec <_printf_i+0xc8>
 80061e4:	232d      	movs	r3, #45	; 0x2d
 80061e6:	4276      	negs	r6, r6
 80061e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ec:	230a      	movs	r3, #10
 80061ee:	485e      	ldr	r0, [pc, #376]	; (8006368 <_printf_i+0x244>)
 80061f0:	e019      	b.n	8006226 <_printf_i+0x102>
 80061f2:	680e      	ldr	r6, [r1, #0]
 80061f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061f8:	602b      	str	r3, [r5, #0]
 80061fa:	bf18      	it	ne
 80061fc:	b236      	sxthne	r6, r6
 80061fe:	e7ef      	b.n	80061e0 <_printf_i+0xbc>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	6820      	ldr	r0, [r4, #0]
 8006204:	1d19      	adds	r1, r3, #4
 8006206:	6029      	str	r1, [r5, #0]
 8006208:	0601      	lsls	r1, r0, #24
 800620a:	d501      	bpl.n	8006210 <_printf_i+0xec>
 800620c:	681e      	ldr	r6, [r3, #0]
 800620e:	e002      	b.n	8006216 <_printf_i+0xf2>
 8006210:	0646      	lsls	r6, r0, #25
 8006212:	d5fb      	bpl.n	800620c <_printf_i+0xe8>
 8006214:	881e      	ldrh	r6, [r3, #0]
 8006216:	2f6f      	cmp	r7, #111	; 0x6f
 8006218:	bf0c      	ite	eq
 800621a:	2308      	moveq	r3, #8
 800621c:	230a      	movne	r3, #10
 800621e:	4852      	ldr	r0, [pc, #328]	; (8006368 <_printf_i+0x244>)
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006226:	6865      	ldr	r5, [r4, #4]
 8006228:	2d00      	cmp	r5, #0
 800622a:	bfa8      	it	ge
 800622c:	6821      	ldrge	r1, [r4, #0]
 800622e:	60a5      	str	r5, [r4, #8]
 8006230:	bfa4      	itt	ge
 8006232:	f021 0104 	bicge.w	r1, r1, #4
 8006236:	6021      	strge	r1, [r4, #0]
 8006238:	b90e      	cbnz	r6, 800623e <_printf_i+0x11a>
 800623a:	2d00      	cmp	r5, #0
 800623c:	d04d      	beq.n	80062da <_printf_i+0x1b6>
 800623e:	4615      	mov	r5, r2
 8006240:	fbb6 f1f3 	udiv	r1, r6, r3
 8006244:	fb03 6711 	mls	r7, r3, r1, r6
 8006248:	5dc7      	ldrb	r7, [r0, r7]
 800624a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800624e:	4637      	mov	r7, r6
 8006250:	42bb      	cmp	r3, r7
 8006252:	460e      	mov	r6, r1
 8006254:	d9f4      	bls.n	8006240 <_printf_i+0x11c>
 8006256:	2b08      	cmp	r3, #8
 8006258:	d10b      	bne.n	8006272 <_printf_i+0x14e>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	07de      	lsls	r6, r3, #31
 800625e:	d508      	bpl.n	8006272 <_printf_i+0x14e>
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	6861      	ldr	r1, [r4, #4]
 8006264:	4299      	cmp	r1, r3
 8006266:	bfde      	ittt	le
 8006268:	2330      	movle	r3, #48	; 0x30
 800626a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800626e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006272:	1b52      	subs	r2, r2, r5
 8006274:	6122      	str	r2, [r4, #16]
 8006276:	464b      	mov	r3, r9
 8006278:	4621      	mov	r1, r4
 800627a:	4640      	mov	r0, r8
 800627c:	f8cd a000 	str.w	sl, [sp]
 8006280:	aa03      	add	r2, sp, #12
 8006282:	f7ff fedf 	bl	8006044 <_printf_common>
 8006286:	3001      	adds	r0, #1
 8006288:	d14c      	bne.n	8006324 <_printf_i+0x200>
 800628a:	f04f 30ff 	mov.w	r0, #4294967295
 800628e:	b004      	add	sp, #16
 8006290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006294:	4834      	ldr	r0, [pc, #208]	; (8006368 <_printf_i+0x244>)
 8006296:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800629a:	6829      	ldr	r1, [r5, #0]
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	f851 6b04 	ldr.w	r6, [r1], #4
 80062a2:	6029      	str	r1, [r5, #0]
 80062a4:	061d      	lsls	r5, r3, #24
 80062a6:	d514      	bpl.n	80062d2 <_printf_i+0x1ae>
 80062a8:	07df      	lsls	r7, r3, #31
 80062aa:	bf44      	itt	mi
 80062ac:	f043 0320 	orrmi.w	r3, r3, #32
 80062b0:	6023      	strmi	r3, [r4, #0]
 80062b2:	b91e      	cbnz	r6, 80062bc <_printf_i+0x198>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	2310      	movs	r3, #16
 80062be:	e7af      	b.n	8006220 <_printf_i+0xfc>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	f043 0320 	orr.w	r3, r3, #32
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	2378      	movs	r3, #120	; 0x78
 80062ca:	4828      	ldr	r0, [pc, #160]	; (800636c <_printf_i+0x248>)
 80062cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d0:	e7e3      	b.n	800629a <_printf_i+0x176>
 80062d2:	0659      	lsls	r1, r3, #25
 80062d4:	bf48      	it	mi
 80062d6:	b2b6      	uxthmi	r6, r6
 80062d8:	e7e6      	b.n	80062a8 <_printf_i+0x184>
 80062da:	4615      	mov	r5, r2
 80062dc:	e7bb      	b.n	8006256 <_printf_i+0x132>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	6826      	ldr	r6, [r4, #0]
 80062e2:	1d18      	adds	r0, r3, #4
 80062e4:	6961      	ldr	r1, [r4, #20]
 80062e6:	6028      	str	r0, [r5, #0]
 80062e8:	0635      	lsls	r5, r6, #24
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	d501      	bpl.n	80062f2 <_printf_i+0x1ce>
 80062ee:	6019      	str	r1, [r3, #0]
 80062f0:	e002      	b.n	80062f8 <_printf_i+0x1d4>
 80062f2:	0670      	lsls	r0, r6, #25
 80062f4:	d5fb      	bpl.n	80062ee <_printf_i+0x1ca>
 80062f6:	8019      	strh	r1, [r3, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	4615      	mov	r5, r2
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	e7ba      	b.n	8006276 <_printf_i+0x152>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2100      	movs	r1, #0
 8006304:	1d1a      	adds	r2, r3, #4
 8006306:	602a      	str	r2, [r5, #0]
 8006308:	681d      	ldr	r5, [r3, #0]
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	4628      	mov	r0, r5
 800630e:	f002 fd17 	bl	8008d40 <memchr>
 8006312:	b108      	cbz	r0, 8006318 <_printf_i+0x1f4>
 8006314:	1b40      	subs	r0, r0, r5
 8006316:	6060      	str	r0, [r4, #4]
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2300      	movs	r3, #0
 800631e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006322:	e7a8      	b.n	8006276 <_printf_i+0x152>
 8006324:	462a      	mov	r2, r5
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d0ab      	beq.n	800628a <_printf_i+0x166>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	079b      	lsls	r3, r3, #30
 8006336:	d413      	bmi.n	8006360 <_printf_i+0x23c>
 8006338:	68e0      	ldr	r0, [r4, #12]
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	4298      	cmp	r0, r3
 800633e:	bfb8      	it	lt
 8006340:	4618      	movlt	r0, r3
 8006342:	e7a4      	b.n	800628e <_printf_i+0x16a>
 8006344:	2301      	movs	r3, #1
 8006346:	4632      	mov	r2, r6
 8006348:	4649      	mov	r1, r9
 800634a:	4640      	mov	r0, r8
 800634c:	47d0      	blx	sl
 800634e:	3001      	adds	r0, #1
 8006350:	d09b      	beq.n	800628a <_printf_i+0x166>
 8006352:	3501      	adds	r5, #1
 8006354:	68e3      	ldr	r3, [r4, #12]
 8006356:	9903      	ldr	r1, [sp, #12]
 8006358:	1a5b      	subs	r3, r3, r1
 800635a:	42ab      	cmp	r3, r5
 800635c:	dcf2      	bgt.n	8006344 <_printf_i+0x220>
 800635e:	e7eb      	b.n	8006338 <_printf_i+0x214>
 8006360:	2500      	movs	r5, #0
 8006362:	f104 0619 	add.w	r6, r4, #25
 8006366:	e7f5      	b.n	8006354 <_printf_i+0x230>
 8006368:	0800a0ee 	.word	0x0800a0ee
 800636c:	0800a0ff 	.word	0x0800a0ff

08006370 <iprintf>:
 8006370:	b40f      	push	{r0, r1, r2, r3}
 8006372:	4b0a      	ldr	r3, [pc, #40]	; (800639c <iprintf+0x2c>)
 8006374:	b513      	push	{r0, r1, r4, lr}
 8006376:	681c      	ldr	r4, [r3, #0]
 8006378:	b124      	cbz	r4, 8006384 <iprintf+0x14>
 800637a:	69a3      	ldr	r3, [r4, #24]
 800637c:	b913      	cbnz	r3, 8006384 <iprintf+0x14>
 800637e:	4620      	mov	r0, r4
 8006380:	f002 f84a 	bl	8008418 <__sinit>
 8006384:	ab05      	add	r3, sp, #20
 8006386:	4620      	mov	r0, r4
 8006388:	9a04      	ldr	r2, [sp, #16]
 800638a:	68a1      	ldr	r1, [r4, #8]
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	f003 fb4f 	bl	8009a30 <_vfiprintf_r>
 8006392:	b002      	add	sp, #8
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	b004      	add	sp, #16
 800639a:	4770      	bx	lr
 800639c:	2000001c 	.word	0x2000001c

080063a0 <_puts_r>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	460e      	mov	r6, r1
 80063a4:	4605      	mov	r5, r0
 80063a6:	b118      	cbz	r0, 80063b0 <_puts_r+0x10>
 80063a8:	6983      	ldr	r3, [r0, #24]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_puts_r+0x10>
 80063ac:	f002 f834 	bl	8008418 <__sinit>
 80063b0:	69ab      	ldr	r3, [r5, #24]
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	b913      	cbnz	r3, 80063bc <_puts_r+0x1c>
 80063b6:	4628      	mov	r0, r5
 80063b8:	f002 f82e 	bl	8008418 <__sinit>
 80063bc:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <_puts_r+0xd0>)
 80063be:	429c      	cmp	r4, r3
 80063c0:	d120      	bne.n	8006404 <_puts_r+0x64>
 80063c2:	686c      	ldr	r4, [r5, #4]
 80063c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d405      	bmi.n	80063d6 <_puts_r+0x36>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	0598      	lsls	r0, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <_puts_r+0x36>
 80063d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063d2:	f002 fc3c 	bl	8008c4e <__retarget_lock_acquire_recursive>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d51d      	bpl.n	8006418 <_puts_r+0x78>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b1db      	cbz	r3, 8006418 <_puts_r+0x78>
 80063e0:	3e01      	subs	r6, #1
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	bb39      	cbnz	r1, 800643e <_puts_r+0x9e>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da38      	bge.n	8006464 <_puts_r+0xc4>
 80063f2:	4622      	mov	r2, r4
 80063f4:	210a      	movs	r1, #10
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 ffa0 	bl	800733c <__swbuf_r>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d011      	beq.n	8006424 <_puts_r+0x84>
 8006400:	250a      	movs	r5, #10
 8006402:	e011      	b.n	8006428 <_puts_r+0x88>
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <_puts_r+0xd4>)
 8006406:	429c      	cmp	r4, r3
 8006408:	d101      	bne.n	800640e <_puts_r+0x6e>
 800640a:	68ac      	ldr	r4, [r5, #8]
 800640c:	e7da      	b.n	80063c4 <_puts_r+0x24>
 800640e:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <_puts_r+0xd8>)
 8006410:	429c      	cmp	r4, r3
 8006412:	bf08      	it	eq
 8006414:	68ec      	ldreq	r4, [r5, #12]
 8006416:	e7d5      	b.n	80063c4 <_puts_r+0x24>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 ffe0 	bl	80073e0 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d0dd      	beq.n	80063e0 <_puts_r+0x40>
 8006424:	f04f 35ff 	mov.w	r5, #4294967295
 8006428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d405      	bmi.n	800643a <_puts_r+0x9a>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d402      	bmi.n	800643a <_puts_r+0x9a>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f002 fc0b 	bl	8008c50 <__retarget_lock_release_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	2b00      	cmp	r3, #0
 8006440:	da04      	bge.n	800644c <_puts_r+0xac>
 8006442:	69a2      	ldr	r2, [r4, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	dc06      	bgt.n	8006456 <_puts_r+0xb6>
 8006448:	290a      	cmp	r1, #10
 800644a:	d004      	beq.n	8006456 <_puts_r+0xb6>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	7019      	strb	r1, [r3, #0]
 8006454:	e7c5      	b.n	80063e2 <_puts_r+0x42>
 8006456:	4622      	mov	r2, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f000 ff6f 	bl	800733c <__swbuf_r>
 800645e:	3001      	adds	r0, #1
 8006460:	d1bf      	bne.n	80063e2 <_puts_r+0x42>
 8006462:	e7df      	b.n	8006424 <_puts_r+0x84>
 8006464:	250a      	movs	r5, #10
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701d      	strb	r5, [r3, #0]
 800646e:	e7db      	b.n	8006428 <_puts_r+0x88>
 8006470:	0800a3ac 	.word	0x0800a3ac
 8006474:	0800a3cc 	.word	0x0800a3cc
 8006478:	0800a38c 	.word	0x0800a38c

0800647c <puts>:
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <puts+0xc>)
 800647e:	4601      	mov	r1, r0
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f7ff bf8d 	b.w	80063a0 <_puts_r>
 8006486:	bf00      	nop
 8006488:	2000001c 	.word	0x2000001c

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	2300      	movs	r3, #0
 8006490:	4d05      	ldr	r5, [pc, #20]	; (80064a8 <_sbrk_r+0x1c>)
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f7fb fe14 	bl	80020c4 <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20000464 	.word	0x20000464

080064ac <siprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b2:	b500      	push	{lr}
 80064b4:	b09c      	sub	sp, #112	; 0x70
 80064b6:	ab1d      	add	r3, sp, #116	; 0x74
 80064b8:	9002      	str	r0, [sp, #8]
 80064ba:	9006      	str	r0, [sp, #24]
 80064bc:	9107      	str	r1, [sp, #28]
 80064be:	9104      	str	r1, [sp, #16]
 80064c0:	4808      	ldr	r0, [pc, #32]	; (80064e4 <siprintf+0x38>)
 80064c2:	4909      	ldr	r1, [pc, #36]	; (80064e8 <siprintf+0x3c>)
 80064c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f003 f986 	bl	80097e0 <_svfiprintf_r>
 80064d4:	2200      	movs	r2, #0
 80064d6:	9b02      	ldr	r3, [sp, #8]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	b01c      	add	sp, #112	; 0x70
 80064dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e0:	b003      	add	sp, #12
 80064e2:	4770      	bx	lr
 80064e4:	2000001c 	.word	0x2000001c
 80064e8:	ffff0208 	.word	0xffff0208

080064ec <strcpy>:
 80064ec:	4603      	mov	r3, r0
 80064ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064f2:	f803 2b01 	strb.w	r2, [r3], #1
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1f9      	bne.n	80064ee <strcpy+0x2>
 80064fa:	4770      	bx	lr

080064fc <strcspn>:
 80064fc:	4603      	mov	r3, r0
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	461e      	mov	r6, r3
 8006502:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006506:	b144      	cbz	r4, 800651a <strcspn+0x1e>
 8006508:	1e4a      	subs	r2, r1, #1
 800650a:	e001      	b.n	8006510 <strcspn+0x14>
 800650c:	42a5      	cmp	r5, r4
 800650e:	d004      	beq.n	800651a <strcspn+0x1e>
 8006510:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006514:	2d00      	cmp	r5, #0
 8006516:	d1f9      	bne.n	800650c <strcspn+0x10>
 8006518:	e7f2      	b.n	8006500 <strcspn+0x4>
 800651a:	1a30      	subs	r0, r6, r0
 800651c:	bd70      	pop	{r4, r5, r6, pc}

0800651e <strstr>:
 800651e:	780a      	ldrb	r2, [r1, #0]
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	b96a      	cbnz	r2, 8006540 <strstr+0x22>
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	429a      	cmp	r2, r3
 8006528:	d109      	bne.n	800653e <strstr+0x20>
 800652a:	460c      	mov	r4, r1
 800652c:	4605      	mov	r5, r0
 800652e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f6      	beq.n	8006524 <strstr+0x6>
 8006536:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800653a:	429e      	cmp	r6, r3
 800653c:	d0f7      	beq.n	800652e <strstr+0x10>
 800653e:	3001      	adds	r0, #1
 8006540:	7803      	ldrb	r3, [r0, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ef      	bne.n	8006526 <strstr+0x8>
 8006546:	4618      	mov	r0, r3
 8006548:	e7ec      	b.n	8006524 <strstr+0x6>

0800654a <sulp>:
 800654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	460f      	mov	r7, r1
 8006550:	4690      	mov	r8, r2
 8006552:	f002 ff8d 	bl	8009470 <__ulp>
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	d011      	beq.n	8006584 <sulp+0x3a>
 8006560:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006564:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006568:	2b00      	cmp	r3, #0
 800656a:	dd0b      	ble.n	8006584 <sulp+0x3a>
 800656c:	2400      	movs	r4, #0
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006574:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006578:	4622      	mov	r2, r4
 800657a:	462b      	mov	r3, r5
 800657c:	f7f9 ffb6 	bl	80004ec <__aeabi_dmul>
 8006580:	4604      	mov	r4, r0
 8006582:	460d      	mov	r5, r1
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800658c:	0000      	movs	r0, r0
	...

08006590 <_strtod_l>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	469b      	mov	fp, r3
 8006596:	2300      	movs	r3, #0
 8006598:	b09f      	sub	sp, #124	; 0x7c
 800659a:	931a      	str	r3, [sp, #104]	; 0x68
 800659c:	4b9e      	ldr	r3, [pc, #632]	; (8006818 <_strtod_l+0x288>)
 800659e:	4682      	mov	sl, r0
 80065a0:	681f      	ldr	r7, [r3, #0]
 80065a2:	460e      	mov	r6, r1
 80065a4:	4638      	mov	r0, r7
 80065a6:	9215      	str	r2, [sp, #84]	; 0x54
 80065a8:	f7f9 fddc 	bl	8000164 <strlen>
 80065ac:	f04f 0800 	mov.w	r8, #0
 80065b0:	4604      	mov	r4, r0
 80065b2:	f04f 0900 	mov.w	r9, #0
 80065b6:	9619      	str	r6, [sp, #100]	; 0x64
 80065b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	2a2b      	cmp	r2, #43	; 0x2b
 80065be:	d04c      	beq.n	800665a <_strtod_l+0xca>
 80065c0:	d83a      	bhi.n	8006638 <_strtod_l+0xa8>
 80065c2:	2a0d      	cmp	r2, #13
 80065c4:	d833      	bhi.n	800662e <_strtod_l+0x9e>
 80065c6:	2a08      	cmp	r2, #8
 80065c8:	d833      	bhi.n	8006632 <_strtod_l+0xa2>
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	d03d      	beq.n	800664a <_strtod_l+0xba>
 80065ce:	2300      	movs	r3, #0
 80065d0:	930a      	str	r3, [sp, #40]	; 0x28
 80065d2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80065d4:	782b      	ldrb	r3, [r5, #0]
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	f040 80aa 	bne.w	8006730 <_strtod_l+0x1a0>
 80065dc:	786b      	ldrb	r3, [r5, #1]
 80065de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065e2:	2b58      	cmp	r3, #88	; 0x58
 80065e4:	d166      	bne.n	80066b4 <_strtod_l+0x124>
 80065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e8:	4650      	mov	r0, sl
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	ab1a      	add	r3, sp, #104	; 0x68
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	4a8a      	ldr	r2, [pc, #552]	; (800681c <_strtod_l+0x28c>)
 80065f2:	f8cd b008 	str.w	fp, [sp, #8]
 80065f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80065f8:	a919      	add	r1, sp, #100	; 0x64
 80065fa:	f002 f825 	bl	8008648 <__gethex>
 80065fe:	f010 0607 	ands.w	r6, r0, #7
 8006602:	4604      	mov	r4, r0
 8006604:	d005      	beq.n	8006612 <_strtod_l+0x82>
 8006606:	2e06      	cmp	r6, #6
 8006608:	d129      	bne.n	800665e <_strtod_l+0xce>
 800660a:	2300      	movs	r3, #0
 800660c:	3501      	adds	r5, #1
 800660e:	9519      	str	r5, [sp, #100]	; 0x64
 8006610:	930a      	str	r3, [sp, #40]	; 0x28
 8006612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 858a 	bne.w	800712e <_strtod_l+0xb9e>
 800661a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661c:	b1d3      	cbz	r3, 8006654 <_strtod_l+0xc4>
 800661e:	4642      	mov	r2, r8
 8006620:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006624:	4610      	mov	r0, r2
 8006626:	4619      	mov	r1, r3
 8006628:	b01f      	add	sp, #124	; 0x7c
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	2a20      	cmp	r2, #32
 8006630:	d1cd      	bne.n	80065ce <_strtod_l+0x3e>
 8006632:	3301      	adds	r3, #1
 8006634:	9319      	str	r3, [sp, #100]	; 0x64
 8006636:	e7bf      	b.n	80065b8 <_strtod_l+0x28>
 8006638:	2a2d      	cmp	r2, #45	; 0x2d
 800663a:	d1c8      	bne.n	80065ce <_strtod_l+0x3e>
 800663c:	2201      	movs	r2, #1
 800663e:	920a      	str	r2, [sp, #40]	; 0x28
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	9219      	str	r2, [sp, #100]	; 0x64
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1c3      	bne.n	80065d2 <_strtod_l+0x42>
 800664a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800664c:	9619      	str	r6, [sp, #100]	; 0x64
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 856b 	bne.w	800712a <_strtod_l+0xb9a>
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	e7e4      	b.n	8006624 <_strtod_l+0x94>
 800665a:	2200      	movs	r2, #0
 800665c:	e7ef      	b.n	800663e <_strtod_l+0xae>
 800665e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006660:	b13a      	cbz	r2, 8006672 <_strtod_l+0xe2>
 8006662:	2135      	movs	r1, #53	; 0x35
 8006664:	a81c      	add	r0, sp, #112	; 0x70
 8006666:	f003 f807 	bl	8009678 <__copybits>
 800666a:	4650      	mov	r0, sl
 800666c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800666e:	f002 fbcf 	bl	8008e10 <_Bfree>
 8006672:	3e01      	subs	r6, #1
 8006674:	2e04      	cmp	r6, #4
 8006676:	d806      	bhi.n	8006686 <_strtod_l+0xf6>
 8006678:	e8df f006 	tbb	[pc, r6]
 800667c:	1714030a 	.word	0x1714030a
 8006680:	0a          	.byte	0x0a
 8006681:	00          	.byte	0x00
 8006682:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006686:	0721      	lsls	r1, r4, #28
 8006688:	d5c3      	bpl.n	8006612 <_strtod_l+0x82>
 800668a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800668e:	e7c0      	b.n	8006612 <_strtod_l+0x82>
 8006690:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006692:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006696:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800669a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800669e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066a2:	e7f0      	b.n	8006686 <_strtod_l+0xf6>
 80066a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006820 <_strtod_l+0x290>
 80066a8:	e7ed      	b.n	8006686 <_strtod_l+0xf6>
 80066aa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066ae:	f04f 38ff 	mov.w	r8, #4294967295
 80066b2:	e7e8      	b.n	8006686 <_strtod_l+0xf6>
 80066b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	9219      	str	r2, [sp, #100]	; 0x64
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b30      	cmp	r3, #48	; 0x30
 80066be:	d0f9      	beq.n	80066b4 <_strtod_l+0x124>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0a6      	beq.n	8006612 <_strtod_l+0x82>
 80066c4:	2301      	movs	r3, #1
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066ca:	220a      	movs	r2, #10
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	2300      	movs	r3, #0
 80066d0:	469b      	mov	fp, r3
 80066d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80066d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80066d8:	7805      	ldrb	r5, [r0, #0]
 80066da:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80066de:	b2d9      	uxtb	r1, r3
 80066e0:	2909      	cmp	r1, #9
 80066e2:	d927      	bls.n	8006734 <_strtod_l+0x1a4>
 80066e4:	4622      	mov	r2, r4
 80066e6:	4639      	mov	r1, r7
 80066e8:	f003 fb1b 	bl	8009d22 <strncmp>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d033      	beq.n	8006758 <_strtod_l+0x1c8>
 80066f0:	2000      	movs	r0, #0
 80066f2:	462a      	mov	r2, r5
 80066f4:	465c      	mov	r4, fp
 80066f6:	4603      	mov	r3, r0
 80066f8:	9004      	str	r0, [sp, #16]
 80066fa:	2a65      	cmp	r2, #101	; 0x65
 80066fc:	d001      	beq.n	8006702 <_strtod_l+0x172>
 80066fe:	2a45      	cmp	r2, #69	; 0x45
 8006700:	d114      	bne.n	800672c <_strtod_l+0x19c>
 8006702:	b91c      	cbnz	r4, 800670c <_strtod_l+0x17c>
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	4302      	orrs	r2, r0
 8006708:	d09f      	beq.n	800664a <_strtod_l+0xba>
 800670a:	2400      	movs	r4, #0
 800670c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800670e:	1c72      	adds	r2, r6, #1
 8006710:	9219      	str	r2, [sp, #100]	; 0x64
 8006712:	7872      	ldrb	r2, [r6, #1]
 8006714:	2a2b      	cmp	r2, #43	; 0x2b
 8006716:	d079      	beq.n	800680c <_strtod_l+0x27c>
 8006718:	2a2d      	cmp	r2, #45	; 0x2d
 800671a:	f000 8083 	beq.w	8006824 <_strtod_l+0x294>
 800671e:	2700      	movs	r7, #0
 8006720:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006724:	2909      	cmp	r1, #9
 8006726:	f240 8083 	bls.w	8006830 <_strtod_l+0x2a0>
 800672a:	9619      	str	r6, [sp, #100]	; 0x64
 800672c:	2500      	movs	r5, #0
 800672e:	e09f      	b.n	8006870 <_strtod_l+0x2e0>
 8006730:	2300      	movs	r3, #0
 8006732:	e7c8      	b.n	80066c6 <_strtod_l+0x136>
 8006734:	f1bb 0f08 	cmp.w	fp, #8
 8006738:	bfd5      	itete	le
 800673a:	9906      	ldrle	r1, [sp, #24]
 800673c:	9905      	ldrgt	r1, [sp, #20]
 800673e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006742:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006746:	f100 0001 	add.w	r0, r0, #1
 800674a:	bfd4      	ite	le
 800674c:	9306      	strle	r3, [sp, #24]
 800674e:	9305      	strgt	r3, [sp, #20]
 8006750:	f10b 0b01 	add.w	fp, fp, #1
 8006754:	9019      	str	r0, [sp, #100]	; 0x64
 8006756:	e7be      	b.n	80066d6 <_strtod_l+0x146>
 8006758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800675a:	191a      	adds	r2, r3, r4
 800675c:	9219      	str	r2, [sp, #100]	; 0x64
 800675e:	5d1a      	ldrb	r2, [r3, r4]
 8006760:	f1bb 0f00 	cmp.w	fp, #0
 8006764:	d036      	beq.n	80067d4 <_strtod_l+0x244>
 8006766:	465c      	mov	r4, fp
 8006768:	9004      	str	r0, [sp, #16]
 800676a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800676e:	2b09      	cmp	r3, #9
 8006770:	d912      	bls.n	8006798 <_strtod_l+0x208>
 8006772:	2301      	movs	r3, #1
 8006774:	e7c1      	b.n	80066fa <_strtod_l+0x16a>
 8006776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006778:	3001      	adds	r0, #1
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	9219      	str	r2, [sp, #100]	; 0x64
 800677e:	785a      	ldrb	r2, [r3, #1]
 8006780:	2a30      	cmp	r2, #48	; 0x30
 8006782:	d0f8      	beq.n	8006776 <_strtod_l+0x1e6>
 8006784:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006788:	2b08      	cmp	r3, #8
 800678a:	f200 84d5 	bhi.w	8007138 <_strtod_l+0xba8>
 800678e:	9004      	str	r0, [sp, #16]
 8006790:	2000      	movs	r0, #0
 8006792:	4604      	mov	r4, r0
 8006794:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006796:	9308      	str	r3, [sp, #32]
 8006798:	3a30      	subs	r2, #48	; 0x30
 800679a:	f100 0301 	add.w	r3, r0, #1
 800679e:	d013      	beq.n	80067c8 <_strtod_l+0x238>
 80067a0:	9904      	ldr	r1, [sp, #16]
 80067a2:	1905      	adds	r5, r0, r4
 80067a4:	4419      	add	r1, r3
 80067a6:	9104      	str	r1, [sp, #16]
 80067a8:	4623      	mov	r3, r4
 80067aa:	210a      	movs	r1, #10
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	d113      	bne.n	80067d8 <_strtod_l+0x248>
 80067b0:	1823      	adds	r3, r4, r0
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	f104 0401 	add.w	r4, r4, #1
 80067b8:	4404      	add	r4, r0
 80067ba:	dc1b      	bgt.n	80067f4 <_strtod_l+0x264>
 80067bc:	230a      	movs	r3, #10
 80067be:	9906      	ldr	r1, [sp, #24]
 80067c0:	fb03 2301 	mla	r3, r3, r1, r2
 80067c4:	9306      	str	r3, [sp, #24]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067ca:	4618      	mov	r0, r3
 80067cc:	1c51      	adds	r1, r2, #1
 80067ce:	9119      	str	r1, [sp, #100]	; 0x64
 80067d0:	7852      	ldrb	r2, [r2, #1]
 80067d2:	e7ca      	b.n	800676a <_strtod_l+0x1da>
 80067d4:	4658      	mov	r0, fp
 80067d6:	e7d3      	b.n	8006780 <_strtod_l+0x1f0>
 80067d8:	2b08      	cmp	r3, #8
 80067da:	dc04      	bgt.n	80067e6 <_strtod_l+0x256>
 80067dc:	9f06      	ldr	r7, [sp, #24]
 80067de:	434f      	muls	r7, r1
 80067e0:	9706      	str	r7, [sp, #24]
 80067e2:	3301      	adds	r3, #1
 80067e4:	e7e2      	b.n	80067ac <_strtod_l+0x21c>
 80067e6:	1c5f      	adds	r7, r3, #1
 80067e8:	2f10      	cmp	r7, #16
 80067ea:	bfde      	ittt	le
 80067ec:	9f05      	ldrle	r7, [sp, #20]
 80067ee:	434f      	mulle	r7, r1
 80067f0:	9705      	strle	r7, [sp, #20]
 80067f2:	e7f6      	b.n	80067e2 <_strtod_l+0x252>
 80067f4:	2c10      	cmp	r4, #16
 80067f6:	bfdf      	itttt	le
 80067f8:	230a      	movle	r3, #10
 80067fa:	9905      	ldrle	r1, [sp, #20]
 80067fc:	fb03 2301 	mlale	r3, r3, r1, r2
 8006800:	9305      	strle	r3, [sp, #20]
 8006802:	e7e0      	b.n	80067c6 <_strtod_l+0x236>
 8006804:	2300      	movs	r3, #0
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	2301      	movs	r3, #1
 800680a:	e77b      	b.n	8006704 <_strtod_l+0x174>
 800680c:	2700      	movs	r7, #0
 800680e:	1cb2      	adds	r2, r6, #2
 8006810:	9219      	str	r2, [sp, #100]	; 0x64
 8006812:	78b2      	ldrb	r2, [r6, #2]
 8006814:	e784      	b.n	8006720 <_strtod_l+0x190>
 8006816:	bf00      	nop
 8006818:	0800a454 	.word	0x0800a454
 800681c:	0800a110 	.word	0x0800a110
 8006820:	7ff00000 	.word	0x7ff00000
 8006824:	2701      	movs	r7, #1
 8006826:	e7f2      	b.n	800680e <_strtod_l+0x27e>
 8006828:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800682a:	1c51      	adds	r1, r2, #1
 800682c:	9119      	str	r1, [sp, #100]	; 0x64
 800682e:	7852      	ldrb	r2, [r2, #1]
 8006830:	2a30      	cmp	r2, #48	; 0x30
 8006832:	d0f9      	beq.n	8006828 <_strtod_l+0x298>
 8006834:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006838:	2908      	cmp	r1, #8
 800683a:	f63f af77 	bhi.w	800672c <_strtod_l+0x19c>
 800683e:	f04f 0e0a 	mov.w	lr, #10
 8006842:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006846:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006848:	9209      	str	r2, [sp, #36]	; 0x24
 800684a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800684c:	1c51      	adds	r1, r2, #1
 800684e:	9119      	str	r1, [sp, #100]	; 0x64
 8006850:	7852      	ldrb	r2, [r2, #1]
 8006852:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006856:	2d09      	cmp	r5, #9
 8006858:	d935      	bls.n	80068c6 <_strtod_l+0x336>
 800685a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800685c:	1b49      	subs	r1, r1, r5
 800685e:	2908      	cmp	r1, #8
 8006860:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006864:	dc02      	bgt.n	800686c <_strtod_l+0x2dc>
 8006866:	4565      	cmp	r5, ip
 8006868:	bfa8      	it	ge
 800686a:	4665      	movge	r5, ip
 800686c:	b107      	cbz	r7, 8006870 <_strtod_l+0x2e0>
 800686e:	426d      	negs	r5, r5
 8006870:	2c00      	cmp	r4, #0
 8006872:	d14c      	bne.n	800690e <_strtod_l+0x37e>
 8006874:	9907      	ldr	r1, [sp, #28]
 8006876:	4301      	orrs	r1, r0
 8006878:	f47f aecb 	bne.w	8006612 <_strtod_l+0x82>
 800687c:	2b00      	cmp	r3, #0
 800687e:	f47f aee4 	bne.w	800664a <_strtod_l+0xba>
 8006882:	2a69      	cmp	r2, #105	; 0x69
 8006884:	d026      	beq.n	80068d4 <_strtod_l+0x344>
 8006886:	dc23      	bgt.n	80068d0 <_strtod_l+0x340>
 8006888:	2a49      	cmp	r2, #73	; 0x49
 800688a:	d023      	beq.n	80068d4 <_strtod_l+0x344>
 800688c:	2a4e      	cmp	r2, #78	; 0x4e
 800688e:	f47f aedc 	bne.w	800664a <_strtod_l+0xba>
 8006892:	499d      	ldr	r1, [pc, #628]	; (8006b08 <_strtod_l+0x578>)
 8006894:	a819      	add	r0, sp, #100	; 0x64
 8006896:	f002 f925 	bl	8008ae4 <__match>
 800689a:	2800      	cmp	r0, #0
 800689c:	f43f aed5 	beq.w	800664a <_strtod_l+0xba>
 80068a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b28      	cmp	r3, #40	; 0x28
 80068a6:	d12c      	bne.n	8006902 <_strtod_l+0x372>
 80068a8:	4998      	ldr	r1, [pc, #608]	; (8006b0c <_strtod_l+0x57c>)
 80068aa:	aa1c      	add	r2, sp, #112	; 0x70
 80068ac:	a819      	add	r0, sp, #100	; 0x64
 80068ae:	f002 f92d 	bl	8008b0c <__hexnan>
 80068b2:	2805      	cmp	r0, #5
 80068b4:	d125      	bne.n	8006902 <_strtod_l+0x372>
 80068b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068b8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80068bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068c4:	e6a5      	b.n	8006612 <_strtod_l+0x82>
 80068c6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80068ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80068ce:	e7bc      	b.n	800684a <_strtod_l+0x2ba>
 80068d0:	2a6e      	cmp	r2, #110	; 0x6e
 80068d2:	e7dc      	b.n	800688e <_strtod_l+0x2fe>
 80068d4:	498e      	ldr	r1, [pc, #568]	; (8006b10 <_strtod_l+0x580>)
 80068d6:	a819      	add	r0, sp, #100	; 0x64
 80068d8:	f002 f904 	bl	8008ae4 <__match>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f43f aeb4 	beq.w	800664a <_strtod_l+0xba>
 80068e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068e4:	498b      	ldr	r1, [pc, #556]	; (8006b14 <_strtod_l+0x584>)
 80068e6:	3b01      	subs	r3, #1
 80068e8:	a819      	add	r0, sp, #100	; 0x64
 80068ea:	9319      	str	r3, [sp, #100]	; 0x64
 80068ec:	f002 f8fa 	bl	8008ae4 <__match>
 80068f0:	b910      	cbnz	r0, 80068f8 <_strtod_l+0x368>
 80068f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068f4:	3301      	adds	r3, #1
 80068f6:	9319      	str	r3, [sp, #100]	; 0x64
 80068f8:	f04f 0800 	mov.w	r8, #0
 80068fc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006b18 <_strtod_l+0x588>
 8006900:	e687      	b.n	8006612 <_strtod_l+0x82>
 8006902:	4886      	ldr	r0, [pc, #536]	; (8006b1c <_strtod_l+0x58c>)
 8006904:	f003 f9c4 	bl	8009c90 <nan>
 8006908:	4680      	mov	r8, r0
 800690a:	4689      	mov	r9, r1
 800690c:	e681      	b.n	8006612 <_strtod_l+0x82>
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	f1bb 0f00 	cmp.w	fp, #0
 8006914:	bf08      	it	eq
 8006916:	46a3      	moveq	fp, r4
 8006918:	1aeb      	subs	r3, r5, r3
 800691a:	2c10      	cmp	r4, #16
 800691c:	9806      	ldr	r0, [sp, #24]
 800691e:	4626      	mov	r6, r4
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	bfa8      	it	ge
 8006924:	2610      	movge	r6, #16
 8006926:	f7f9 fd67 	bl	80003f8 <__aeabi_ui2d>
 800692a:	2c09      	cmp	r4, #9
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	dd13      	ble.n	800695a <_strtod_l+0x3ca>
 8006932:	4b7b      	ldr	r3, [pc, #492]	; (8006b20 <_strtod_l+0x590>)
 8006934:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006938:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800693c:	f7f9 fdd6 	bl	80004ec <__aeabi_dmul>
 8006940:	4680      	mov	r8, r0
 8006942:	9805      	ldr	r0, [sp, #20]
 8006944:	4689      	mov	r9, r1
 8006946:	f7f9 fd57 	bl	80003f8 <__aeabi_ui2d>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7f9 fc15 	bl	8000180 <__adddf3>
 8006956:	4680      	mov	r8, r0
 8006958:	4689      	mov	r9, r1
 800695a:	2c0f      	cmp	r4, #15
 800695c:	dc36      	bgt.n	80069cc <_strtod_l+0x43c>
 800695e:	9b07      	ldr	r3, [sp, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	f43f ae56 	beq.w	8006612 <_strtod_l+0x82>
 8006966:	dd22      	ble.n	80069ae <_strtod_l+0x41e>
 8006968:	2b16      	cmp	r3, #22
 800696a:	dc09      	bgt.n	8006980 <_strtod_l+0x3f0>
 800696c:	496c      	ldr	r1, [pc, #432]	; (8006b20 <_strtod_l+0x590>)
 800696e:	4642      	mov	r2, r8
 8006970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006974:	464b      	mov	r3, r9
 8006976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800697a:	f7f9 fdb7 	bl	80004ec <__aeabi_dmul>
 800697e:	e7c3      	b.n	8006908 <_strtod_l+0x378>
 8006980:	9a07      	ldr	r2, [sp, #28]
 8006982:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006986:	4293      	cmp	r3, r2
 8006988:	db20      	blt.n	80069cc <_strtod_l+0x43c>
 800698a:	4d65      	ldr	r5, [pc, #404]	; (8006b20 <_strtod_l+0x590>)
 800698c:	f1c4 040f 	rsb	r4, r4, #15
 8006990:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006994:	4642      	mov	r2, r8
 8006996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800699a:	464b      	mov	r3, r9
 800699c:	f7f9 fda6 	bl	80004ec <__aeabi_dmul>
 80069a0:	9b07      	ldr	r3, [sp, #28]
 80069a2:	1b1c      	subs	r4, r3, r4
 80069a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80069a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069ac:	e7e5      	b.n	800697a <_strtod_l+0x3ea>
 80069ae:	9b07      	ldr	r3, [sp, #28]
 80069b0:	3316      	adds	r3, #22
 80069b2:	db0b      	blt.n	80069cc <_strtod_l+0x43c>
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	4640      	mov	r0, r8
 80069b8:	1b5d      	subs	r5, r3, r5
 80069ba:	4b59      	ldr	r3, [pc, #356]	; (8006b20 <_strtod_l+0x590>)
 80069bc:	4649      	mov	r1, r9
 80069be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80069c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069c6:	f7f9 febb 	bl	8000740 <__aeabi_ddiv>
 80069ca:	e79d      	b.n	8006908 <_strtod_l+0x378>
 80069cc:	9b07      	ldr	r3, [sp, #28]
 80069ce:	1ba6      	subs	r6, r4, r6
 80069d0:	441e      	add	r6, r3
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	dd74      	ble.n	8006ac0 <_strtod_l+0x530>
 80069d6:	f016 030f 	ands.w	r3, r6, #15
 80069da:	d00a      	beq.n	80069f2 <_strtod_l+0x462>
 80069dc:	4950      	ldr	r1, [pc, #320]	; (8006b20 <_strtod_l+0x590>)
 80069de:	4642      	mov	r2, r8
 80069e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e8:	464b      	mov	r3, r9
 80069ea:	f7f9 fd7f 	bl	80004ec <__aeabi_dmul>
 80069ee:	4680      	mov	r8, r0
 80069f0:	4689      	mov	r9, r1
 80069f2:	f036 060f 	bics.w	r6, r6, #15
 80069f6:	d052      	beq.n	8006a9e <_strtod_l+0x50e>
 80069f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80069fc:	dd27      	ble.n	8006a4e <_strtod_l+0x4be>
 80069fe:	f04f 0b00 	mov.w	fp, #0
 8006a02:	f8cd b010 	str.w	fp, [sp, #16]
 8006a06:	f8cd b020 	str.w	fp, [sp, #32]
 8006a0a:	f8cd b018 	str.w	fp, [sp, #24]
 8006a0e:	2322      	movs	r3, #34	; 0x22
 8006a10:	f04f 0800 	mov.w	r8, #0
 8006a14:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006b18 <_strtod_l+0x588>
 8006a18:	f8ca 3000 	str.w	r3, [sl]
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f43f adf7 	beq.w	8006612 <_strtod_l+0x82>
 8006a24:	4650      	mov	r0, sl
 8006a26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a28:	f002 f9f2 	bl	8008e10 <_Bfree>
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	9906      	ldr	r1, [sp, #24]
 8006a30:	f002 f9ee 	bl	8008e10 <_Bfree>
 8006a34:	4650      	mov	r0, sl
 8006a36:	9904      	ldr	r1, [sp, #16]
 8006a38:	f002 f9ea 	bl	8008e10 <_Bfree>
 8006a3c:	4650      	mov	r0, sl
 8006a3e:	9908      	ldr	r1, [sp, #32]
 8006a40:	f002 f9e6 	bl	8008e10 <_Bfree>
 8006a44:	4659      	mov	r1, fp
 8006a46:	4650      	mov	r0, sl
 8006a48:	f002 f9e2 	bl	8008e10 <_Bfree>
 8006a4c:	e5e1      	b.n	8006612 <_strtod_l+0x82>
 8006a4e:	4b35      	ldr	r3, [pc, #212]	; (8006b24 <_strtod_l+0x594>)
 8006a50:	4640      	mov	r0, r8
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	2300      	movs	r3, #0
 8006a56:	4649      	mov	r1, r9
 8006a58:	461f      	mov	r7, r3
 8006a5a:	1136      	asrs	r6, r6, #4
 8006a5c:	2e01      	cmp	r6, #1
 8006a5e:	dc21      	bgt.n	8006aa4 <_strtod_l+0x514>
 8006a60:	b10b      	cbz	r3, 8006a66 <_strtod_l+0x4d6>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	4b2f      	ldr	r3, [pc, #188]	; (8006b24 <_strtod_l+0x594>)
 8006a68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a70:	4642      	mov	r2, r8
 8006a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a76:	464b      	mov	r3, r9
 8006a78:	f7f9 fd38 	bl	80004ec <__aeabi_dmul>
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <_strtod_l+0x588>)
 8006a7e:	460a      	mov	r2, r1
 8006a80:	400b      	ands	r3, r1
 8006a82:	4929      	ldr	r1, [pc, #164]	; (8006b28 <_strtod_l+0x598>)
 8006a84:	4680      	mov	r8, r0
 8006a86:	428b      	cmp	r3, r1
 8006a88:	d8b9      	bhi.n	80069fe <_strtod_l+0x46e>
 8006a8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a8e:	428b      	cmp	r3, r1
 8006a90:	bf86      	itte	hi
 8006a92:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a96:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006b2c <_strtod_l+0x59c>
 8006a9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	9305      	str	r3, [sp, #20]
 8006aa2:	e07f      	b.n	8006ba4 <_strtod_l+0x614>
 8006aa4:	07f2      	lsls	r2, r6, #31
 8006aa6:	d505      	bpl.n	8006ab4 <_strtod_l+0x524>
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fd1d 	bl	80004ec <__aeabi_dmul>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9a05      	ldr	r2, [sp, #20]
 8006ab6:	3701      	adds	r7, #1
 8006ab8:	3208      	adds	r2, #8
 8006aba:	1076      	asrs	r6, r6, #1
 8006abc:	9205      	str	r2, [sp, #20]
 8006abe:	e7cd      	b.n	8006a5c <_strtod_l+0x4cc>
 8006ac0:	d0ed      	beq.n	8006a9e <_strtod_l+0x50e>
 8006ac2:	4276      	negs	r6, r6
 8006ac4:	f016 020f 	ands.w	r2, r6, #15
 8006ac8:	d00a      	beq.n	8006ae0 <_strtod_l+0x550>
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <_strtod_l+0x590>)
 8006acc:	4640      	mov	r0, r8
 8006ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fe32 	bl	8000740 <__aeabi_ddiv>
 8006adc:	4680      	mov	r8, r0
 8006ade:	4689      	mov	r9, r1
 8006ae0:	1136      	asrs	r6, r6, #4
 8006ae2:	d0dc      	beq.n	8006a9e <_strtod_l+0x50e>
 8006ae4:	2e1f      	cmp	r6, #31
 8006ae6:	dd23      	ble.n	8006b30 <_strtod_l+0x5a0>
 8006ae8:	f04f 0b00 	mov.w	fp, #0
 8006aec:	f8cd b010 	str.w	fp, [sp, #16]
 8006af0:	f8cd b020 	str.w	fp, [sp, #32]
 8006af4:	f8cd b018 	str.w	fp, [sp, #24]
 8006af8:	2322      	movs	r3, #34	; 0x22
 8006afa:	f04f 0800 	mov.w	r8, #0
 8006afe:	f04f 0900 	mov.w	r9, #0
 8006b02:	f8ca 3000 	str.w	r3, [sl]
 8006b06:	e789      	b.n	8006a1c <_strtod_l+0x48c>
 8006b08:	0800a0e9 	.word	0x0800a0e9
 8006b0c:	0800a124 	.word	0x0800a124
 8006b10:	0800a0e1 	.word	0x0800a0e1
 8006b14:	0800a314 	.word	0x0800a314
 8006b18:	7ff00000 	.word	0x7ff00000
 8006b1c:	0800a20f 	.word	0x0800a20f
 8006b20:	0800a4f0 	.word	0x0800a4f0
 8006b24:	0800a4c8 	.word	0x0800a4c8
 8006b28:	7ca00000 	.word	0x7ca00000
 8006b2c:	7fefffff 	.word	0x7fefffff
 8006b30:	f016 0310 	ands.w	r3, r6, #16
 8006b34:	bf18      	it	ne
 8006b36:	236a      	movne	r3, #106	; 0x6a
 8006b38:	4640      	mov	r0, r8
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	2300      	movs	r3, #0
 8006b40:	4fb0      	ldr	r7, [pc, #704]	; (8006e04 <_strtod_l+0x874>)
 8006b42:	07f2      	lsls	r2, r6, #31
 8006b44:	d504      	bpl.n	8006b50 <_strtod_l+0x5c0>
 8006b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b4a:	f7f9 fccf 	bl	80004ec <__aeabi_dmul>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	1076      	asrs	r6, r6, #1
 8006b52:	f107 0708 	add.w	r7, r7, #8
 8006b56:	d1f4      	bne.n	8006b42 <_strtod_l+0x5b2>
 8006b58:	b10b      	cbz	r3, 8006b5e <_strtod_l+0x5ce>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	4689      	mov	r9, r1
 8006b5e:	9b05      	ldr	r3, [sp, #20]
 8006b60:	b1c3      	cbz	r3, 8006b94 <_strtod_l+0x604>
 8006b62:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	dd11      	ble.n	8006b94 <_strtod_l+0x604>
 8006b70:	2b1f      	cmp	r3, #31
 8006b72:	f340 8127 	ble.w	8006dc4 <_strtod_l+0x834>
 8006b76:	2b34      	cmp	r3, #52	; 0x34
 8006b78:	bfd8      	it	le
 8006b7a:	f04f 33ff 	movle.w	r3, #4294967295
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	bfcf      	iteee	gt
 8006b84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b8c:	fa03 f202 	lslle.w	r2, r3, r2
 8006b90:	ea02 0901 	andle.w	r9, r2, r1
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 ff0e 	bl	80009bc <__aeabi_dcmpeq>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1a1      	bne.n	8006ae8 <_strtod_l+0x558>
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	4650      	mov	r0, sl
 8006bac:	4623      	mov	r3, r4
 8006bae:	9908      	ldr	r1, [sp, #32]
 8006bb0:	f002 f996 	bl	8008ee0 <__s2b>
 8006bb4:	9008      	str	r0, [sp, #32]
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f43f af21 	beq.w	80069fe <_strtod_l+0x46e>
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	f04f 0b00 	mov.w	fp, #0
 8006bc2:	1b5d      	subs	r5, r3, r5
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	f8cd b010 	str.w	fp, [sp, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfb4      	ite	lt
 8006bce:	462b      	movlt	r3, r5
 8006bd0:	2300      	movge	r3, #0
 8006bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bda:	9314      	str	r3, [sp, #80]	; 0x50
 8006bdc:	9b08      	ldr	r3, [sp, #32]
 8006bde:	4650      	mov	r0, sl
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	f002 f8d5 	bl	8008d90 <_Balloc>
 8006be6:	9006      	str	r0, [sp, #24]
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f43f af10 	beq.w	8006a0e <_strtod_l+0x47e>
 8006bee:	9b08      	ldr	r3, [sp, #32]
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	f103 010c 	add.w	r1, r3, #12
 8006bf8:	3202      	adds	r2, #2
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	f002 f8ae 	bl	8008d5c <memcpy>
 8006c00:	ab1c      	add	r3, sp, #112	; 0x70
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006c12:	f002 fca7 	bl	8009564 <__d2b>
 8006c16:	901a      	str	r0, [sp, #104]	; 0x68
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f43f aef8 	beq.w	8006a0e <_strtod_l+0x47e>
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4650      	mov	r0, sl
 8006c22:	f002 f9f5 	bl	8009010 <__i2b>
 8006c26:	4603      	mov	r3, r0
 8006c28:	9004      	str	r0, [sp, #16]
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aeef 	beq.w	8006a0e <_strtod_l+0x47e>
 8006c30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006c32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	bfab      	itete	ge
 8006c38:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006c3a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006c3c:	18ee      	addge	r6, r5, r3
 8006c3e:	1b5c      	sublt	r4, r3, r5
 8006c40:	9b05      	ldr	r3, [sp, #20]
 8006c42:	bfa8      	it	ge
 8006c44:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006c46:	eba5 0503 	sub.w	r5, r5, r3
 8006c4a:	4415      	add	r5, r2
 8006c4c:	4b6e      	ldr	r3, [pc, #440]	; (8006e08 <_strtod_l+0x878>)
 8006c4e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c52:	bfb8      	it	lt
 8006c54:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006c56:	429d      	cmp	r5, r3
 8006c58:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c5c:	f280 80c4 	bge.w	8006de8 <_strtod_l+0x858>
 8006c60:	1b5b      	subs	r3, r3, r5
 8006c62:	2b1f      	cmp	r3, #31
 8006c64:	f04f 0701 	mov.w	r7, #1
 8006c68:	eba2 0203 	sub.w	r2, r2, r3
 8006c6c:	f300 80b1 	bgt.w	8006dd2 <_strtod_l+0x842>
 8006c70:	2500      	movs	r5, #0
 8006c72:	fa07 f303 	lsl.w	r3, r7, r3
 8006c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c78:	18b7      	adds	r7, r6, r2
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	42be      	cmp	r6, r7
 8006c7e:	4414      	add	r4, r2
 8006c80:	441c      	add	r4, r3
 8006c82:	4633      	mov	r3, r6
 8006c84:	bfa8      	it	ge
 8006c86:	463b      	movge	r3, r7
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	bfa8      	it	ge
 8006c8c:	4623      	movge	r3, r4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfc2      	ittt	gt
 8006c92:	1aff      	subgt	r7, r7, r3
 8006c94:	1ae4      	subgt	r4, r4, r3
 8006c96:	1af6      	subgt	r6, r6, r3
 8006c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd17      	ble.n	8006cce <_strtod_l+0x73e>
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	9904      	ldr	r1, [sp, #16]
 8006ca4:	f002 fa72 	bl	800918c <__pow5mult>
 8006ca8:	9004      	str	r0, [sp, #16]
 8006caa:	2800      	cmp	r0, #0
 8006cac:	f43f aeaf 	beq.w	8006a0e <_strtod_l+0x47e>
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	f002 f9c1 	bl	800903c <__multiply>
 8006cba:	9009      	str	r0, [sp, #36]	; 0x24
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f43f aea6 	beq.w	8006a0e <_strtod_l+0x47e>
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cc6:	f002 f8a3 	bl	8008e10 <_Bfree>
 8006cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ccc:	931a      	str	r3, [sp, #104]	; 0x68
 8006cce:	2f00      	cmp	r7, #0
 8006cd0:	f300 808e 	bgt.w	8006df0 <_strtod_l+0x860>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd08      	ble.n	8006cec <_strtod_l+0x75c>
 8006cda:	4650      	mov	r0, sl
 8006cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cde:	9906      	ldr	r1, [sp, #24]
 8006ce0:	f002 fa54 	bl	800918c <__pow5mult>
 8006ce4:	9006      	str	r0, [sp, #24]
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f43f ae91 	beq.w	8006a0e <_strtod_l+0x47e>
 8006cec:	2c00      	cmp	r4, #0
 8006cee:	dd08      	ble.n	8006d02 <_strtod_l+0x772>
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	9906      	ldr	r1, [sp, #24]
 8006cf6:	f002 faa3 	bl	8009240 <__lshift>
 8006cfa:	9006      	str	r0, [sp, #24]
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f ae86 	beq.w	8006a0e <_strtod_l+0x47e>
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	dd08      	ble.n	8006d18 <_strtod_l+0x788>
 8006d06:	4632      	mov	r2, r6
 8006d08:	4650      	mov	r0, sl
 8006d0a:	9904      	ldr	r1, [sp, #16]
 8006d0c:	f002 fa98 	bl	8009240 <__lshift>
 8006d10:	9004      	str	r0, [sp, #16]
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f43f ae7b 	beq.w	8006a0e <_strtod_l+0x47e>
 8006d18:	4650      	mov	r0, sl
 8006d1a:	9a06      	ldr	r2, [sp, #24]
 8006d1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d1e:	f002 fb1b 	bl	8009358 <__mdiff>
 8006d22:	4683      	mov	fp, r0
 8006d24:	2800      	cmp	r0, #0
 8006d26:	f43f ae72 	beq.w	8006a0e <_strtod_l+0x47e>
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	68c3      	ldr	r3, [r0, #12]
 8006d2e:	9904      	ldr	r1, [sp, #16]
 8006d30:	60c4      	str	r4, [r0, #12]
 8006d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d34:	f002 faf4 	bl	8009320 <__mcmp>
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	da6b      	bge.n	8006e14 <_strtod_l+0x884>
 8006d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3e:	ea53 0308 	orrs.w	r3, r3, r8
 8006d42:	f040 8091 	bne.w	8006e68 <_strtod_l+0x8d8>
 8006d46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 808c 	bne.w	8006e68 <_strtod_l+0x8d8>
 8006d50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d54:	0d1b      	lsrs	r3, r3, #20
 8006d56:	051b      	lsls	r3, r3, #20
 8006d58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d5c:	f240 8084 	bls.w	8006e68 <_strtod_l+0x8d8>
 8006d60:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006d64:	b91b      	cbnz	r3, 8006d6e <_strtod_l+0x7de>
 8006d66:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	dd7c      	ble.n	8006e68 <_strtod_l+0x8d8>
 8006d6e:	4659      	mov	r1, fp
 8006d70:	2201      	movs	r2, #1
 8006d72:	4650      	mov	r0, sl
 8006d74:	f002 fa64 	bl	8009240 <__lshift>
 8006d78:	9904      	ldr	r1, [sp, #16]
 8006d7a:	4683      	mov	fp, r0
 8006d7c:	f002 fad0 	bl	8009320 <__mcmp>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	dd71      	ble.n	8006e68 <_strtod_l+0x8d8>
 8006d84:	9905      	ldr	r1, [sp, #20]
 8006d86:	464b      	mov	r3, r9
 8006d88:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <_strtod_l+0x87c>)
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	f000 808c 	beq.w	8006ea8 <_strtod_l+0x918>
 8006d90:	ea02 0109 	and.w	r1, r2, r9
 8006d94:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d98:	f300 8086 	bgt.w	8006ea8 <_strtod_l+0x918>
 8006d9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006da0:	f77f aeaa 	ble.w	8006af8 <_strtod_l+0x568>
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <_strtod_l+0x880>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	f7f9 fb9e 	bl	80004ec <__aeabi_dmul>
 8006db0:	460b      	mov	r3, r1
 8006db2:	4303      	orrs	r3, r0
 8006db4:	bf08      	it	eq
 8006db6:	2322      	moveq	r3, #34	; 0x22
 8006db8:	4680      	mov	r8, r0
 8006dba:	4689      	mov	r9, r1
 8006dbc:	bf08      	it	eq
 8006dbe:	f8ca 3000 	streq.w	r3, [sl]
 8006dc2:	e62f      	b.n	8006a24 <_strtod_l+0x494>
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	ea03 0808 	and.w	r8, r3, r8
 8006dd0:	e6e0      	b.n	8006b94 <_strtod_l+0x604>
 8006dd2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006dd6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006dda:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006dde:	35e2      	adds	r5, #226	; 0xe2
 8006de0:	fa07 f505 	lsl.w	r5, r7, r5
 8006de4:	970f      	str	r7, [sp, #60]	; 0x3c
 8006de6:	e747      	b.n	8006c78 <_strtod_l+0x6e8>
 8006de8:	2301      	movs	r3, #1
 8006dea:	2500      	movs	r5, #0
 8006dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dee:	e743      	b.n	8006c78 <_strtod_l+0x6e8>
 8006df0:	463a      	mov	r2, r7
 8006df2:	4650      	mov	r0, sl
 8006df4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006df6:	f002 fa23 	bl	8009240 <__lshift>
 8006dfa:	901a      	str	r0, [sp, #104]	; 0x68
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f47f af69 	bne.w	8006cd4 <_strtod_l+0x744>
 8006e02:	e604      	b.n	8006a0e <_strtod_l+0x47e>
 8006e04:	0800a138 	.word	0x0800a138
 8006e08:	fffffc02 	.word	0xfffffc02
 8006e0c:	7ff00000 	.word	0x7ff00000
 8006e10:	39500000 	.word	0x39500000
 8006e14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e18:	d165      	bne.n	8006ee6 <_strtod_l+0x956>
 8006e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e20:	b35a      	cbz	r2, 8006e7a <_strtod_l+0x8ea>
 8006e22:	4a99      	ldr	r2, [pc, #612]	; (8007088 <_strtod_l+0xaf8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d12b      	bne.n	8006e80 <_strtod_l+0x8f0>
 8006e28:	9b05      	ldr	r3, [sp, #20]
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	b303      	cbz	r3, 8006e70 <_strtod_l+0x8e0>
 8006e2e:	464a      	mov	r2, r9
 8006e30:	4b96      	ldr	r3, [pc, #600]	; (800708c <_strtod_l+0xafc>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3c:	d81b      	bhi.n	8006e76 <_strtod_l+0x8e6>
 8006e3e:	0d1b      	lsrs	r3, r3, #20
 8006e40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d119      	bne.n	8006e80 <_strtod_l+0x8f0>
 8006e4c:	4b90      	ldr	r3, [pc, #576]	; (8007090 <_strtod_l+0xb00>)
 8006e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d102      	bne.n	8006e5a <_strtod_l+0x8ca>
 8006e54:	3101      	adds	r1, #1
 8006e56:	f43f adda 	beq.w	8006a0e <_strtod_l+0x47e>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	4b8b      	ldr	r3, [pc, #556]	; (800708c <_strtod_l+0xafc>)
 8006e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e62:	401a      	ands	r2, r3
 8006e64:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006e68:	9b05      	ldr	r3, [sp, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d19a      	bne.n	8006da4 <_strtod_l+0x814>
 8006e6e:	e5d9      	b.n	8006a24 <_strtod_l+0x494>
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	e7e8      	b.n	8006e48 <_strtod_l+0x8b8>
 8006e76:	4613      	mov	r3, r2
 8006e78:	e7e6      	b.n	8006e48 <_strtod_l+0x8b8>
 8006e7a:	ea53 0308 	orrs.w	r3, r3, r8
 8006e7e:	d081      	beq.n	8006d84 <_strtod_l+0x7f4>
 8006e80:	b1e5      	cbz	r5, 8006ebc <_strtod_l+0x92c>
 8006e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e84:	421d      	tst	r5, r3
 8006e86:	d0ef      	beq.n	8006e68 <_strtod_l+0x8d8>
 8006e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	9a05      	ldr	r2, [sp, #20]
 8006e90:	b1c3      	cbz	r3, 8006ec4 <_strtod_l+0x934>
 8006e92:	f7ff fb5a 	bl	800654a <sulp>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e9e:	f7f9 f96f 	bl	8000180 <__adddf3>
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	e7df      	b.n	8006e68 <_strtod_l+0x8d8>
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006eae:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006eb2:	f04f 38ff 	mov.w	r8, #4294967295
 8006eb6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006eba:	e7d5      	b.n	8006e68 <_strtod_l+0x8d8>
 8006ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ebe:	ea13 0f08 	tst.w	r3, r8
 8006ec2:	e7e0      	b.n	8006e86 <_strtod_l+0x8f6>
 8006ec4:	f7ff fb41 	bl	800654a <sulp>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ed0:	f7f9 f954 	bl	800017c <__aeabi_dsub>
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4689      	mov	r9, r1
 8006edc:	f7f9 fd6e 	bl	80009bc <__aeabi_dcmpeq>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0c1      	beq.n	8006e68 <_strtod_l+0x8d8>
 8006ee4:	e608      	b.n	8006af8 <_strtod_l+0x568>
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	9904      	ldr	r1, [sp, #16]
 8006eea:	f002 fb97 	bl	800961c <__ratio>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	460f      	mov	r7, r1
 8006ef8:	f7f9 fd74 	bl	80009e4 <__aeabi_dcmple>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d070      	beq.n	8006fe2 <_strtod_l+0xa52>
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d042      	beq.n	8006f8c <_strtod_l+0x9fc>
 8006f06:	2600      	movs	r6, #0
 8006f08:	4f62      	ldr	r7, [pc, #392]	; (8007094 <_strtod_l+0xb04>)
 8006f0a:	4d62      	ldr	r5, [pc, #392]	; (8007094 <_strtod_l+0xb04>)
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	0d1b      	lsrs	r3, r3, #20
 8006f14:	051b      	lsls	r3, r3, #20
 8006f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f1a:	4b5f      	ldr	r3, [pc, #380]	; (8007098 <_strtod_l+0xb08>)
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	f040 80c3 	bne.w	80070a8 <_strtod_l+0xb18>
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	4640      	mov	r0, r8
 8006f26:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f002 faa0 	bl	8009470 <__ulp>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4630      	mov	r0, r6
 8006f36:	4639      	mov	r1, r7
 8006f38:	f7f9 fad8 	bl	80004ec <__aeabi_dmul>
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	f7f9 f91e 	bl	8000180 <__adddf3>
 8006f44:	460b      	mov	r3, r1
 8006f46:	4951      	ldr	r1, [pc, #324]	; (800708c <_strtod_l+0xafc>)
 8006f48:	4a54      	ldr	r2, [pc, #336]	; (800709c <_strtod_l+0xb0c>)
 8006f4a:	4019      	ands	r1, r3
 8006f4c:	4291      	cmp	r1, r2
 8006f4e:	4680      	mov	r8, r0
 8006f50:	d95d      	bls.n	800700e <_strtod_l+0xa7e>
 8006f52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f54:	4b4e      	ldr	r3, [pc, #312]	; (8007090 <_strtod_l+0xb00>)
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d103      	bne.n	8006f62 <_strtod_l+0x9d2>
 8006f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f43f ad56 	beq.w	8006a0e <_strtod_l+0x47e>
 8006f62:	f04f 38ff 	mov.w	r8, #4294967295
 8006f66:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007090 <_strtod_l+0xb00>
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f6e:	f001 ff4f 	bl	8008e10 <_Bfree>
 8006f72:	4650      	mov	r0, sl
 8006f74:	9906      	ldr	r1, [sp, #24]
 8006f76:	f001 ff4b 	bl	8008e10 <_Bfree>
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	9904      	ldr	r1, [sp, #16]
 8006f7e:	f001 ff47 	bl	8008e10 <_Bfree>
 8006f82:	4659      	mov	r1, fp
 8006f84:	4650      	mov	r0, sl
 8006f86:	f001 ff43 	bl	8008e10 <_Bfree>
 8006f8a:	e627      	b.n	8006bdc <_strtod_l+0x64c>
 8006f8c:	f1b8 0f00 	cmp.w	r8, #0
 8006f90:	d119      	bne.n	8006fc6 <_strtod_l+0xa36>
 8006f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f98:	b9e3      	cbnz	r3, 8006fd4 <_strtod_l+0xa44>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4b3c      	ldr	r3, [pc, #240]	; (8007094 <_strtod_l+0xb04>)
 8006fa2:	f7f9 fd15 	bl	80009d0 <__aeabi_dcmplt>
 8006fa6:	b9c8      	cbnz	r0, 8006fdc <_strtod_l+0xa4c>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	4b3c      	ldr	r3, [pc, #240]	; (80070a0 <_strtod_l+0xb10>)
 8006fb0:	f7f9 fa9c 	bl	80004ec <__aeabi_dmul>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006fbc:	9416      	str	r4, [sp, #88]	; 0x58
 8006fbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006fc0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006fc4:	e7a2      	b.n	8006f0c <_strtod_l+0x97c>
 8006fc6:	f1b8 0f01 	cmp.w	r8, #1
 8006fca:	d103      	bne.n	8006fd4 <_strtod_l+0xa44>
 8006fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f43f ad92 	beq.w	8006af8 <_strtod_l+0x568>
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	4f32      	ldr	r7, [pc, #200]	; (80070a4 <_strtod_l+0xb14>)
 8006fda:	e796      	b.n	8006f0a <_strtod_l+0x97a>
 8006fdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006fde:	4d30      	ldr	r5, [pc, #192]	; (80070a0 <_strtod_l+0xb10>)
 8006fe0:	e7ea      	b.n	8006fb8 <_strtod_l+0xa28>
 8006fe2:	4b2f      	ldr	r3, [pc, #188]	; (80070a0 <_strtod_l+0xb10>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	f7f9 fa7f 	bl	80004ec <__aeabi_dmul>
 8006fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	b933      	cbnz	r3, 8007004 <_strtod_l+0xa74>
 8006ff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ffa:	9010      	str	r0, [sp, #64]	; 0x40
 8006ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8006ffe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007002:	e783      	b.n	8006f0c <_strtod_l+0x97c>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800700c:	e7f7      	b.n	8006ffe <_strtod_l+0xa6e>
 800700e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007012:	9b05      	ldr	r3, [sp, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1a8      	bne.n	8006f6a <_strtod_l+0x9da>
 8007018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800701c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800701e:	0d1b      	lsrs	r3, r3, #20
 8007020:	051b      	lsls	r3, r3, #20
 8007022:	429a      	cmp	r2, r3
 8007024:	d1a1      	bne.n	8006f6a <_strtod_l+0x9da>
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7fa f825 	bl	8001078 <__aeabi_d2lz>
 800702e:	f7f9 fa2f 	bl	8000490 <__aeabi_l2d>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 f89f 	bl	800017c <__aeabi_dsub>
 800703e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007044:	ea43 0308 	orr.w	r3, r3, r8
 8007048:	4313      	orrs	r3, r2
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	d066      	beq.n	800711e <_strtod_l+0xb8e>
 8007050:	a309      	add	r3, pc, #36	; (adr r3, 8007078 <_strtod_l+0xae8>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 fcbb 	bl	80009d0 <__aeabi_dcmplt>
 800705a:	2800      	cmp	r0, #0
 800705c:	f47f ace2 	bne.w	8006a24 <_strtod_l+0x494>
 8007060:	a307      	add	r3, pc, #28	; (adr r3, 8007080 <_strtod_l+0xaf0>)
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fccf 	bl	8000a0c <__aeabi_dcmpgt>
 800706e:	2800      	cmp	r0, #0
 8007070:	f43f af7b 	beq.w	8006f6a <_strtod_l+0x9da>
 8007074:	e4d6      	b.n	8006a24 <_strtod_l+0x494>
 8007076:	bf00      	nop
 8007078:	94a03595 	.word	0x94a03595
 800707c:	3fdfffff 	.word	0x3fdfffff
 8007080:	35afe535 	.word	0x35afe535
 8007084:	3fe00000 	.word	0x3fe00000
 8007088:	000fffff 	.word	0x000fffff
 800708c:	7ff00000 	.word	0x7ff00000
 8007090:	7fefffff 	.word	0x7fefffff
 8007094:	3ff00000 	.word	0x3ff00000
 8007098:	7fe00000 	.word	0x7fe00000
 800709c:	7c9fffff 	.word	0x7c9fffff
 80070a0:	3fe00000 	.word	0x3fe00000
 80070a4:	bff00000 	.word	0xbff00000
 80070a8:	9b05      	ldr	r3, [sp, #20]
 80070aa:	b313      	cbz	r3, 80070f2 <_strtod_l+0xb62>
 80070ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070b2:	d81e      	bhi.n	80070f2 <_strtod_l+0xb62>
 80070b4:	a326      	add	r3, pc, #152	; (adr r3, 8007150 <_strtod_l+0xbc0>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	4620      	mov	r0, r4
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 fc91 	bl	80009e4 <__aeabi_dcmple>
 80070c2:	b190      	cbz	r0, 80070ea <_strtod_l+0xb5a>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4620      	mov	r0, r4
 80070c8:	f7f9 fce8 	bl	8000a9c <__aeabi_d2uiz>
 80070cc:	2801      	cmp	r0, #1
 80070ce:	bf38      	it	cc
 80070d0:	2001      	movcc	r0, #1
 80070d2:	f7f9 f991 	bl	80003f8 <__aeabi_ui2d>
 80070d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d8:	4604      	mov	r4, r0
 80070da:	460d      	mov	r5, r1
 80070dc:	b9d3      	cbnz	r3, 8007114 <_strtod_l+0xb84>
 80070de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070e2:	9012      	str	r0, [sp, #72]	; 0x48
 80070e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80070e6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80070ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070ec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80070f0:	1a9f      	subs	r7, r3, r2
 80070f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070f6:	f002 f9bb 	bl	8009470 <__ulp>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4630      	mov	r0, r6
 8007100:	4639      	mov	r1, r7
 8007102:	f7f9 f9f3 	bl	80004ec <__aeabi_dmul>
 8007106:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800710a:	f7f9 f839 	bl	8000180 <__adddf3>
 800710e:	4680      	mov	r8, r0
 8007110:	4689      	mov	r9, r1
 8007112:	e77e      	b.n	8007012 <_strtod_l+0xa82>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800711c:	e7e3      	b.n	80070e6 <_strtod_l+0xb56>
 800711e:	a30e      	add	r3, pc, #56	; (adr r3, 8007158 <_strtod_l+0xbc8>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 fc54 	bl	80009d0 <__aeabi_dcmplt>
 8007128:	e7a1      	b.n	800706e <_strtod_l+0xade>
 800712a:	2300      	movs	r3, #0
 800712c:	930a      	str	r3, [sp, #40]	; 0x28
 800712e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007130:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	f7ff ba71 	b.w	800661a <_strtod_l+0x8a>
 8007138:	2a65      	cmp	r2, #101	; 0x65
 800713a:	f43f ab63 	beq.w	8006804 <_strtod_l+0x274>
 800713e:	2a45      	cmp	r2, #69	; 0x45
 8007140:	f43f ab60 	beq.w	8006804 <_strtod_l+0x274>
 8007144:	2301      	movs	r3, #1
 8007146:	f7ff bb95 	b.w	8006874 <_strtod_l+0x2e4>
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	ffc00000 	.word	0xffc00000
 8007154:	41dfffff 	.word	0x41dfffff
 8007158:	94a03595 	.word	0x94a03595
 800715c:	3fcfffff 	.word	0x3fcfffff

08007160 <strtod>:
 8007160:	460a      	mov	r2, r1
 8007162:	4601      	mov	r1, r0
 8007164:	4802      	ldr	r0, [pc, #8]	; (8007170 <strtod+0x10>)
 8007166:	4b03      	ldr	r3, [pc, #12]	; (8007174 <strtod+0x14>)
 8007168:	6800      	ldr	r0, [r0, #0]
 800716a:	f7ff ba11 	b.w	8006590 <_strtod_l>
 800716e:	bf00      	nop
 8007170:	2000001c 	.word	0x2000001c
 8007174:	20000084 	.word	0x20000084

08007178 <strtok>:
 8007178:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <strtok+0x5c>)
 800717a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717e:	681f      	ldr	r7, [r3, #0]
 8007180:	4605      	mov	r5, r0
 8007182:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007184:	460e      	mov	r6, r1
 8007186:	b9ec      	cbnz	r4, 80071c4 <strtok+0x4c>
 8007188:	2050      	movs	r0, #80	; 0x50
 800718a:	f7fe fba5 	bl	80058d8 <malloc>
 800718e:	4602      	mov	r2, r0
 8007190:	65b8      	str	r0, [r7, #88]	; 0x58
 8007192:	b920      	cbnz	r0, 800719e <strtok+0x26>
 8007194:	2157      	movs	r1, #87	; 0x57
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <strtok+0x60>)
 8007198:	4810      	ldr	r0, [pc, #64]	; (80071dc <strtok+0x64>)
 800719a:	f000 f98f 	bl	80074bc <__assert_func>
 800719e:	e9c0 4400 	strd	r4, r4, [r0]
 80071a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80071a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80071aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80071ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80071b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80071b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80071ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80071be:	6184      	str	r4, [r0, #24]
 80071c0:	7704      	strb	r4, [r0, #28]
 80071c2:	6244      	str	r4, [r0, #36]	; 0x24
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ca:	2301      	movs	r3, #1
 80071cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	f000 b806 	b.w	80071e0 <__strtok_r>
 80071d4:	2000001c 	.word	0x2000001c
 80071d8:	0800a160 	.word	0x0800a160
 80071dc:	0800a177 	.word	0x0800a177

080071e0 <__strtok_r>:
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b908      	cbnz	r0, 80071e8 <__strtok_r+0x8>
 80071e4:	6810      	ldr	r0, [r2, #0]
 80071e6:	b188      	cbz	r0, 800720c <__strtok_r+0x2c>
 80071e8:	4604      	mov	r4, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	f814 5b01 	ldrb.w	r5, [r4], #1
 80071f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80071f6:	b91e      	cbnz	r6, 8007200 <__strtok_r+0x20>
 80071f8:	b965      	cbnz	r5, 8007214 <__strtok_r+0x34>
 80071fa:	4628      	mov	r0, r5
 80071fc:	6015      	str	r5, [r2, #0]
 80071fe:	e005      	b.n	800720c <__strtok_r+0x2c>
 8007200:	42b5      	cmp	r5, r6
 8007202:	d1f6      	bne.n	80071f2 <__strtok_r+0x12>
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f0      	bne.n	80071ea <__strtok_r+0xa>
 8007208:	6014      	str	r4, [r2, #0]
 800720a:	7003      	strb	r3, [r0, #0]
 800720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720e:	461c      	mov	r4, r3
 8007210:	e00c      	b.n	800722c <__strtok_r+0x4c>
 8007212:	b915      	cbnz	r5, 800721a <__strtok_r+0x3a>
 8007214:	460e      	mov	r6, r1
 8007216:	f814 3b01 	ldrb.w	r3, [r4], #1
 800721a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800721e:	42ab      	cmp	r3, r5
 8007220:	d1f7      	bne.n	8007212 <__strtok_r+0x32>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f3      	beq.n	800720e <__strtok_r+0x2e>
 8007226:	2300      	movs	r3, #0
 8007228:	f804 3c01 	strb.w	r3, [r4, #-1]
 800722c:	6014      	str	r4, [r2, #0]
 800722e:	e7ed      	b.n	800720c <__strtok_r+0x2c>

08007230 <_strtol_l.constprop.0>:
 8007230:	2b01      	cmp	r3, #1
 8007232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007236:	4680      	mov	r8, r0
 8007238:	d001      	beq.n	800723e <_strtol_l.constprop.0+0xe>
 800723a:	2b24      	cmp	r3, #36	; 0x24
 800723c:	d906      	bls.n	800724c <_strtol_l.constprop.0+0x1c>
 800723e:	f7fe fb0d 	bl	800585c <__errno>
 8007242:	2316      	movs	r3, #22
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	2000      	movs	r0, #0
 8007248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724c:	460d      	mov	r5, r1
 800724e:	4f35      	ldr	r7, [pc, #212]	; (8007324 <_strtol_l.constprop.0+0xf4>)
 8007250:	4628      	mov	r0, r5
 8007252:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007256:	5de6      	ldrb	r6, [r4, r7]
 8007258:	f016 0608 	ands.w	r6, r6, #8
 800725c:	d1f8      	bne.n	8007250 <_strtol_l.constprop.0+0x20>
 800725e:	2c2d      	cmp	r4, #45	; 0x2d
 8007260:	d12f      	bne.n	80072c2 <_strtol_l.constprop.0+0x92>
 8007262:	2601      	movs	r6, #1
 8007264:	782c      	ldrb	r4, [r5, #0]
 8007266:	1c85      	adds	r5, r0, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d057      	beq.n	800731c <_strtol_l.constprop.0+0xec>
 800726c:	2b10      	cmp	r3, #16
 800726e:	d109      	bne.n	8007284 <_strtol_l.constprop.0+0x54>
 8007270:	2c30      	cmp	r4, #48	; 0x30
 8007272:	d107      	bne.n	8007284 <_strtol_l.constprop.0+0x54>
 8007274:	7828      	ldrb	r0, [r5, #0]
 8007276:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800727a:	2858      	cmp	r0, #88	; 0x58
 800727c:	d149      	bne.n	8007312 <_strtol_l.constprop.0+0xe2>
 800727e:	2310      	movs	r3, #16
 8007280:	786c      	ldrb	r4, [r5, #1]
 8007282:	3502      	adds	r5, #2
 8007284:	2700      	movs	r7, #0
 8007286:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800728a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800728e:	fbbe f9f3 	udiv	r9, lr, r3
 8007292:	4638      	mov	r0, r7
 8007294:	fb03 ea19 	mls	sl, r3, r9, lr
 8007298:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800729c:	f1bc 0f09 	cmp.w	ip, #9
 80072a0:	d814      	bhi.n	80072cc <_strtol_l.constprop.0+0x9c>
 80072a2:	4664      	mov	r4, ip
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	dd22      	ble.n	80072ee <_strtol_l.constprop.0+0xbe>
 80072a8:	2f00      	cmp	r7, #0
 80072aa:	db1d      	blt.n	80072e8 <_strtol_l.constprop.0+0xb8>
 80072ac:	4581      	cmp	r9, r0
 80072ae:	d31b      	bcc.n	80072e8 <_strtol_l.constprop.0+0xb8>
 80072b0:	d101      	bne.n	80072b6 <_strtol_l.constprop.0+0x86>
 80072b2:	45a2      	cmp	sl, r4
 80072b4:	db18      	blt.n	80072e8 <_strtol_l.constprop.0+0xb8>
 80072b6:	2701      	movs	r7, #1
 80072b8:	fb00 4003 	mla	r0, r0, r3, r4
 80072bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072c0:	e7ea      	b.n	8007298 <_strtol_l.constprop.0+0x68>
 80072c2:	2c2b      	cmp	r4, #43	; 0x2b
 80072c4:	bf04      	itt	eq
 80072c6:	782c      	ldrbeq	r4, [r5, #0]
 80072c8:	1c85      	addeq	r5, r0, #2
 80072ca:	e7cd      	b.n	8007268 <_strtol_l.constprop.0+0x38>
 80072cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80072d0:	f1bc 0f19 	cmp.w	ip, #25
 80072d4:	d801      	bhi.n	80072da <_strtol_l.constprop.0+0xaa>
 80072d6:	3c37      	subs	r4, #55	; 0x37
 80072d8:	e7e4      	b.n	80072a4 <_strtol_l.constprop.0+0x74>
 80072da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80072de:	f1bc 0f19 	cmp.w	ip, #25
 80072e2:	d804      	bhi.n	80072ee <_strtol_l.constprop.0+0xbe>
 80072e4:	3c57      	subs	r4, #87	; 0x57
 80072e6:	e7dd      	b.n	80072a4 <_strtol_l.constprop.0+0x74>
 80072e8:	f04f 37ff 	mov.w	r7, #4294967295
 80072ec:	e7e6      	b.n	80072bc <_strtol_l.constprop.0+0x8c>
 80072ee:	2f00      	cmp	r7, #0
 80072f0:	da07      	bge.n	8007302 <_strtol_l.constprop.0+0xd2>
 80072f2:	2322      	movs	r3, #34	; 0x22
 80072f4:	4670      	mov	r0, lr
 80072f6:	f8c8 3000 	str.w	r3, [r8]
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	d0a4      	beq.n	8007248 <_strtol_l.constprop.0+0x18>
 80072fe:	1e69      	subs	r1, r5, #1
 8007300:	e005      	b.n	800730e <_strtol_l.constprop.0+0xde>
 8007302:	b106      	cbz	r6, 8007306 <_strtol_l.constprop.0+0xd6>
 8007304:	4240      	negs	r0, r0
 8007306:	2a00      	cmp	r2, #0
 8007308:	d09e      	beq.n	8007248 <_strtol_l.constprop.0+0x18>
 800730a:	2f00      	cmp	r7, #0
 800730c:	d1f7      	bne.n	80072fe <_strtol_l.constprop.0+0xce>
 800730e:	6011      	str	r1, [r2, #0]
 8007310:	e79a      	b.n	8007248 <_strtol_l.constprop.0+0x18>
 8007312:	2430      	movs	r4, #48	; 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1b5      	bne.n	8007284 <_strtol_l.constprop.0+0x54>
 8007318:	2308      	movs	r3, #8
 800731a:	e7b3      	b.n	8007284 <_strtol_l.constprop.0+0x54>
 800731c:	2c30      	cmp	r4, #48	; 0x30
 800731e:	d0a9      	beq.n	8007274 <_strtol_l.constprop.0+0x44>
 8007320:	230a      	movs	r3, #10
 8007322:	e7af      	b.n	8007284 <_strtol_l.constprop.0+0x54>
 8007324:	0800a211 	.word	0x0800a211

08007328 <strtol>:
 8007328:	4613      	mov	r3, r2
 800732a:	460a      	mov	r2, r1
 800732c:	4601      	mov	r1, r0
 800732e:	4802      	ldr	r0, [pc, #8]	; (8007338 <strtol+0x10>)
 8007330:	6800      	ldr	r0, [r0, #0]
 8007332:	f7ff bf7d 	b.w	8007230 <_strtol_l.constprop.0>
 8007336:	bf00      	nop
 8007338:	2000001c 	.word	0x2000001c

0800733c <__swbuf_r>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	460e      	mov	r6, r1
 8007340:	4614      	mov	r4, r2
 8007342:	4605      	mov	r5, r0
 8007344:	b118      	cbz	r0, 800734e <__swbuf_r+0x12>
 8007346:	6983      	ldr	r3, [r0, #24]
 8007348:	b90b      	cbnz	r3, 800734e <__swbuf_r+0x12>
 800734a:	f001 f865 	bl	8008418 <__sinit>
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <__swbuf_r+0x98>)
 8007350:	429c      	cmp	r4, r3
 8007352:	d12b      	bne.n	80073ac <__swbuf_r+0x70>
 8007354:	686c      	ldr	r4, [r5, #4]
 8007356:	69a3      	ldr	r3, [r4, #24]
 8007358:	60a3      	str	r3, [r4, #8]
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	071a      	lsls	r2, r3, #28
 800735e:	d52f      	bpl.n	80073c0 <__swbuf_r+0x84>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	b36b      	cbz	r3, 80073c0 <__swbuf_r+0x84>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	b2f6      	uxtb	r6, r6
 800736a:	1ac0      	subs	r0, r0, r3
 800736c:	6963      	ldr	r3, [r4, #20]
 800736e:	4637      	mov	r7, r6
 8007370:	4283      	cmp	r3, r0
 8007372:	dc04      	bgt.n	800737e <__swbuf_r+0x42>
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 ffba 	bl	80082f0 <_fflush_r>
 800737c:	bb30      	cbnz	r0, 80073cc <__swbuf_r+0x90>
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	3001      	adds	r0, #1
 8007382:	3b01      	subs	r3, #1
 8007384:	60a3      	str	r3, [r4, #8]
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	6022      	str	r2, [r4, #0]
 800738c:	701e      	strb	r6, [r3, #0]
 800738e:	6963      	ldr	r3, [r4, #20]
 8007390:	4283      	cmp	r3, r0
 8007392:	d004      	beq.n	800739e <__swbuf_r+0x62>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d506      	bpl.n	80073a8 <__swbuf_r+0x6c>
 800739a:	2e0a      	cmp	r6, #10
 800739c:	d104      	bne.n	80073a8 <__swbuf_r+0x6c>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 ffa5 	bl	80082f0 <_fflush_r>
 80073a6:	b988      	cbnz	r0, 80073cc <__swbuf_r+0x90>
 80073a8:	4638      	mov	r0, r7
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <__swbuf_r+0x9c>)
 80073ae:	429c      	cmp	r4, r3
 80073b0:	d101      	bne.n	80073b6 <__swbuf_r+0x7a>
 80073b2:	68ac      	ldr	r4, [r5, #8]
 80073b4:	e7cf      	b.n	8007356 <__swbuf_r+0x1a>
 80073b6:	4b09      	ldr	r3, [pc, #36]	; (80073dc <__swbuf_r+0xa0>)
 80073b8:	429c      	cmp	r4, r3
 80073ba:	bf08      	it	eq
 80073bc:	68ec      	ldreq	r4, [r5, #12]
 80073be:	e7ca      	b.n	8007356 <__swbuf_r+0x1a>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 f80c 	bl	80073e0 <__swsetup_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d0cb      	beq.n	8007364 <__swbuf_r+0x28>
 80073cc:	f04f 37ff 	mov.w	r7, #4294967295
 80073d0:	e7ea      	b.n	80073a8 <__swbuf_r+0x6c>
 80073d2:	bf00      	nop
 80073d4:	0800a3ac 	.word	0x0800a3ac
 80073d8:	0800a3cc 	.word	0x0800a3cc
 80073dc:	0800a38c 	.word	0x0800a38c

080073e0 <__swsetup_r>:
 80073e0:	4b32      	ldr	r3, [pc, #200]	; (80074ac <__swsetup_r+0xcc>)
 80073e2:	b570      	push	{r4, r5, r6, lr}
 80073e4:	681d      	ldr	r5, [r3, #0]
 80073e6:	4606      	mov	r6, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	b125      	cbz	r5, 80073f6 <__swsetup_r+0x16>
 80073ec:	69ab      	ldr	r3, [r5, #24]
 80073ee:	b913      	cbnz	r3, 80073f6 <__swsetup_r+0x16>
 80073f0:	4628      	mov	r0, r5
 80073f2:	f001 f811 	bl	8008418 <__sinit>
 80073f6:	4b2e      	ldr	r3, [pc, #184]	; (80074b0 <__swsetup_r+0xd0>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d10f      	bne.n	800741c <__swsetup_r+0x3c>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007404:	0719      	lsls	r1, r3, #28
 8007406:	d42c      	bmi.n	8007462 <__swsetup_r+0x82>
 8007408:	06dd      	lsls	r5, r3, #27
 800740a:	d411      	bmi.n	8007430 <__swsetup_r+0x50>
 800740c:	2309      	movs	r3, #9
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	e03e      	b.n	800749a <__swsetup_r+0xba>
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <__swsetup_r+0xd4>)
 800741e:	429c      	cmp	r4, r3
 8007420:	d101      	bne.n	8007426 <__swsetup_r+0x46>
 8007422:	68ac      	ldr	r4, [r5, #8]
 8007424:	e7eb      	b.n	80073fe <__swsetup_r+0x1e>
 8007426:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <__swsetup_r+0xd8>)
 8007428:	429c      	cmp	r4, r3
 800742a:	bf08      	it	eq
 800742c:	68ec      	ldreq	r4, [r5, #12]
 800742e:	e7e6      	b.n	80073fe <__swsetup_r+0x1e>
 8007430:	0758      	lsls	r0, r3, #29
 8007432:	d512      	bpl.n	800745a <__swsetup_r+0x7a>
 8007434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007436:	b141      	cbz	r1, 800744a <__swsetup_r+0x6a>
 8007438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <__swsetup_r+0x66>
 8007440:	4630      	mov	r0, r6
 8007442:	f7fe fa59 	bl	80058f8 <_free_r>
 8007446:	2300      	movs	r3, #0
 8007448:	6363      	str	r3, [r4, #52]	; 0x34
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	2300      	movs	r3, #0
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f043 0308 	orr.w	r3, r3, #8
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	b94b      	cbnz	r3, 800747a <__swsetup_r+0x9a>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800746c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007470:	d003      	beq.n	800747a <__swsetup_r+0x9a>
 8007472:	4621      	mov	r1, r4
 8007474:	4630      	mov	r0, r6
 8007476:	f001 fc11 	bl	8008c9c <__smakebuf_r>
 800747a:	89a0      	ldrh	r0, [r4, #12]
 800747c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007480:	f010 0301 	ands.w	r3, r0, #1
 8007484:	d00a      	beq.n	800749c <__swsetup_r+0xbc>
 8007486:	2300      	movs	r3, #0
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	6963      	ldr	r3, [r4, #20]
 800748c:	425b      	negs	r3, r3
 800748e:	61a3      	str	r3, [r4, #24]
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	b943      	cbnz	r3, 80074a6 <__swsetup_r+0xc6>
 8007494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007498:	d1ba      	bne.n	8007410 <__swsetup_r+0x30>
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	0781      	lsls	r1, r0, #30
 800749e:	bf58      	it	pl
 80074a0:	6963      	ldrpl	r3, [r4, #20]
 80074a2:	60a3      	str	r3, [r4, #8]
 80074a4:	e7f4      	b.n	8007490 <__swsetup_r+0xb0>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e7f7      	b.n	800749a <__swsetup_r+0xba>
 80074aa:	bf00      	nop
 80074ac:	2000001c 	.word	0x2000001c
 80074b0:	0800a3ac 	.word	0x0800a3ac
 80074b4:	0800a3cc 	.word	0x0800a3cc
 80074b8:	0800a38c 	.word	0x0800a38c

080074bc <__assert_func>:
 80074bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074be:	4614      	mov	r4, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <__assert_func+0x2c>)
 80074c4:	4605      	mov	r5, r0
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68d8      	ldr	r0, [r3, #12]
 80074ca:	b14c      	cbz	r4, 80074e0 <__assert_func+0x24>
 80074cc:	4b07      	ldr	r3, [pc, #28]	; (80074ec <__assert_func+0x30>)
 80074ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074d2:	9100      	str	r1, [sp, #0]
 80074d4:	462b      	mov	r3, r5
 80074d6:	4906      	ldr	r1, [pc, #24]	; (80074f0 <__assert_func+0x34>)
 80074d8:	f001 f81c 	bl	8008514 <fiprintf>
 80074dc:	f002 fc54 	bl	8009d88 <abort>
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <__assert_func+0x38>)
 80074e2:	461c      	mov	r4, r3
 80074e4:	e7f3      	b.n	80074ce <__assert_func+0x12>
 80074e6:	bf00      	nop
 80074e8:	2000001c 	.word	0x2000001c
 80074ec:	0800a1d4 	.word	0x0800a1d4
 80074f0:	0800a1e1 	.word	0x0800a1e1
 80074f4:	0800a20f 	.word	0x0800a20f

080074f8 <quorem>:
 80074f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	6903      	ldr	r3, [r0, #16]
 80074fe:	690c      	ldr	r4, [r1, #16]
 8007500:	4607      	mov	r7, r0
 8007502:	42a3      	cmp	r3, r4
 8007504:	f2c0 8082 	blt.w	800760c <quorem+0x114>
 8007508:	3c01      	subs	r4, #1
 800750a:	f100 0514 	add.w	r5, r0, #20
 800750e:	f101 0814 	add.w	r8, r1, #20
 8007512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800751c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007520:	3301      	adds	r3, #1
 8007522:	429a      	cmp	r2, r3
 8007524:	fbb2 f6f3 	udiv	r6, r2, r3
 8007528:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800752c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007530:	d331      	bcc.n	8007596 <quorem+0x9e>
 8007532:	f04f 0e00 	mov.w	lr, #0
 8007536:	4640      	mov	r0, r8
 8007538:	46ac      	mov	ip, r5
 800753a:	46f2      	mov	sl, lr
 800753c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007540:	b293      	uxth	r3, r2
 8007542:	fb06 e303 	mla	r3, r6, r3, lr
 8007546:	0c12      	lsrs	r2, r2, #16
 8007548:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800754c:	b29b      	uxth	r3, r3
 800754e:	fb06 e202 	mla	r2, r6, r2, lr
 8007552:	ebaa 0303 	sub.w	r3, sl, r3
 8007556:	f8dc a000 	ldr.w	sl, [ip]
 800755a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800755e:	fa1f fa8a 	uxth.w	sl, sl
 8007562:	4453      	add	r3, sl
 8007564:	f8dc a000 	ldr.w	sl, [ip]
 8007568:	b292      	uxth	r2, r2
 800756a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800756e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007578:	4581      	cmp	r9, r0
 800757a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800757e:	f84c 3b04 	str.w	r3, [ip], #4
 8007582:	d2db      	bcs.n	800753c <quorem+0x44>
 8007584:	f855 300b 	ldr.w	r3, [r5, fp]
 8007588:	b92b      	cbnz	r3, 8007596 <quorem+0x9e>
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	3b04      	subs	r3, #4
 800758e:	429d      	cmp	r5, r3
 8007590:	461a      	mov	r2, r3
 8007592:	d32f      	bcc.n	80075f4 <quorem+0xfc>
 8007594:	613c      	str	r4, [r7, #16]
 8007596:	4638      	mov	r0, r7
 8007598:	f001 fec2 	bl	8009320 <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	db25      	blt.n	80075ec <quorem+0xf4>
 80075a0:	4628      	mov	r0, r5
 80075a2:	f04f 0c00 	mov.w	ip, #0
 80075a6:	3601      	adds	r6, #1
 80075a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80075ac:	f8d0 e000 	ldr.w	lr, [r0]
 80075b0:	b28b      	uxth	r3, r1
 80075b2:	ebac 0303 	sub.w	r3, ip, r3
 80075b6:	fa1f f28e 	uxth.w	r2, lr
 80075ba:	4413      	add	r3, r2
 80075bc:	0c0a      	lsrs	r2, r1, #16
 80075be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075cc:	45c1      	cmp	r9, r8
 80075ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d2:	f840 3b04 	str.w	r3, [r0], #4
 80075d6:	d2e7      	bcs.n	80075a8 <quorem+0xb0>
 80075d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e0:	b922      	cbnz	r2, 80075ec <quorem+0xf4>
 80075e2:	3b04      	subs	r3, #4
 80075e4:	429d      	cmp	r5, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	d30a      	bcc.n	8007600 <quorem+0x108>
 80075ea:	613c      	str	r4, [r7, #16]
 80075ec:	4630      	mov	r0, r6
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d1cb      	bne.n	8007594 <quorem+0x9c>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	e7c6      	b.n	800758e <quorem+0x96>
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	3b04      	subs	r3, #4
 8007604:	2a00      	cmp	r2, #0
 8007606:	d1f0      	bne.n	80075ea <quorem+0xf2>
 8007608:	3c01      	subs	r4, #1
 800760a:	e7eb      	b.n	80075e4 <quorem+0xec>
 800760c:	2000      	movs	r0, #0
 800760e:	e7ee      	b.n	80075ee <quorem+0xf6>

08007610 <_dtoa_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	4616      	mov	r6, r2
 8007616:	461f      	mov	r7, r3
 8007618:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800761a:	b099      	sub	sp, #100	; 0x64
 800761c:	4605      	mov	r5, r0
 800761e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007622:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007626:	b974      	cbnz	r4, 8007646 <_dtoa_r+0x36>
 8007628:	2010      	movs	r0, #16
 800762a:	f7fe f955 	bl	80058d8 <malloc>
 800762e:	4602      	mov	r2, r0
 8007630:	6268      	str	r0, [r5, #36]	; 0x24
 8007632:	b920      	cbnz	r0, 800763e <_dtoa_r+0x2e>
 8007634:	21ea      	movs	r1, #234	; 0xea
 8007636:	4ba8      	ldr	r3, [pc, #672]	; (80078d8 <_dtoa_r+0x2c8>)
 8007638:	48a8      	ldr	r0, [pc, #672]	; (80078dc <_dtoa_r+0x2cc>)
 800763a:	f7ff ff3f 	bl	80074bc <__assert_func>
 800763e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007642:	6004      	str	r4, [r0, #0]
 8007644:	60c4      	str	r4, [r0, #12]
 8007646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	b151      	cbz	r1, 8007662 <_dtoa_r+0x52>
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	2301      	movs	r3, #1
 8007650:	4093      	lsls	r3, r2
 8007652:	604a      	str	r2, [r1, #4]
 8007654:	608b      	str	r3, [r1, #8]
 8007656:	4628      	mov	r0, r5
 8007658:	f001 fbda 	bl	8008e10 <_Bfree>
 800765c:	2200      	movs	r2, #0
 800765e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	1e3b      	subs	r3, r7, #0
 8007664:	bfaf      	iteee	ge
 8007666:	2300      	movge	r3, #0
 8007668:	2201      	movlt	r2, #1
 800766a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800766e:	9305      	strlt	r3, [sp, #20]
 8007670:	bfa8      	it	ge
 8007672:	f8c8 3000 	strge.w	r3, [r8]
 8007676:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800767a:	4b99      	ldr	r3, [pc, #612]	; (80078e0 <_dtoa_r+0x2d0>)
 800767c:	bfb8      	it	lt
 800767e:	f8c8 2000 	strlt.w	r2, [r8]
 8007682:	ea33 0309 	bics.w	r3, r3, r9
 8007686:	d119      	bne.n	80076bc <_dtoa_r+0xac>
 8007688:	f242 730f 	movw	r3, #9999	; 0x270f
 800768c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007694:	4333      	orrs	r3, r6
 8007696:	f000 857f 	beq.w	8008198 <_dtoa_r+0xb88>
 800769a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800769c:	b953      	cbnz	r3, 80076b4 <_dtoa_r+0xa4>
 800769e:	4b91      	ldr	r3, [pc, #580]	; (80078e4 <_dtoa_r+0x2d4>)
 80076a0:	e022      	b.n	80076e8 <_dtoa_r+0xd8>
 80076a2:	4b91      	ldr	r3, [pc, #580]	; (80078e8 <_dtoa_r+0x2d8>)
 80076a4:	9303      	str	r3, [sp, #12]
 80076a6:	3308      	adds	r3, #8
 80076a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	9803      	ldr	r0, [sp, #12]
 80076ae:	b019      	add	sp, #100	; 0x64
 80076b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b4:	4b8b      	ldr	r3, [pc, #556]	; (80078e4 <_dtoa_r+0x2d4>)
 80076b6:	9303      	str	r3, [sp, #12]
 80076b8:	3303      	adds	r3, #3
 80076ba:	e7f5      	b.n	80076a8 <_dtoa_r+0x98>
 80076bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80076c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 f976 	bl	80009bc <__aeabi_dcmpeq>
 80076d0:	4680      	mov	r8, r0
 80076d2:	b158      	cbz	r0, 80076ec <_dtoa_r+0xdc>
 80076d4:	2301      	movs	r3, #1
 80076d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8558 	beq.w	8008192 <_dtoa_r+0xb82>
 80076e2:	4882      	ldr	r0, [pc, #520]	; (80078ec <_dtoa_r+0x2dc>)
 80076e4:	6018      	str	r0, [r3, #0]
 80076e6:	1e43      	subs	r3, r0, #1
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	e7df      	b.n	80076ac <_dtoa_r+0x9c>
 80076ec:	ab16      	add	r3, sp, #88	; 0x58
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	ab17      	add	r3, sp, #92	; 0x5c
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4628      	mov	r0, r5
 80076f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076fa:	f001 ff33 	bl	8009564 <__d2b>
 80076fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007702:	4683      	mov	fp, r0
 8007704:	2c00      	cmp	r4, #0
 8007706:	d07f      	beq.n	8007808 <_dtoa_r+0x1f8>
 8007708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007716:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800771a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800771e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007722:	2200      	movs	r2, #0
 8007724:	4b72      	ldr	r3, [pc, #456]	; (80078f0 <_dtoa_r+0x2e0>)
 8007726:	f7f8 fd29 	bl	800017c <__aeabi_dsub>
 800772a:	a365      	add	r3, pc, #404	; (adr r3, 80078c0 <_dtoa_r+0x2b0>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fedc 	bl	80004ec <__aeabi_dmul>
 8007734:	a364      	add	r3, pc, #400	; (adr r3, 80078c8 <_dtoa_r+0x2b8>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f8 fd21 	bl	8000180 <__adddf3>
 800773e:	4606      	mov	r6, r0
 8007740:	4620      	mov	r0, r4
 8007742:	460f      	mov	r7, r1
 8007744:	f7f8 fe68 	bl	8000418 <__aeabi_i2d>
 8007748:	a361      	add	r3, pc, #388	; (adr r3, 80078d0 <_dtoa_r+0x2c0>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	f7f8 fecd 	bl	80004ec <__aeabi_dmul>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f8 fd11 	bl	8000180 <__adddf3>
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	f7f9 f973 	bl	8000a4c <__aeabi_d2iz>
 8007766:	2200      	movs	r2, #0
 8007768:	4682      	mov	sl, r0
 800776a:	2300      	movs	r3, #0
 800776c:	4630      	mov	r0, r6
 800776e:	4639      	mov	r1, r7
 8007770:	f7f9 f92e 	bl	80009d0 <__aeabi_dcmplt>
 8007774:	b148      	cbz	r0, 800778a <_dtoa_r+0x17a>
 8007776:	4650      	mov	r0, sl
 8007778:	f7f8 fe4e 	bl	8000418 <__aeabi_i2d>
 800777c:	4632      	mov	r2, r6
 800777e:	463b      	mov	r3, r7
 8007780:	f7f9 f91c 	bl	80009bc <__aeabi_dcmpeq>
 8007784:	b908      	cbnz	r0, 800778a <_dtoa_r+0x17a>
 8007786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800778a:	f1ba 0f16 	cmp.w	sl, #22
 800778e:	d858      	bhi.n	8007842 <_dtoa_r+0x232>
 8007790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007794:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <_dtoa_r+0x2e4>)
 8007796:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f9 f917 	bl	80009d0 <__aeabi_dcmplt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d04f      	beq.n	8007846 <_dtoa_r+0x236>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80077b0:	1b1c      	subs	r4, r3, r4
 80077b2:	1e63      	subs	r3, r4, #1
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	bf49      	itett	mi
 80077b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80077bc:	2300      	movpl	r3, #0
 80077be:	9306      	strmi	r3, [sp, #24]
 80077c0:	2300      	movmi	r3, #0
 80077c2:	bf54      	ite	pl
 80077c4:	9306      	strpl	r3, [sp, #24]
 80077c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80077c8:	f1ba 0f00 	cmp.w	sl, #0
 80077cc:	db3d      	blt.n	800784a <_dtoa_r+0x23a>
 80077ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077d4:	4453      	add	r3, sl
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	2300      	movs	r3, #0
 80077da:	930a      	str	r3, [sp, #40]	; 0x28
 80077dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077de:	2b09      	cmp	r3, #9
 80077e0:	f200 808c 	bhi.w	80078fc <_dtoa_r+0x2ec>
 80077e4:	2b05      	cmp	r3, #5
 80077e6:	bfc4      	itt	gt
 80077e8:	3b04      	subgt	r3, #4
 80077ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80077ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077ee:	bfc8      	it	gt
 80077f0:	2400      	movgt	r4, #0
 80077f2:	f1a3 0302 	sub.w	r3, r3, #2
 80077f6:	bfd8      	it	le
 80077f8:	2401      	movle	r4, #1
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	f200 808a 	bhi.w	8007914 <_dtoa_r+0x304>
 8007800:	e8df f003 	tbb	[pc, r3]
 8007804:	5b4d4f2d 	.word	0x5b4d4f2d
 8007808:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800780c:	441c      	add	r4, r3
 800780e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007812:	2b20      	cmp	r3, #32
 8007814:	bfc3      	ittte	gt
 8007816:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800781a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800781e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007822:	f1c3 0320 	rsble	r3, r3, #32
 8007826:	bfc6      	itte	gt
 8007828:	fa26 f000 	lsrgt.w	r0, r6, r0
 800782c:	4318      	orrgt	r0, r3
 800782e:	fa06 f003 	lslle.w	r0, r6, r3
 8007832:	f7f8 fde1 	bl	80003f8 <__aeabi_ui2d>
 8007836:	2301      	movs	r3, #1
 8007838:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800783c:	3c01      	subs	r4, #1
 800783e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007840:	e76f      	b.n	8007722 <_dtoa_r+0x112>
 8007842:	2301      	movs	r3, #1
 8007844:	e7b2      	b.n	80077ac <_dtoa_r+0x19c>
 8007846:	900f      	str	r0, [sp, #60]	; 0x3c
 8007848:	e7b1      	b.n	80077ae <_dtoa_r+0x19e>
 800784a:	9b06      	ldr	r3, [sp, #24]
 800784c:	eba3 030a 	sub.w	r3, r3, sl
 8007850:	9306      	str	r3, [sp, #24]
 8007852:	f1ca 0300 	rsb	r3, sl, #0
 8007856:	930a      	str	r3, [sp, #40]	; 0x28
 8007858:	2300      	movs	r3, #0
 800785a:	930e      	str	r3, [sp, #56]	; 0x38
 800785c:	e7be      	b.n	80077dc <_dtoa_r+0x1cc>
 800785e:	2300      	movs	r3, #0
 8007860:	930b      	str	r3, [sp, #44]	; 0x2c
 8007862:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc58      	bgt.n	800791a <_dtoa_r+0x30a>
 8007868:	f04f 0901 	mov.w	r9, #1
 800786c:	464b      	mov	r3, r9
 800786e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007872:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007876:	2200      	movs	r2, #0
 8007878:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800787a:	6042      	str	r2, [r0, #4]
 800787c:	2204      	movs	r2, #4
 800787e:	f102 0614 	add.w	r6, r2, #20
 8007882:	429e      	cmp	r6, r3
 8007884:	6841      	ldr	r1, [r0, #4]
 8007886:	d94e      	bls.n	8007926 <_dtoa_r+0x316>
 8007888:	4628      	mov	r0, r5
 800788a:	f001 fa81 	bl	8008d90 <_Balloc>
 800788e:	9003      	str	r0, [sp, #12]
 8007890:	2800      	cmp	r0, #0
 8007892:	d14c      	bne.n	800792e <_dtoa_r+0x31e>
 8007894:	4602      	mov	r2, r0
 8007896:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <_dtoa_r+0x2e8>)
 800789c:	e6cc      	b.n	8007638 <_dtoa_r+0x28>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7de      	b.n	8007860 <_dtoa_r+0x250>
 80078a2:	2300      	movs	r3, #0
 80078a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078a8:	eb0a 0903 	add.w	r9, sl, r3
 80078ac:	f109 0301 	add.w	r3, r9, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	bfb8      	it	lt
 80078b6:	2301      	movlt	r3, #1
 80078b8:	e7dd      	b.n	8007876 <_dtoa_r+0x266>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7f2      	b.n	80078a4 <_dtoa_r+0x294>
 80078be:	bf00      	nop
 80078c0:	636f4361 	.word	0x636f4361
 80078c4:	3fd287a7 	.word	0x3fd287a7
 80078c8:	8b60c8b3 	.word	0x8b60c8b3
 80078cc:	3fc68a28 	.word	0x3fc68a28
 80078d0:	509f79fb 	.word	0x509f79fb
 80078d4:	3fd34413 	.word	0x3fd34413
 80078d8:	0800a160 	.word	0x0800a160
 80078dc:	0800a31e 	.word	0x0800a31e
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	0800a31a 	.word	0x0800a31a
 80078e8:	0800a311 	.word	0x0800a311
 80078ec:	0800a0ed 	.word	0x0800a0ed
 80078f0:	3ff80000 	.word	0x3ff80000
 80078f4:	0800a4f0 	.word	0x0800a4f0
 80078f8:	0800a379 	.word	0x0800a379
 80078fc:	2401      	movs	r4, #1
 80078fe:	2300      	movs	r3, #0
 8007900:	940b      	str	r4, [sp, #44]	; 0x2c
 8007902:	9322      	str	r3, [sp, #136]	; 0x88
 8007904:	f04f 39ff 	mov.w	r9, #4294967295
 8007908:	2200      	movs	r2, #0
 800790a:	2312      	movs	r3, #18
 800790c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007910:	9223      	str	r2, [sp, #140]	; 0x8c
 8007912:	e7b0      	b.n	8007876 <_dtoa_r+0x266>
 8007914:	2301      	movs	r3, #1
 8007916:	930b      	str	r3, [sp, #44]	; 0x2c
 8007918:	e7f4      	b.n	8007904 <_dtoa_r+0x2f4>
 800791a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800791e:	464b      	mov	r3, r9
 8007920:	f8cd 9020 	str.w	r9, [sp, #32]
 8007924:	e7a7      	b.n	8007876 <_dtoa_r+0x266>
 8007926:	3101      	adds	r1, #1
 8007928:	6041      	str	r1, [r0, #4]
 800792a:	0052      	lsls	r2, r2, #1
 800792c:	e7a7      	b.n	800787e <_dtoa_r+0x26e>
 800792e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007930:	9a03      	ldr	r2, [sp, #12]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	2b0e      	cmp	r3, #14
 8007938:	f200 80a8 	bhi.w	8007a8c <_dtoa_r+0x47c>
 800793c:	2c00      	cmp	r4, #0
 800793e:	f000 80a5 	beq.w	8007a8c <_dtoa_r+0x47c>
 8007942:	f1ba 0f00 	cmp.w	sl, #0
 8007946:	dd34      	ble.n	80079b2 <_dtoa_r+0x3a2>
 8007948:	4a9a      	ldr	r2, [pc, #616]	; (8007bb4 <_dtoa_r+0x5a4>)
 800794a:	f00a 030f 	and.w	r3, sl, #15
 800794e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007952:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800795a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800795e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007962:	d016      	beq.n	8007992 <_dtoa_r+0x382>
 8007964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007968:	4b93      	ldr	r3, [pc, #588]	; (8007bb8 <_dtoa_r+0x5a8>)
 800796a:	2703      	movs	r7, #3
 800796c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007970:	f7f8 fee6 	bl	8000740 <__aeabi_ddiv>
 8007974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007978:	f004 040f 	and.w	r4, r4, #15
 800797c:	4e8e      	ldr	r6, [pc, #568]	; (8007bb8 <_dtoa_r+0x5a8>)
 800797e:	b954      	cbnz	r4, 8007996 <_dtoa_r+0x386>
 8007980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007988:	f7f8 feda 	bl	8000740 <__aeabi_ddiv>
 800798c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007990:	e029      	b.n	80079e6 <_dtoa_r+0x3d6>
 8007992:	2702      	movs	r7, #2
 8007994:	e7f2      	b.n	800797c <_dtoa_r+0x36c>
 8007996:	07e1      	lsls	r1, r4, #31
 8007998:	d508      	bpl.n	80079ac <_dtoa_r+0x39c>
 800799a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800799e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079a2:	f7f8 fda3 	bl	80004ec <__aeabi_dmul>
 80079a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079aa:	3701      	adds	r7, #1
 80079ac:	1064      	asrs	r4, r4, #1
 80079ae:	3608      	adds	r6, #8
 80079b0:	e7e5      	b.n	800797e <_dtoa_r+0x36e>
 80079b2:	f000 80a5 	beq.w	8007b00 <_dtoa_r+0x4f0>
 80079b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079ba:	f1ca 0400 	rsb	r4, sl, #0
 80079be:	4b7d      	ldr	r3, [pc, #500]	; (8007bb4 <_dtoa_r+0x5a4>)
 80079c0:	f004 020f 	and.w	r2, r4, #15
 80079c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f7f8 fd8e 	bl	80004ec <__aeabi_dmul>
 80079d0:	2702      	movs	r7, #2
 80079d2:	2300      	movs	r3, #0
 80079d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d8:	4e77      	ldr	r6, [pc, #476]	; (8007bb8 <_dtoa_r+0x5a8>)
 80079da:	1124      	asrs	r4, r4, #4
 80079dc:	2c00      	cmp	r4, #0
 80079de:	f040 8084 	bne.w	8007aea <_dtoa_r+0x4da>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1d2      	bne.n	800798c <_dtoa_r+0x37c>
 80079e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 808b 	beq.w	8007b04 <_dtoa_r+0x4f4>
 80079ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079fa:	2200      	movs	r2, #0
 80079fc:	4b6f      	ldr	r3, [pc, #444]	; (8007bbc <_dtoa_r+0x5ac>)
 80079fe:	f7f8 ffe7 	bl	80009d0 <__aeabi_dcmplt>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d07e      	beq.n	8007b04 <_dtoa_r+0x4f4>
 8007a06:	9b08      	ldr	r3, [sp, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d07b      	beq.n	8007b04 <_dtoa_r+0x4f4>
 8007a0c:	f1b9 0f00 	cmp.w	r9, #0
 8007a10:	dd38      	ble.n	8007a84 <_dtoa_r+0x474>
 8007a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a16:	2200      	movs	r2, #0
 8007a18:	4b69      	ldr	r3, [pc, #420]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007a1a:	f7f8 fd67 	bl	80004ec <__aeabi_dmul>
 8007a1e:	464c      	mov	r4, r9
 8007a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a24:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007a28:	3701      	adds	r7, #1
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f7f8 fcf4 	bl	8000418 <__aeabi_i2d>
 8007a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a34:	f7f8 fd5a 	bl	80004ec <__aeabi_dmul>
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4b62      	ldr	r3, [pc, #392]	; (8007bc4 <_dtoa_r+0x5b4>)
 8007a3c:	f7f8 fba0 	bl	8000180 <__adddf3>
 8007a40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a48:	9611      	str	r6, [sp, #68]	; 0x44
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d15d      	bne.n	8007b0a <_dtoa_r+0x4fa>
 8007a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a52:	2200      	movs	r2, #0
 8007a54:	4b5c      	ldr	r3, [pc, #368]	; (8007bc8 <_dtoa_r+0x5b8>)
 8007a56:	f7f8 fb91 	bl	800017c <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a62:	4633      	mov	r3, r6
 8007a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a66:	f7f8 ffd1 	bl	8000a0c <__aeabi_dcmpgt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 829c 	bne.w	8007fa8 <_dtoa_r+0x998>
 8007a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a7a:	f7f8 ffa9 	bl	80009d0 <__aeabi_dcmplt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f040 8290 	bne.w	8007fa4 <_dtoa_r+0x994>
 8007a84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007a88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f2c0 8152 	blt.w	8007d38 <_dtoa_r+0x728>
 8007a94:	f1ba 0f0e 	cmp.w	sl, #14
 8007a98:	f300 814e 	bgt.w	8007d38 <_dtoa_r+0x728>
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <_dtoa_r+0x5a4>)
 8007a9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007aa6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f280 80db 	bge.w	8007c68 <_dtoa_r+0x658>
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f300 80d7 	bgt.w	8007c68 <_dtoa_r+0x658>
 8007aba:	f040 8272 	bne.w	8007fa2 <_dtoa_r+0x992>
 8007abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4b40      	ldr	r3, [pc, #256]	; (8007bc8 <_dtoa_r+0x5b8>)
 8007ac6:	f7f8 fd11 	bl	80004ec <__aeabi_dmul>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	f7f8 ff93 	bl	80009f8 <__aeabi_dcmpge>
 8007ad2:	9c08      	ldr	r4, [sp, #32]
 8007ad4:	4626      	mov	r6, r4
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f040 8248 	bne.w	8007f6c <_dtoa_r+0x95c>
 8007adc:	2331      	movs	r3, #49	; 0x31
 8007ade:	9f03      	ldr	r7, [sp, #12]
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	f807 3b01 	strb.w	r3, [r7], #1
 8007ae8:	e244      	b.n	8007f74 <_dtoa_r+0x964>
 8007aea:	07e2      	lsls	r2, r4, #31
 8007aec:	d505      	bpl.n	8007afa <_dtoa_r+0x4ea>
 8007aee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af2:	f7f8 fcfb 	bl	80004ec <__aeabi_dmul>
 8007af6:	2301      	movs	r3, #1
 8007af8:	3701      	adds	r7, #1
 8007afa:	1064      	asrs	r4, r4, #1
 8007afc:	3608      	adds	r6, #8
 8007afe:	e76d      	b.n	80079dc <_dtoa_r+0x3cc>
 8007b00:	2702      	movs	r7, #2
 8007b02:	e770      	b.n	80079e6 <_dtoa_r+0x3d6>
 8007b04:	46d0      	mov	r8, sl
 8007b06:	9c08      	ldr	r4, [sp, #32]
 8007b08:	e78f      	b.n	8007a2a <_dtoa_r+0x41a>
 8007b0a:	9903      	ldr	r1, [sp, #12]
 8007b0c:	4b29      	ldr	r3, [pc, #164]	; (8007bb4 <_dtoa_r+0x5a4>)
 8007b0e:	4421      	add	r1, r4
 8007b10:	9112      	str	r1, [sp, #72]	; 0x48
 8007b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b20:	2900      	cmp	r1, #0
 8007b22:	d055      	beq.n	8007bd0 <_dtoa_r+0x5c0>
 8007b24:	2000      	movs	r0, #0
 8007b26:	4929      	ldr	r1, [pc, #164]	; (8007bcc <_dtoa_r+0x5bc>)
 8007b28:	f7f8 fe0a 	bl	8000740 <__aeabi_ddiv>
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	4632      	mov	r2, r6
 8007b30:	f7f8 fb24 	bl	800017c <__aeabi_dsub>
 8007b34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b38:	9f03      	ldr	r7, [sp, #12]
 8007b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b3e:	f7f8 ff85 	bl	8000a4c <__aeabi_d2iz>
 8007b42:	4604      	mov	r4, r0
 8007b44:	f7f8 fc68 	bl	8000418 <__aeabi_i2d>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b50:	f7f8 fb14 	bl	800017c <__aeabi_dsub>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	3430      	adds	r4, #48	; 0x30
 8007b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b62:	f807 4b01 	strb.w	r4, [r7], #1
 8007b66:	f7f8 ff33 	bl	80009d0 <__aeabi_dcmplt>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d174      	bne.n	8007c58 <_dtoa_r+0x648>
 8007b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b72:	2000      	movs	r0, #0
 8007b74:	4911      	ldr	r1, [pc, #68]	; (8007bbc <_dtoa_r+0x5ac>)
 8007b76:	f7f8 fb01 	bl	800017c <__aeabi_dsub>
 8007b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b7e:	f7f8 ff27 	bl	80009d0 <__aeabi_dcmplt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f040 80b7 	bne.w	8007cf6 <_dtoa_r+0x6e6>
 8007b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b8a:	429f      	cmp	r7, r3
 8007b8c:	f43f af7a 	beq.w	8007a84 <_dtoa_r+0x474>
 8007b90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b94:	2200      	movs	r2, #0
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007b98:	f7f8 fca8 	bl	80004ec <__aeabi_dmul>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <_dtoa_r+0x5b0>)
 8007ba8:	f7f8 fca0 	bl	80004ec <__aeabi_dmul>
 8007bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb0:	e7c3      	b.n	8007b3a <_dtoa_r+0x52a>
 8007bb2:	bf00      	nop
 8007bb4:	0800a4f0 	.word	0x0800a4f0
 8007bb8:	0800a4c8 	.word	0x0800a4c8
 8007bbc:	3ff00000 	.word	0x3ff00000
 8007bc0:	40240000 	.word	0x40240000
 8007bc4:	401c0000 	.word	0x401c0000
 8007bc8:	40140000 	.word	0x40140000
 8007bcc:	3fe00000 	.word	0x3fe00000
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 fc8a 	bl	80004ec <__aeabi_dmul>
 8007bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bde:	9c03      	ldr	r4, [sp, #12]
 8007be0:	9314      	str	r3, [sp, #80]	; 0x50
 8007be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be6:	f7f8 ff31 	bl	8000a4c <__aeabi_d2iz>
 8007bea:	9015      	str	r0, [sp, #84]	; 0x54
 8007bec:	f7f8 fc14 	bl	8000418 <__aeabi_i2d>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf8:	f7f8 fac0 	bl	800017c <__aeabi_dsub>
 8007bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bfe:	4606      	mov	r6, r0
 8007c00:	3330      	adds	r3, #48	; 0x30
 8007c02:	f804 3b01 	strb.w	r3, [r4], #1
 8007c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c08:	460f      	mov	r7, r1
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	d124      	bne.n	8007c5c <_dtoa_r+0x64c>
 8007c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c16:	4bb0      	ldr	r3, [pc, #704]	; (8007ed8 <_dtoa_r+0x8c8>)
 8007c18:	f7f8 fab2 	bl	8000180 <__adddf3>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4630      	mov	r0, r6
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 fef2 	bl	8000a0c <__aeabi_dcmpgt>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d163      	bne.n	8007cf4 <_dtoa_r+0x6e4>
 8007c2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c30:	2000      	movs	r0, #0
 8007c32:	49a9      	ldr	r1, [pc, #676]	; (8007ed8 <_dtoa_r+0x8c8>)
 8007c34:	f7f8 faa2 	bl	800017c <__aeabi_dsub>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 fec6 	bl	80009d0 <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f43f af1d 	beq.w	8007a84 <_dtoa_r+0x474>
 8007c4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007c4c:	1e7b      	subs	r3, r7, #1
 8007c4e:	9314      	str	r3, [sp, #80]	; 0x50
 8007c50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007c54:	2b30      	cmp	r3, #48	; 0x30
 8007c56:	d0f8      	beq.n	8007c4a <_dtoa_r+0x63a>
 8007c58:	46c2      	mov	sl, r8
 8007c5a:	e03b      	b.n	8007cd4 <_dtoa_r+0x6c4>
 8007c5c:	4b9f      	ldr	r3, [pc, #636]	; (8007edc <_dtoa_r+0x8cc>)
 8007c5e:	f7f8 fc45 	bl	80004ec <__aeabi_dmul>
 8007c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c66:	e7bc      	b.n	8007be2 <_dtoa_r+0x5d2>
 8007c68:	9f03      	ldr	r7, [sp, #12]
 8007c6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 fd63 	bl	8000740 <__aeabi_ddiv>
 8007c7a:	f7f8 fee7 	bl	8000a4c <__aeabi_d2iz>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	f7f8 fbca 	bl	8000418 <__aeabi_i2d>
 8007c84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c88:	f7f8 fc30 	bl	80004ec <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4640      	mov	r0, r8
 8007c92:	4649      	mov	r1, r9
 8007c94:	f7f8 fa72 	bl	800017c <__aeabi_dsub>
 8007c98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007c9c:	f807 6b01 	strb.w	r6, [r7], #1
 8007ca0:	9e03      	ldr	r6, [sp, #12]
 8007ca2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ca6:	1bbe      	subs	r6, r7, r6
 8007ca8:	45b4      	cmp	ip, r6
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	d136      	bne.n	8007d1e <_dtoa_r+0x70e>
 8007cb0:	f7f8 fa66 	bl	8000180 <__adddf3>
 8007cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4689      	mov	r9, r1
 8007cbc:	f7f8 fea6 	bl	8000a0c <__aeabi_dcmpgt>
 8007cc0:	bb58      	cbnz	r0, 8007d1a <_dtoa_r+0x70a>
 8007cc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 fe77 	bl	80009bc <__aeabi_dcmpeq>
 8007cce:	b108      	cbz	r0, 8007cd4 <_dtoa_r+0x6c4>
 8007cd0:	07e1      	lsls	r1, r4, #31
 8007cd2:	d422      	bmi.n	8007d1a <_dtoa_r+0x70a>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	4659      	mov	r1, fp
 8007cd8:	f001 f89a 	bl	8008e10 <_Bfree>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	703b      	strb	r3, [r7, #0]
 8007ce0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ce2:	f10a 0001 	add.w	r0, sl, #1
 8007ce6:	6018      	str	r0, [r3, #0]
 8007ce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f43f acde 	beq.w	80076ac <_dtoa_r+0x9c>
 8007cf0:	601f      	str	r7, [r3, #0]
 8007cf2:	e4db      	b.n	80076ac <_dtoa_r+0x9c>
 8007cf4:	4627      	mov	r7, r4
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	461f      	mov	r7, r3
 8007cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cfe:	2a39      	cmp	r2, #57	; 0x39
 8007d00:	d107      	bne.n	8007d12 <_dtoa_r+0x702>
 8007d02:	9a03      	ldr	r2, [sp, #12]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d1f7      	bne.n	8007cf8 <_dtoa_r+0x6e8>
 8007d08:	2230      	movs	r2, #48	; 0x30
 8007d0a:	9903      	ldr	r1, [sp, #12]
 8007d0c:	f108 0801 	add.w	r8, r8, #1
 8007d10:	700a      	strb	r2, [r1, #0]
 8007d12:	781a      	ldrb	r2, [r3, #0]
 8007d14:	3201      	adds	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
 8007d18:	e79e      	b.n	8007c58 <_dtoa_r+0x648>
 8007d1a:	46d0      	mov	r8, sl
 8007d1c:	e7eb      	b.n	8007cf6 <_dtoa_r+0x6e6>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4b6e      	ldr	r3, [pc, #440]	; (8007edc <_dtoa_r+0x8cc>)
 8007d22:	f7f8 fbe3 	bl	80004ec <__aeabi_dmul>
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	f7f8 fe45 	bl	80009bc <__aeabi_dcmpeq>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d09b      	beq.n	8007c6e <_dtoa_r+0x65e>
 8007d36:	e7cd      	b.n	8007cd4 <_dtoa_r+0x6c4>
 8007d38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	f000 80d0 	beq.w	8007ee0 <_dtoa_r+0x8d0>
 8007d40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d42:	2a01      	cmp	r2, #1
 8007d44:	f300 80ae 	bgt.w	8007ea4 <_dtoa_r+0x894>
 8007d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f000 80a6 	beq.w	8007e9c <_dtoa_r+0x88c>
 8007d50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d56:	9f06      	ldr	r7, [sp, #24]
 8007d58:	9a06      	ldr	r2, [sp, #24]
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	441a      	add	r2, r3
 8007d5e:	9206      	str	r2, [sp, #24]
 8007d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d62:	4628      	mov	r0, r5
 8007d64:	441a      	add	r2, r3
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	f001 f952 	bl	8009010 <__i2b>
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	2f00      	cmp	r7, #0
 8007d70:	dd0c      	ble.n	8007d8c <_dtoa_r+0x77c>
 8007d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd09      	ble.n	8007d8c <_dtoa_r+0x77c>
 8007d78:	42bb      	cmp	r3, r7
 8007d7a:	bfa8      	it	ge
 8007d7c:	463b      	movge	r3, r7
 8007d7e:	9a06      	ldr	r2, [sp, #24]
 8007d80:	1aff      	subs	r7, r7, r3
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	9206      	str	r2, [sp, #24]
 8007d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8e:	b1f3      	cbz	r3, 8007dce <_dtoa_r+0x7be>
 8007d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80a8 	beq.w	8007ee8 <_dtoa_r+0x8d8>
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	dd10      	ble.n	8007dbe <_dtoa_r+0x7ae>
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f001 f9f3 	bl	800918c <__pow5mult>
 8007da6:	465a      	mov	r2, fp
 8007da8:	4601      	mov	r1, r0
 8007daa:	4606      	mov	r6, r0
 8007dac:	4628      	mov	r0, r5
 8007dae:	f001 f945 	bl	800903c <__multiply>
 8007db2:	4680      	mov	r8, r0
 8007db4:	4659      	mov	r1, fp
 8007db6:	4628      	mov	r0, r5
 8007db8:	f001 f82a 	bl	8008e10 <_Bfree>
 8007dbc:	46c3      	mov	fp, r8
 8007dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc0:	1b1a      	subs	r2, r3, r4
 8007dc2:	d004      	beq.n	8007dce <_dtoa_r+0x7be>
 8007dc4:	4659      	mov	r1, fp
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f001 f9e0 	bl	800918c <__pow5mult>
 8007dcc:	4683      	mov	fp, r0
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f001 f91d 	bl	8009010 <__i2b>
 8007dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dd8:	4604      	mov	r4, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f340 8086 	ble.w	8007eec <_dtoa_r+0x8dc>
 8007de0:	461a      	mov	r2, r3
 8007de2:	4601      	mov	r1, r0
 8007de4:	4628      	mov	r0, r5
 8007de6:	f001 f9d1 	bl	800918c <__pow5mult>
 8007dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dec:	4604      	mov	r4, r0
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	dd7f      	ble.n	8007ef2 <_dtoa_r+0x8e2>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007dfc:	6918      	ldr	r0, [r3, #16]
 8007dfe:	f001 f8b9 	bl	8008f74 <__hi0bits>
 8007e02:	f1c0 0020 	rsb	r0, r0, #32
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	4418      	add	r0, r3
 8007e0a:	f010 001f 	ands.w	r0, r0, #31
 8007e0e:	f000 8092 	beq.w	8007f36 <_dtoa_r+0x926>
 8007e12:	f1c0 0320 	rsb	r3, r0, #32
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	f340 808a 	ble.w	8007f30 <_dtoa_r+0x920>
 8007e1c:	f1c0 001c 	rsb	r0, r0, #28
 8007e20:	9b06      	ldr	r3, [sp, #24]
 8007e22:	4407      	add	r7, r0
 8007e24:	4403      	add	r3, r0
 8007e26:	9306      	str	r3, [sp, #24]
 8007e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2a:	4403      	add	r3, r0
 8007e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2e:	9b06      	ldr	r3, [sp, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	dd05      	ble.n	8007e40 <_dtoa_r+0x830>
 8007e34:	4659      	mov	r1, fp
 8007e36:	461a      	mov	r2, r3
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f001 fa01 	bl	8009240 <__lshift>
 8007e3e:	4683      	mov	fp, r0
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dd05      	ble.n	8007e52 <_dtoa_r+0x842>
 8007e46:	4621      	mov	r1, r4
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f001 f9f8 	bl	8009240 <__lshift>
 8007e50:	4604      	mov	r4, r0
 8007e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d070      	beq.n	8007f3a <_dtoa_r+0x92a>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4658      	mov	r0, fp
 8007e5c:	f001 fa60 	bl	8009320 <__mcmp>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	da6a      	bge.n	8007f3a <_dtoa_r+0x92a>
 8007e64:	2300      	movs	r3, #0
 8007e66:	4659      	mov	r1, fp
 8007e68:	220a      	movs	r2, #10
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 fff2 	bl	8008e54 <__multadd>
 8007e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e72:	4683      	mov	fp, r0
 8007e74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8194 	beq.w	80081a6 <_dtoa_r+0xb96>
 8007e7e:	4631      	mov	r1, r6
 8007e80:	2300      	movs	r3, #0
 8007e82:	220a      	movs	r2, #10
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 ffe5 	bl	8008e54 <__multadd>
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	f300 8093 	bgt.w	8007fba <_dtoa_r+0x9aa>
 8007e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	dc57      	bgt.n	8007f4a <_dtoa_r+0x93a>
 8007e9a:	e08e      	b.n	8007fba <_dtoa_r+0x9aa>
 8007e9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ea2:	e757      	b.n	8007d54 <_dtoa_r+0x744>
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	1e5c      	subs	r4, r3, #1
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	bfb7      	itett	lt
 8007eae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007eb0:	1b1c      	subge	r4, r3, r4
 8007eb2:	1ae2      	sublt	r2, r4, r3
 8007eb4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007eb6:	bfbe      	ittt	lt
 8007eb8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007eba:	189b      	addlt	r3, r3, r2
 8007ebc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	bfb8      	it	lt
 8007ec2:	2400      	movlt	r4, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfbb      	ittet	lt
 8007ec8:	9b06      	ldrlt	r3, [sp, #24]
 8007eca:	9a08      	ldrlt	r2, [sp, #32]
 8007ecc:	9f06      	ldrge	r7, [sp, #24]
 8007ece:	1a9f      	sublt	r7, r3, r2
 8007ed0:	bfac      	ite	ge
 8007ed2:	9b08      	ldrge	r3, [sp, #32]
 8007ed4:	2300      	movlt	r3, #0
 8007ed6:	e73f      	b.n	8007d58 <_dtoa_r+0x748>
 8007ed8:	3fe00000 	.word	0x3fe00000
 8007edc:	40240000 	.word	0x40240000
 8007ee0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ee2:	9f06      	ldr	r7, [sp, #24]
 8007ee4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007ee6:	e742      	b.n	8007d6e <_dtoa_r+0x75e>
 8007ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eea:	e76b      	b.n	8007dc4 <_dtoa_r+0x7b4>
 8007eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	dc19      	bgt.n	8007f26 <_dtoa_r+0x916>
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	b9bb      	cbnz	r3, 8007f26 <_dtoa_r+0x916>
 8007ef6:	9b05      	ldr	r3, [sp, #20]
 8007ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007efc:	b99b      	cbnz	r3, 8007f26 <_dtoa_r+0x916>
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f04:	0d1b      	lsrs	r3, r3, #20
 8007f06:	051b      	lsls	r3, r3, #20
 8007f08:	b183      	cbz	r3, 8007f2c <_dtoa_r+0x91c>
 8007f0a:	f04f 0801 	mov.w	r8, #1
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	3301      	adds	r3, #1
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	3301      	adds	r3, #1
 8007f18:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f47f af6a 	bne.w	8007df6 <_dtoa_r+0x7e6>
 8007f22:	2001      	movs	r0, #1
 8007f24:	e76f      	b.n	8007e06 <_dtoa_r+0x7f6>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	e7f6      	b.n	8007f1a <_dtoa_r+0x90a>
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	e7f4      	b.n	8007f1a <_dtoa_r+0x90a>
 8007f30:	f43f af7d 	beq.w	8007e2e <_dtoa_r+0x81e>
 8007f34:	4618      	mov	r0, r3
 8007f36:	301c      	adds	r0, #28
 8007f38:	e772      	b.n	8007e20 <_dtoa_r+0x810>
 8007f3a:	9b08      	ldr	r3, [sp, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dc36      	bgt.n	8007fae <_dtoa_r+0x99e>
 8007f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	dd33      	ble.n	8007fae <_dtoa_r+0x99e>
 8007f46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	d10d      	bne.n	8007f6c <_dtoa_r+0x95c>
 8007f50:	4621      	mov	r1, r4
 8007f52:	464b      	mov	r3, r9
 8007f54:	2205      	movs	r2, #5
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 ff7c 	bl	8008e54 <__multadd>
 8007f5c:	4601      	mov	r1, r0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4658      	mov	r0, fp
 8007f62:	f001 f9dd 	bl	8009320 <__mcmp>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f73f adb8 	bgt.w	8007adc <_dtoa_r+0x4cc>
 8007f6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f6e:	9f03      	ldr	r7, [sp, #12]
 8007f70:	ea6f 0a03 	mvn.w	sl, r3
 8007f74:	f04f 0800 	mov.w	r8, #0
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 ff48 	bl	8008e10 <_Bfree>
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	f43f aea7 	beq.w	8007cd4 <_dtoa_r+0x6c4>
 8007f86:	f1b8 0f00 	cmp.w	r8, #0
 8007f8a:	d005      	beq.n	8007f98 <_dtoa_r+0x988>
 8007f8c:	45b0      	cmp	r8, r6
 8007f8e:	d003      	beq.n	8007f98 <_dtoa_r+0x988>
 8007f90:	4641      	mov	r1, r8
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 ff3c 	bl	8008e10 <_Bfree>
 8007f98:	4631      	mov	r1, r6
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 ff38 	bl	8008e10 <_Bfree>
 8007fa0:	e698      	b.n	8007cd4 <_dtoa_r+0x6c4>
 8007fa2:	2400      	movs	r4, #0
 8007fa4:	4626      	mov	r6, r4
 8007fa6:	e7e1      	b.n	8007f6c <_dtoa_r+0x95c>
 8007fa8:	46c2      	mov	sl, r8
 8007faa:	4626      	mov	r6, r4
 8007fac:	e596      	b.n	8007adc <_dtoa_r+0x4cc>
 8007fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80fd 	beq.w	80081b4 <_dtoa_r+0xba4>
 8007fba:	2f00      	cmp	r7, #0
 8007fbc:	dd05      	ble.n	8007fca <_dtoa_r+0x9ba>
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	463a      	mov	r2, r7
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f001 f93c 	bl	8009240 <__lshift>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	f1b8 0f00 	cmp.w	r8, #0
 8007fce:	d05c      	beq.n	800808a <_dtoa_r+0xa7a>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	6871      	ldr	r1, [r6, #4]
 8007fd4:	f000 fedc 	bl	8008d90 <_Balloc>
 8007fd8:	4607      	mov	r7, r0
 8007fda:	b928      	cbnz	r0, 8007fe8 <_dtoa_r+0x9d8>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007fe2:	4b7f      	ldr	r3, [pc, #508]	; (80081e0 <_dtoa_r+0xbd0>)
 8007fe4:	f7ff bb28 	b.w	8007638 <_dtoa_r+0x28>
 8007fe8:	6932      	ldr	r2, [r6, #16]
 8007fea:	f106 010c 	add.w	r1, r6, #12
 8007fee:	3202      	adds	r2, #2
 8007ff0:	0092      	lsls	r2, r2, #2
 8007ff2:	300c      	adds	r0, #12
 8007ff4:	f000 feb2 	bl	8008d5c <memcpy>
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f001 f91f 	bl	8009240 <__lshift>
 8008002:	46b0      	mov	r8, r6
 8008004:	4606      	mov	r6, r0
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	9308      	str	r3, [sp, #32]
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	444b      	add	r3, r9
 8008010:	930a      	str	r3, [sp, #40]	; 0x28
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	9309      	str	r3, [sp, #36]	; 0x24
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	4621      	mov	r1, r4
 800801e:	3b01      	subs	r3, #1
 8008020:	4658      	mov	r0, fp
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	f7ff fa68 	bl	80074f8 <quorem>
 8008028:	4603      	mov	r3, r0
 800802a:	4641      	mov	r1, r8
 800802c:	3330      	adds	r3, #48	; 0x30
 800802e:	9006      	str	r0, [sp, #24]
 8008030:	4658      	mov	r0, fp
 8008032:	930b      	str	r3, [sp, #44]	; 0x2c
 8008034:	f001 f974 	bl	8009320 <__mcmp>
 8008038:	4632      	mov	r2, r6
 800803a:	4681      	mov	r9, r0
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f001 f98a 	bl	8009358 <__mdiff>
 8008044:	68c2      	ldr	r2, [r0, #12]
 8008046:	4607      	mov	r7, r0
 8008048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804a:	bb02      	cbnz	r2, 800808e <_dtoa_r+0xa7e>
 800804c:	4601      	mov	r1, r0
 800804e:	4658      	mov	r0, fp
 8008050:	f001 f966 	bl	8009320 <__mcmp>
 8008054:	4602      	mov	r2, r0
 8008056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008058:	4639      	mov	r1, r7
 800805a:	4628      	mov	r0, r5
 800805c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008060:	f000 fed6 	bl	8008e10 <_Bfree>
 8008064:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008068:	9f08      	ldr	r7, [sp, #32]
 800806a:	ea43 0102 	orr.w	r1, r3, r2
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	430b      	orrs	r3, r1
 8008072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008074:	d10d      	bne.n	8008092 <_dtoa_r+0xa82>
 8008076:	2b39      	cmp	r3, #57	; 0x39
 8008078:	d029      	beq.n	80080ce <_dtoa_r+0xabe>
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	dd01      	ble.n	8008084 <_dtoa_r+0xa74>
 8008080:	9b06      	ldr	r3, [sp, #24]
 8008082:	3331      	adds	r3, #49	; 0x31
 8008084:	9a04      	ldr	r2, [sp, #16]
 8008086:	7013      	strb	r3, [r2, #0]
 8008088:	e776      	b.n	8007f78 <_dtoa_r+0x968>
 800808a:	4630      	mov	r0, r6
 800808c:	e7b9      	b.n	8008002 <_dtoa_r+0x9f2>
 800808e:	2201      	movs	r2, #1
 8008090:	e7e2      	b.n	8008058 <_dtoa_r+0xa48>
 8008092:	f1b9 0f00 	cmp.w	r9, #0
 8008096:	db06      	blt.n	80080a6 <_dtoa_r+0xa96>
 8008098:	9922      	ldr	r1, [sp, #136]	; 0x88
 800809a:	ea41 0909 	orr.w	r9, r1, r9
 800809e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a0:	ea59 0101 	orrs.w	r1, r9, r1
 80080a4:	d120      	bne.n	80080e8 <_dtoa_r+0xad8>
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	ddec      	ble.n	8008084 <_dtoa_r+0xa74>
 80080aa:	4659      	mov	r1, fp
 80080ac:	2201      	movs	r2, #1
 80080ae:	4628      	mov	r0, r5
 80080b0:	9308      	str	r3, [sp, #32]
 80080b2:	f001 f8c5 	bl	8009240 <__lshift>
 80080b6:	4621      	mov	r1, r4
 80080b8:	4683      	mov	fp, r0
 80080ba:	f001 f931 	bl	8009320 <__mcmp>
 80080be:	2800      	cmp	r0, #0
 80080c0:	9b08      	ldr	r3, [sp, #32]
 80080c2:	dc02      	bgt.n	80080ca <_dtoa_r+0xaba>
 80080c4:	d1de      	bne.n	8008084 <_dtoa_r+0xa74>
 80080c6:	07da      	lsls	r2, r3, #31
 80080c8:	d5dc      	bpl.n	8008084 <_dtoa_r+0xa74>
 80080ca:	2b39      	cmp	r3, #57	; 0x39
 80080cc:	d1d8      	bne.n	8008080 <_dtoa_r+0xa70>
 80080ce:	2339      	movs	r3, #57	; 0x39
 80080d0:	9a04      	ldr	r2, [sp, #16]
 80080d2:	7013      	strb	r3, [r2, #0]
 80080d4:	463b      	mov	r3, r7
 80080d6:	461f      	mov	r7, r3
 80080d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80080dc:	3b01      	subs	r3, #1
 80080de:	2a39      	cmp	r2, #57	; 0x39
 80080e0:	d050      	beq.n	8008184 <_dtoa_r+0xb74>
 80080e2:	3201      	adds	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e747      	b.n	8007f78 <_dtoa_r+0x968>
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	dd03      	ble.n	80080f4 <_dtoa_r+0xae4>
 80080ec:	2b39      	cmp	r3, #57	; 0x39
 80080ee:	d0ee      	beq.n	80080ce <_dtoa_r+0xabe>
 80080f0:	3301      	adds	r3, #1
 80080f2:	e7c7      	b.n	8008084 <_dtoa_r+0xa74>
 80080f4:	9a08      	ldr	r2, [sp, #32]
 80080f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80080fc:	428a      	cmp	r2, r1
 80080fe:	d02a      	beq.n	8008156 <_dtoa_r+0xb46>
 8008100:	4659      	mov	r1, fp
 8008102:	2300      	movs	r3, #0
 8008104:	220a      	movs	r2, #10
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fea4 	bl	8008e54 <__multadd>
 800810c:	45b0      	cmp	r8, r6
 800810e:	4683      	mov	fp, r0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	f04f 020a 	mov.w	r2, #10
 8008118:	4641      	mov	r1, r8
 800811a:	4628      	mov	r0, r5
 800811c:	d107      	bne.n	800812e <_dtoa_r+0xb1e>
 800811e:	f000 fe99 	bl	8008e54 <__multadd>
 8008122:	4680      	mov	r8, r0
 8008124:	4606      	mov	r6, r0
 8008126:	9b08      	ldr	r3, [sp, #32]
 8008128:	3301      	adds	r3, #1
 800812a:	9308      	str	r3, [sp, #32]
 800812c:	e775      	b.n	800801a <_dtoa_r+0xa0a>
 800812e:	f000 fe91 	bl	8008e54 <__multadd>
 8008132:	4631      	mov	r1, r6
 8008134:	4680      	mov	r8, r0
 8008136:	2300      	movs	r3, #0
 8008138:	220a      	movs	r2, #10
 800813a:	4628      	mov	r0, r5
 800813c:	f000 fe8a 	bl	8008e54 <__multadd>
 8008140:	4606      	mov	r6, r0
 8008142:	e7f0      	b.n	8008126 <_dtoa_r+0xb16>
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	bfcc      	ite	gt
 800814a:	464f      	movgt	r7, r9
 800814c:	2701      	movle	r7, #1
 800814e:	f04f 0800 	mov.w	r8, #0
 8008152:	9a03      	ldr	r2, [sp, #12]
 8008154:	4417      	add	r7, r2
 8008156:	4659      	mov	r1, fp
 8008158:	2201      	movs	r2, #1
 800815a:	4628      	mov	r0, r5
 800815c:	9308      	str	r3, [sp, #32]
 800815e:	f001 f86f 	bl	8009240 <__lshift>
 8008162:	4621      	mov	r1, r4
 8008164:	4683      	mov	fp, r0
 8008166:	f001 f8db 	bl	8009320 <__mcmp>
 800816a:	2800      	cmp	r0, #0
 800816c:	dcb2      	bgt.n	80080d4 <_dtoa_r+0xac4>
 800816e:	d102      	bne.n	8008176 <_dtoa_r+0xb66>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d4ae      	bmi.n	80080d4 <_dtoa_r+0xac4>
 8008176:	463b      	mov	r3, r7
 8008178:	461f      	mov	r7, r3
 800817a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800817e:	2a30      	cmp	r2, #48	; 0x30
 8008180:	d0fa      	beq.n	8008178 <_dtoa_r+0xb68>
 8008182:	e6f9      	b.n	8007f78 <_dtoa_r+0x968>
 8008184:	9a03      	ldr	r2, [sp, #12]
 8008186:	429a      	cmp	r2, r3
 8008188:	d1a5      	bne.n	80080d6 <_dtoa_r+0xac6>
 800818a:	2331      	movs	r3, #49	; 0x31
 800818c:	f10a 0a01 	add.w	sl, sl, #1
 8008190:	e779      	b.n	8008086 <_dtoa_r+0xa76>
 8008192:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <_dtoa_r+0xbd4>)
 8008194:	f7ff baa8 	b.w	80076e8 <_dtoa_r+0xd8>
 8008198:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800819a:	2b00      	cmp	r3, #0
 800819c:	f47f aa81 	bne.w	80076a2 <_dtoa_r+0x92>
 80081a0:	4b11      	ldr	r3, [pc, #68]	; (80081e8 <_dtoa_r+0xbd8>)
 80081a2:	f7ff baa1 	b.w	80076e8 <_dtoa_r+0xd8>
 80081a6:	f1b9 0f00 	cmp.w	r9, #0
 80081aa:	dc03      	bgt.n	80081b4 <_dtoa_r+0xba4>
 80081ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	f73f aecb 	bgt.w	8007f4a <_dtoa_r+0x93a>
 80081b4:	9f03      	ldr	r7, [sp, #12]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4658      	mov	r0, fp
 80081ba:	f7ff f99d 	bl	80074f8 <quorem>
 80081be:	9a03      	ldr	r2, [sp, #12]
 80081c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80081c4:	f807 3b01 	strb.w	r3, [r7], #1
 80081c8:	1aba      	subs	r2, r7, r2
 80081ca:	4591      	cmp	r9, r2
 80081cc:	ddba      	ble.n	8008144 <_dtoa_r+0xb34>
 80081ce:	4659      	mov	r1, fp
 80081d0:	2300      	movs	r3, #0
 80081d2:	220a      	movs	r2, #10
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 fe3d 	bl	8008e54 <__multadd>
 80081da:	4683      	mov	fp, r0
 80081dc:	e7eb      	b.n	80081b6 <_dtoa_r+0xba6>
 80081de:	bf00      	nop
 80081e0:	0800a379 	.word	0x0800a379
 80081e4:	0800a0ec 	.word	0x0800a0ec
 80081e8:	0800a311 	.word	0x0800a311

080081ec <__sflush_r>:
 80081ec:	898a      	ldrh	r2, [r1, #12]
 80081ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f0:	4605      	mov	r5, r0
 80081f2:	0710      	lsls	r0, r2, #28
 80081f4:	460c      	mov	r4, r1
 80081f6:	d457      	bmi.n	80082a8 <__sflush_r+0xbc>
 80081f8:	684b      	ldr	r3, [r1, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dc04      	bgt.n	8008208 <__sflush_r+0x1c>
 80081fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	dc01      	bgt.n	8008208 <__sflush_r+0x1c>
 8008204:	2000      	movs	r0, #0
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820a:	2e00      	cmp	r6, #0
 800820c:	d0fa      	beq.n	8008204 <__sflush_r+0x18>
 800820e:	2300      	movs	r3, #0
 8008210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008214:	682f      	ldr	r7, [r5, #0]
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	d032      	beq.n	8008280 <__sflush_r+0x94>
 800821a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	075a      	lsls	r2, r3, #29
 8008220:	d505      	bpl.n	800822e <__sflush_r+0x42>
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	1ac0      	subs	r0, r0, r3
 8008226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008228:	b10b      	cbz	r3, 800822e <__sflush_r+0x42>
 800822a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800822c:	1ac0      	subs	r0, r0, r3
 800822e:	2300      	movs	r3, #0
 8008230:	4602      	mov	r2, r0
 8008232:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008234:	4628      	mov	r0, r5
 8008236:	6a21      	ldr	r1, [r4, #32]
 8008238:	47b0      	blx	r6
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	d106      	bne.n	800824e <__sflush_r+0x62>
 8008240:	6829      	ldr	r1, [r5, #0]
 8008242:	291d      	cmp	r1, #29
 8008244:	d82c      	bhi.n	80082a0 <__sflush_r+0xb4>
 8008246:	4a29      	ldr	r2, [pc, #164]	; (80082ec <__sflush_r+0x100>)
 8008248:	40ca      	lsrs	r2, r1
 800824a:	07d6      	lsls	r6, r2, #31
 800824c:	d528      	bpl.n	80082a0 <__sflush_r+0xb4>
 800824e:	2200      	movs	r2, #0
 8008250:	6062      	str	r2, [r4, #4]
 8008252:	6922      	ldr	r2, [r4, #16]
 8008254:	04d9      	lsls	r1, r3, #19
 8008256:	6022      	str	r2, [r4, #0]
 8008258:	d504      	bpl.n	8008264 <__sflush_r+0x78>
 800825a:	1c42      	adds	r2, r0, #1
 800825c:	d101      	bne.n	8008262 <__sflush_r+0x76>
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	b903      	cbnz	r3, 8008264 <__sflush_r+0x78>
 8008262:	6560      	str	r0, [r4, #84]	; 0x54
 8008264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008266:	602f      	str	r7, [r5, #0]
 8008268:	2900      	cmp	r1, #0
 800826a:	d0cb      	beq.n	8008204 <__sflush_r+0x18>
 800826c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008270:	4299      	cmp	r1, r3
 8008272:	d002      	beq.n	800827a <__sflush_r+0x8e>
 8008274:	4628      	mov	r0, r5
 8008276:	f7fd fb3f 	bl	80058f8 <_free_r>
 800827a:	2000      	movs	r0, #0
 800827c:	6360      	str	r0, [r4, #52]	; 0x34
 800827e:	e7c2      	b.n	8008206 <__sflush_r+0x1a>
 8008280:	6a21      	ldr	r1, [r4, #32]
 8008282:	2301      	movs	r3, #1
 8008284:	4628      	mov	r0, r5
 8008286:	47b0      	blx	r6
 8008288:	1c41      	adds	r1, r0, #1
 800828a:	d1c7      	bne.n	800821c <__sflush_r+0x30>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0c4      	beq.n	800821c <__sflush_r+0x30>
 8008292:	2b1d      	cmp	r3, #29
 8008294:	d001      	beq.n	800829a <__sflush_r+0xae>
 8008296:	2b16      	cmp	r3, #22
 8008298:	d101      	bne.n	800829e <__sflush_r+0xb2>
 800829a:	602f      	str	r7, [r5, #0]
 800829c:	e7b2      	b.n	8008204 <__sflush_r+0x18>
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	e7ae      	b.n	8008206 <__sflush_r+0x1a>
 80082a8:	690f      	ldr	r7, [r1, #16]
 80082aa:	2f00      	cmp	r7, #0
 80082ac:	d0aa      	beq.n	8008204 <__sflush_r+0x18>
 80082ae:	0793      	lsls	r3, r2, #30
 80082b0:	bf18      	it	ne
 80082b2:	2300      	movne	r3, #0
 80082b4:	680e      	ldr	r6, [r1, #0]
 80082b6:	bf08      	it	eq
 80082b8:	694b      	ldreq	r3, [r1, #20]
 80082ba:	1bf6      	subs	r6, r6, r7
 80082bc:	600f      	str	r7, [r1, #0]
 80082be:	608b      	str	r3, [r1, #8]
 80082c0:	2e00      	cmp	r6, #0
 80082c2:	dd9f      	ble.n	8008204 <__sflush_r+0x18>
 80082c4:	4633      	mov	r3, r6
 80082c6:	463a      	mov	r2, r7
 80082c8:	4628      	mov	r0, r5
 80082ca:	6a21      	ldr	r1, [r4, #32]
 80082cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80082d0:	47e0      	blx	ip
 80082d2:	2800      	cmp	r0, #0
 80082d4:	dc06      	bgt.n	80082e4 <__sflush_r+0xf8>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	e790      	b.n	8008206 <__sflush_r+0x1a>
 80082e4:	4407      	add	r7, r0
 80082e6:	1a36      	subs	r6, r6, r0
 80082e8:	e7ea      	b.n	80082c0 <__sflush_r+0xd4>
 80082ea:	bf00      	nop
 80082ec:	20400001 	.word	0x20400001

080082f0 <_fflush_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	4605      	mov	r5, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	b913      	cbnz	r3, 8008300 <_fflush_r+0x10>
 80082fa:	2500      	movs	r5, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	b118      	cbz	r0, 800830a <_fflush_r+0x1a>
 8008302:	6983      	ldr	r3, [r0, #24]
 8008304:	b90b      	cbnz	r3, 800830a <_fflush_r+0x1a>
 8008306:	f000 f887 	bl	8008418 <__sinit>
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <_fflush_r+0x6c>)
 800830c:	429c      	cmp	r4, r3
 800830e:	d11b      	bne.n	8008348 <_fflush_r+0x58>
 8008310:	686c      	ldr	r4, [r5, #4]
 8008312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0ef      	beq.n	80082fa <_fflush_r+0xa>
 800831a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800831c:	07d0      	lsls	r0, r2, #31
 800831e:	d404      	bmi.n	800832a <_fflush_r+0x3a>
 8008320:	0599      	lsls	r1, r3, #22
 8008322:	d402      	bmi.n	800832a <_fflush_r+0x3a>
 8008324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008326:	f000 fc92 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800832a:	4628      	mov	r0, r5
 800832c:	4621      	mov	r1, r4
 800832e:	f7ff ff5d 	bl	80081ec <__sflush_r>
 8008332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008334:	4605      	mov	r5, r0
 8008336:	07da      	lsls	r2, r3, #31
 8008338:	d4e0      	bmi.n	80082fc <_fflush_r+0xc>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	059b      	lsls	r3, r3, #22
 800833e:	d4dd      	bmi.n	80082fc <_fflush_r+0xc>
 8008340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008342:	f000 fc85 	bl	8008c50 <__retarget_lock_release_recursive>
 8008346:	e7d9      	b.n	80082fc <_fflush_r+0xc>
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <_fflush_r+0x70>)
 800834a:	429c      	cmp	r4, r3
 800834c:	d101      	bne.n	8008352 <_fflush_r+0x62>
 800834e:	68ac      	ldr	r4, [r5, #8]
 8008350:	e7df      	b.n	8008312 <_fflush_r+0x22>
 8008352:	4b04      	ldr	r3, [pc, #16]	; (8008364 <_fflush_r+0x74>)
 8008354:	429c      	cmp	r4, r3
 8008356:	bf08      	it	eq
 8008358:	68ec      	ldreq	r4, [r5, #12]
 800835a:	e7da      	b.n	8008312 <_fflush_r+0x22>
 800835c:	0800a3ac 	.word	0x0800a3ac
 8008360:	0800a3cc 	.word	0x0800a3cc
 8008364:	0800a38c 	.word	0x0800a38c

08008368 <std>:
 8008368:	2300      	movs	r3, #0
 800836a:	b510      	push	{r4, lr}
 800836c:	4604      	mov	r4, r0
 800836e:	e9c0 3300 	strd	r3, r3, [r0]
 8008372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008376:	6083      	str	r3, [r0, #8]
 8008378:	8181      	strh	r1, [r0, #12]
 800837a:	6643      	str	r3, [r0, #100]	; 0x64
 800837c:	81c2      	strh	r2, [r0, #14]
 800837e:	6183      	str	r3, [r0, #24]
 8008380:	4619      	mov	r1, r3
 8008382:	2208      	movs	r2, #8
 8008384:	305c      	adds	r0, #92	; 0x5c
 8008386:	f7fd faaf 	bl	80058e8 <memset>
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <std+0x38>)
 800838c:	6224      	str	r4, [r4, #32]
 800838e:	6263      	str	r3, [r4, #36]	; 0x24
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <std+0x3c>)
 8008392:	62a3      	str	r3, [r4, #40]	; 0x28
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <std+0x40>)
 8008396:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <std+0x44>)
 800839a:	6323      	str	r3, [r4, #48]	; 0x30
 800839c:	bd10      	pop	{r4, pc}
 800839e:	bf00      	nop
 80083a0:	08009c9d 	.word	0x08009c9d
 80083a4:	08009cbf 	.word	0x08009cbf
 80083a8:	08009cf7 	.word	0x08009cf7
 80083ac:	08009d1b 	.word	0x08009d1b

080083b0 <_cleanup_r>:
 80083b0:	4901      	ldr	r1, [pc, #4]	; (80083b8 <_cleanup_r+0x8>)
 80083b2:	f000 b8c1 	b.w	8008538 <_fwalk_reent>
 80083b6:	bf00      	nop
 80083b8:	080082f1 	.word	0x080082f1

080083bc <__sfmoreglue>:
 80083bc:	2268      	movs	r2, #104	; 0x68
 80083be:	b570      	push	{r4, r5, r6, lr}
 80083c0:	1e4d      	subs	r5, r1, #1
 80083c2:	4355      	muls	r5, r2
 80083c4:	460e      	mov	r6, r1
 80083c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083ca:	f7fd fafd 	bl	80059c8 <_malloc_r>
 80083ce:	4604      	mov	r4, r0
 80083d0:	b140      	cbz	r0, 80083e4 <__sfmoreglue+0x28>
 80083d2:	2100      	movs	r1, #0
 80083d4:	e9c0 1600 	strd	r1, r6, [r0]
 80083d8:	300c      	adds	r0, #12
 80083da:	60a0      	str	r0, [r4, #8]
 80083dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083e0:	f7fd fa82 	bl	80058e8 <memset>
 80083e4:	4620      	mov	r0, r4
 80083e6:	bd70      	pop	{r4, r5, r6, pc}

080083e8 <__sfp_lock_acquire>:
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__sfp_lock_acquire+0x8>)
 80083ea:	f000 bc30 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 80083ee:	bf00      	nop
 80083f0:	20000461 	.word	0x20000461

080083f4 <__sfp_lock_release>:
 80083f4:	4801      	ldr	r0, [pc, #4]	; (80083fc <__sfp_lock_release+0x8>)
 80083f6:	f000 bc2b 	b.w	8008c50 <__retarget_lock_release_recursive>
 80083fa:	bf00      	nop
 80083fc:	20000461 	.word	0x20000461

08008400 <__sinit_lock_acquire>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__sinit_lock_acquire+0x8>)
 8008402:	f000 bc24 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20000462 	.word	0x20000462

0800840c <__sinit_lock_release>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__sinit_lock_release+0x8>)
 800840e:	f000 bc1f 	b.w	8008c50 <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20000462 	.word	0x20000462

08008418 <__sinit>:
 8008418:	b510      	push	{r4, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	f7ff fff0 	bl	8008400 <__sinit_lock_acquire>
 8008420:	69a3      	ldr	r3, [r4, #24]
 8008422:	b11b      	cbz	r3, 800842c <__sinit+0x14>
 8008424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008428:	f7ff bff0 	b.w	800840c <__sinit_lock_release>
 800842c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008430:	6523      	str	r3, [r4, #80]	; 0x50
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <__sinit+0x68>)
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <__sinit+0x6c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	62a2      	str	r2, [r4, #40]	; 0x28
 800843a:	42a3      	cmp	r3, r4
 800843c:	bf08      	it	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	4620      	mov	r0, r4
 8008442:	bf08      	it	eq
 8008444:	61a3      	streq	r3, [r4, #24]
 8008446:	f000 f81f 	bl	8008488 <__sfp>
 800844a:	6060      	str	r0, [r4, #4]
 800844c:	4620      	mov	r0, r4
 800844e:	f000 f81b 	bl	8008488 <__sfp>
 8008452:	60a0      	str	r0, [r4, #8]
 8008454:	4620      	mov	r0, r4
 8008456:	f000 f817 	bl	8008488 <__sfp>
 800845a:	2200      	movs	r2, #0
 800845c:	2104      	movs	r1, #4
 800845e:	60e0      	str	r0, [r4, #12]
 8008460:	6860      	ldr	r0, [r4, #4]
 8008462:	f7ff ff81 	bl	8008368 <std>
 8008466:	2201      	movs	r2, #1
 8008468:	2109      	movs	r1, #9
 800846a:	68a0      	ldr	r0, [r4, #8]
 800846c:	f7ff ff7c 	bl	8008368 <std>
 8008470:	2202      	movs	r2, #2
 8008472:	2112      	movs	r1, #18
 8008474:	68e0      	ldr	r0, [r4, #12]
 8008476:	f7ff ff77 	bl	8008368 <std>
 800847a:	2301      	movs	r3, #1
 800847c:	61a3      	str	r3, [r4, #24]
 800847e:	e7d1      	b.n	8008424 <__sinit+0xc>
 8008480:	0800a0d8 	.word	0x0800a0d8
 8008484:	080083b1 	.word	0x080083b1

08008488 <__sfp>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	4607      	mov	r7, r0
 800848c:	f7ff ffac 	bl	80083e8 <__sfp_lock_acquire>
 8008490:	4b1e      	ldr	r3, [pc, #120]	; (800850c <__sfp+0x84>)
 8008492:	681e      	ldr	r6, [r3, #0]
 8008494:	69b3      	ldr	r3, [r6, #24]
 8008496:	b913      	cbnz	r3, 800849e <__sfp+0x16>
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff ffbd 	bl	8008418 <__sinit>
 800849e:	3648      	adds	r6, #72	; 0x48
 80084a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	d503      	bpl.n	80084b0 <__sfp+0x28>
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	b30b      	cbz	r3, 80084f0 <__sfp+0x68>
 80084ac:	6836      	ldr	r6, [r6, #0]
 80084ae:	e7f7      	b.n	80084a0 <__sfp+0x18>
 80084b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084b4:	b9d5      	cbnz	r5, 80084ec <__sfp+0x64>
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <__sfp+0x88>)
 80084b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084bc:	60e3      	str	r3, [r4, #12]
 80084be:	6665      	str	r5, [r4, #100]	; 0x64
 80084c0:	f000 fbc4 	bl	8008c4c <__retarget_lock_init_recursive>
 80084c4:	f7ff ff96 	bl	80083f4 <__sfp_lock_release>
 80084c8:	2208      	movs	r2, #8
 80084ca:	4629      	mov	r1, r5
 80084cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084d4:	6025      	str	r5, [r4, #0]
 80084d6:	61a5      	str	r5, [r4, #24]
 80084d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084dc:	f7fd fa04 	bl	80058e8 <memset>
 80084e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084e8:	4620      	mov	r0, r4
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	3468      	adds	r4, #104	; 0x68
 80084ee:	e7d9      	b.n	80084a4 <__sfp+0x1c>
 80084f0:	2104      	movs	r1, #4
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7ff ff62 	bl	80083bc <__sfmoreglue>
 80084f8:	4604      	mov	r4, r0
 80084fa:	6030      	str	r0, [r6, #0]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1d5      	bne.n	80084ac <__sfp+0x24>
 8008500:	f7ff ff78 	bl	80083f4 <__sfp_lock_release>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	e7ee      	b.n	80084e8 <__sfp+0x60>
 800850a:	bf00      	nop
 800850c:	0800a0d8 	.word	0x0800a0d8
 8008510:	ffff0001 	.word	0xffff0001

08008514 <fiprintf>:
 8008514:	b40e      	push	{r1, r2, r3}
 8008516:	b503      	push	{r0, r1, lr}
 8008518:	4601      	mov	r1, r0
 800851a:	ab03      	add	r3, sp, #12
 800851c:	4805      	ldr	r0, [pc, #20]	; (8008534 <fiprintf+0x20>)
 800851e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008522:	6800      	ldr	r0, [r0, #0]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	f001 fa83 	bl	8009a30 <_vfiprintf_r>
 800852a:	b002      	add	sp, #8
 800852c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008530:	b003      	add	sp, #12
 8008532:	4770      	bx	lr
 8008534:	2000001c 	.word	0x2000001c

08008538 <_fwalk_reent>:
 8008538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800853c:	4606      	mov	r6, r0
 800853e:	4688      	mov	r8, r1
 8008540:	2700      	movs	r7, #0
 8008542:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800854a:	f1b9 0901 	subs.w	r9, r9, #1
 800854e:	d505      	bpl.n	800855c <_fwalk_reent+0x24>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	2c00      	cmp	r4, #0
 8008554:	d1f7      	bne.n	8008546 <_fwalk_reent+0xe>
 8008556:	4638      	mov	r0, r7
 8008558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855c:	89ab      	ldrh	r3, [r5, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d907      	bls.n	8008572 <_fwalk_reent+0x3a>
 8008562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008566:	3301      	adds	r3, #1
 8008568:	d003      	beq.n	8008572 <_fwalk_reent+0x3a>
 800856a:	4629      	mov	r1, r5
 800856c:	4630      	mov	r0, r6
 800856e:	47c0      	blx	r8
 8008570:	4307      	orrs	r7, r0
 8008572:	3568      	adds	r5, #104	; 0x68
 8008574:	e7e9      	b.n	800854a <_fwalk_reent+0x12>

08008576 <rshift>:
 8008576:	6903      	ldr	r3, [r0, #16]
 8008578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800857c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008580:	f100 0414 	add.w	r4, r0, #20
 8008584:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008588:	dd46      	ble.n	8008618 <rshift+0xa2>
 800858a:	f011 011f 	ands.w	r1, r1, #31
 800858e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008592:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008596:	d10c      	bne.n	80085b2 <rshift+0x3c>
 8008598:	4629      	mov	r1, r5
 800859a:	f100 0710 	add.w	r7, r0, #16
 800859e:	42b1      	cmp	r1, r6
 80085a0:	d335      	bcc.n	800860e <rshift+0x98>
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	1eea      	subs	r2, r5, #3
 80085a8:	4296      	cmp	r6, r2
 80085aa:	bf38      	it	cc
 80085ac:	2300      	movcc	r3, #0
 80085ae:	4423      	add	r3, r4
 80085b0:	e015      	b.n	80085de <rshift+0x68>
 80085b2:	46a1      	mov	r9, r4
 80085b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80085b8:	f1c1 0820 	rsb	r8, r1, #32
 80085bc:	40cf      	lsrs	r7, r1
 80085be:	f105 0e04 	add.w	lr, r5, #4
 80085c2:	4576      	cmp	r6, lr
 80085c4:	46f4      	mov	ip, lr
 80085c6:	d816      	bhi.n	80085f6 <rshift+0x80>
 80085c8:	1a9a      	subs	r2, r3, r2
 80085ca:	0092      	lsls	r2, r2, #2
 80085cc:	3a04      	subs	r2, #4
 80085ce:	3501      	adds	r5, #1
 80085d0:	42ae      	cmp	r6, r5
 80085d2:	bf38      	it	cc
 80085d4:	2200      	movcc	r2, #0
 80085d6:	18a3      	adds	r3, r4, r2
 80085d8:	50a7      	str	r7, [r4, r2]
 80085da:	b107      	cbz	r7, 80085de <rshift+0x68>
 80085dc:	3304      	adds	r3, #4
 80085de:	42a3      	cmp	r3, r4
 80085e0:	eba3 0204 	sub.w	r2, r3, r4
 80085e4:	bf08      	it	eq
 80085e6:	2300      	moveq	r3, #0
 80085e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085ec:	6102      	str	r2, [r0, #16]
 80085ee:	bf08      	it	eq
 80085f0:	6143      	streq	r3, [r0, #20]
 80085f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f6:	f8dc c000 	ldr.w	ip, [ip]
 80085fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80085fe:	ea4c 0707 	orr.w	r7, ip, r7
 8008602:	f849 7b04 	str.w	r7, [r9], #4
 8008606:	f85e 7b04 	ldr.w	r7, [lr], #4
 800860a:	40cf      	lsrs	r7, r1
 800860c:	e7d9      	b.n	80085c2 <rshift+0x4c>
 800860e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008612:	f847 cf04 	str.w	ip, [r7, #4]!
 8008616:	e7c2      	b.n	800859e <rshift+0x28>
 8008618:	4623      	mov	r3, r4
 800861a:	e7e0      	b.n	80085de <rshift+0x68>

0800861c <__hexdig_fun>:
 800861c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008620:	2b09      	cmp	r3, #9
 8008622:	d802      	bhi.n	800862a <__hexdig_fun+0xe>
 8008624:	3820      	subs	r0, #32
 8008626:	b2c0      	uxtb	r0, r0
 8008628:	4770      	bx	lr
 800862a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800862e:	2b05      	cmp	r3, #5
 8008630:	d801      	bhi.n	8008636 <__hexdig_fun+0x1a>
 8008632:	3847      	subs	r0, #71	; 0x47
 8008634:	e7f7      	b.n	8008626 <__hexdig_fun+0xa>
 8008636:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800863a:	2b05      	cmp	r3, #5
 800863c:	d801      	bhi.n	8008642 <__hexdig_fun+0x26>
 800863e:	3827      	subs	r0, #39	; 0x27
 8008640:	e7f1      	b.n	8008626 <__hexdig_fun+0xa>
 8008642:	2000      	movs	r0, #0
 8008644:	4770      	bx	lr
	...

08008648 <__gethex>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	b08b      	sub	sp, #44	; 0x2c
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	4bb2      	ldr	r3, [pc, #712]	; (800891c <__gethex+0x2d4>)
 8008652:	9002      	str	r0, [sp, #8]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	468b      	mov	fp, r1
 8008658:	4618      	mov	r0, r3
 800865a:	4690      	mov	r8, r2
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	f7f7 fd81 	bl	8000164 <strlen>
 8008662:	4682      	mov	sl, r0
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	f8db 2000 	ldr.w	r2, [fp]
 800866a:	4403      	add	r3, r0
 800866c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	1c93      	adds	r3, r2, #2
 8008674:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008678:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800867c:	32fe      	adds	r2, #254	; 0xfe
 800867e:	18d1      	adds	r1, r2, r3
 8008680:	461f      	mov	r7, r3
 8008682:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008686:	9101      	str	r1, [sp, #4]
 8008688:	2830      	cmp	r0, #48	; 0x30
 800868a:	d0f8      	beq.n	800867e <__gethex+0x36>
 800868c:	f7ff ffc6 	bl	800861c <__hexdig_fun>
 8008690:	4604      	mov	r4, r0
 8008692:	2800      	cmp	r0, #0
 8008694:	d13a      	bne.n	800870c <__gethex+0xc4>
 8008696:	4652      	mov	r2, sl
 8008698:	4638      	mov	r0, r7
 800869a:	9903      	ldr	r1, [sp, #12]
 800869c:	f001 fb41 	bl	8009d22 <strncmp>
 80086a0:	4605      	mov	r5, r0
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d166      	bne.n	8008774 <__gethex+0x12c>
 80086a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80086aa:	eb07 060a 	add.w	r6, r7, sl
 80086ae:	f7ff ffb5 	bl	800861c <__hexdig_fun>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d060      	beq.n	8008778 <__gethex+0x130>
 80086b6:	4633      	mov	r3, r6
 80086b8:	7818      	ldrb	r0, [r3, #0]
 80086ba:	461f      	mov	r7, r3
 80086bc:	2830      	cmp	r0, #48	; 0x30
 80086be:	f103 0301 	add.w	r3, r3, #1
 80086c2:	d0f9      	beq.n	80086b8 <__gethex+0x70>
 80086c4:	f7ff ffaa 	bl	800861c <__hexdig_fun>
 80086c8:	2301      	movs	r3, #1
 80086ca:	fab0 f480 	clz	r4, r0
 80086ce:	4635      	mov	r5, r6
 80086d0:	0964      	lsrs	r4, r4, #5
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	463a      	mov	r2, r7
 80086d6:	4616      	mov	r6, r2
 80086d8:	7830      	ldrb	r0, [r6, #0]
 80086da:	3201      	adds	r2, #1
 80086dc:	f7ff ff9e 	bl	800861c <__hexdig_fun>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d1f8      	bne.n	80086d6 <__gethex+0x8e>
 80086e4:	4652      	mov	r2, sl
 80086e6:	4630      	mov	r0, r6
 80086e8:	9903      	ldr	r1, [sp, #12]
 80086ea:	f001 fb1a 	bl	8009d22 <strncmp>
 80086ee:	b980      	cbnz	r0, 8008712 <__gethex+0xca>
 80086f0:	b94d      	cbnz	r5, 8008706 <__gethex+0xbe>
 80086f2:	eb06 050a 	add.w	r5, r6, sl
 80086f6:	462a      	mov	r2, r5
 80086f8:	4616      	mov	r6, r2
 80086fa:	7830      	ldrb	r0, [r6, #0]
 80086fc:	3201      	adds	r2, #1
 80086fe:	f7ff ff8d 	bl	800861c <__hexdig_fun>
 8008702:	2800      	cmp	r0, #0
 8008704:	d1f8      	bne.n	80086f8 <__gethex+0xb0>
 8008706:	1bad      	subs	r5, r5, r6
 8008708:	00ad      	lsls	r5, r5, #2
 800870a:	e004      	b.n	8008716 <__gethex+0xce>
 800870c:	2400      	movs	r4, #0
 800870e:	4625      	mov	r5, r4
 8008710:	e7e0      	b.n	80086d4 <__gethex+0x8c>
 8008712:	2d00      	cmp	r5, #0
 8008714:	d1f7      	bne.n	8008706 <__gethex+0xbe>
 8008716:	7833      	ldrb	r3, [r6, #0]
 8008718:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800871c:	2b50      	cmp	r3, #80	; 0x50
 800871e:	d139      	bne.n	8008794 <__gethex+0x14c>
 8008720:	7873      	ldrb	r3, [r6, #1]
 8008722:	2b2b      	cmp	r3, #43	; 0x2b
 8008724:	d02a      	beq.n	800877c <__gethex+0x134>
 8008726:	2b2d      	cmp	r3, #45	; 0x2d
 8008728:	d02c      	beq.n	8008784 <__gethex+0x13c>
 800872a:	f04f 0900 	mov.w	r9, #0
 800872e:	1c71      	adds	r1, r6, #1
 8008730:	7808      	ldrb	r0, [r1, #0]
 8008732:	f7ff ff73 	bl	800861c <__hexdig_fun>
 8008736:	1e43      	subs	r3, r0, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b18      	cmp	r3, #24
 800873c:	d82a      	bhi.n	8008794 <__gethex+0x14c>
 800873e:	f1a0 0210 	sub.w	r2, r0, #16
 8008742:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008746:	f7ff ff69 	bl	800861c <__hexdig_fun>
 800874a:	1e43      	subs	r3, r0, #1
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b18      	cmp	r3, #24
 8008750:	d91b      	bls.n	800878a <__gethex+0x142>
 8008752:	f1b9 0f00 	cmp.w	r9, #0
 8008756:	d000      	beq.n	800875a <__gethex+0x112>
 8008758:	4252      	negs	r2, r2
 800875a:	4415      	add	r5, r2
 800875c:	f8cb 1000 	str.w	r1, [fp]
 8008760:	b1d4      	cbz	r4, 8008798 <__gethex+0x150>
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	bf14      	ite	ne
 8008768:	2700      	movne	r7, #0
 800876a:	2706      	moveq	r7, #6
 800876c:	4638      	mov	r0, r7
 800876e:	b00b      	add	sp, #44	; 0x2c
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	463e      	mov	r6, r7
 8008776:	4625      	mov	r5, r4
 8008778:	2401      	movs	r4, #1
 800877a:	e7cc      	b.n	8008716 <__gethex+0xce>
 800877c:	f04f 0900 	mov.w	r9, #0
 8008780:	1cb1      	adds	r1, r6, #2
 8008782:	e7d5      	b.n	8008730 <__gethex+0xe8>
 8008784:	f04f 0901 	mov.w	r9, #1
 8008788:	e7fa      	b.n	8008780 <__gethex+0x138>
 800878a:	230a      	movs	r3, #10
 800878c:	fb03 0202 	mla	r2, r3, r2, r0
 8008790:	3a10      	subs	r2, #16
 8008792:	e7d6      	b.n	8008742 <__gethex+0xfa>
 8008794:	4631      	mov	r1, r6
 8008796:	e7e1      	b.n	800875c <__gethex+0x114>
 8008798:	4621      	mov	r1, r4
 800879a:	1bf3      	subs	r3, r6, r7
 800879c:	3b01      	subs	r3, #1
 800879e:	2b07      	cmp	r3, #7
 80087a0:	dc0a      	bgt.n	80087b8 <__gethex+0x170>
 80087a2:	9802      	ldr	r0, [sp, #8]
 80087a4:	f000 faf4 	bl	8008d90 <_Balloc>
 80087a8:	4604      	mov	r4, r0
 80087aa:	b940      	cbnz	r0, 80087be <__gethex+0x176>
 80087ac:	4602      	mov	r2, r0
 80087ae:	21de      	movs	r1, #222	; 0xde
 80087b0:	4b5b      	ldr	r3, [pc, #364]	; (8008920 <__gethex+0x2d8>)
 80087b2:	485c      	ldr	r0, [pc, #368]	; (8008924 <__gethex+0x2dc>)
 80087b4:	f7fe fe82 	bl	80074bc <__assert_func>
 80087b8:	3101      	adds	r1, #1
 80087ba:	105b      	asrs	r3, r3, #1
 80087bc:	e7ef      	b.n	800879e <__gethex+0x156>
 80087be:	f04f 0b00 	mov.w	fp, #0
 80087c2:	f100 0914 	add.w	r9, r0, #20
 80087c6:	f1ca 0301 	rsb	r3, sl, #1
 80087ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80087ce:	f8cd b004 	str.w	fp, [sp, #4]
 80087d2:	9308      	str	r3, [sp, #32]
 80087d4:	42b7      	cmp	r7, r6
 80087d6:	d33f      	bcc.n	8008858 <__gethex+0x210>
 80087d8:	9f04      	ldr	r7, [sp, #16]
 80087da:	9b01      	ldr	r3, [sp, #4]
 80087dc:	f847 3b04 	str.w	r3, [r7], #4
 80087e0:	eba7 0709 	sub.w	r7, r7, r9
 80087e4:	10bf      	asrs	r7, r7, #2
 80087e6:	6127      	str	r7, [r4, #16]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fbc3 	bl	8008f74 <__hi0bits>
 80087ee:	017f      	lsls	r7, r7, #5
 80087f0:	f8d8 6000 	ldr.w	r6, [r8]
 80087f4:	1a3f      	subs	r7, r7, r0
 80087f6:	42b7      	cmp	r7, r6
 80087f8:	dd62      	ble.n	80088c0 <__gethex+0x278>
 80087fa:	1bbf      	subs	r7, r7, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 ff5d 	bl	80096be <__any_on>
 8008804:	4682      	mov	sl, r0
 8008806:	b1a8      	cbz	r0, 8008834 <__gethex+0x1ec>
 8008808:	f04f 0a01 	mov.w	sl, #1
 800880c:	1e7b      	subs	r3, r7, #1
 800880e:	1159      	asrs	r1, r3, #5
 8008810:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008814:	f003 021f 	and.w	r2, r3, #31
 8008818:	fa0a f202 	lsl.w	r2, sl, r2
 800881c:	420a      	tst	r2, r1
 800881e:	d009      	beq.n	8008834 <__gethex+0x1ec>
 8008820:	4553      	cmp	r3, sl
 8008822:	dd05      	ble.n	8008830 <__gethex+0x1e8>
 8008824:	4620      	mov	r0, r4
 8008826:	1eb9      	subs	r1, r7, #2
 8008828:	f000 ff49 	bl	80096be <__any_on>
 800882c:	2800      	cmp	r0, #0
 800882e:	d144      	bne.n	80088ba <__gethex+0x272>
 8008830:	f04f 0a02 	mov.w	sl, #2
 8008834:	4639      	mov	r1, r7
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff fe9d 	bl	8008576 <rshift>
 800883c:	443d      	add	r5, r7
 800883e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008842:	42ab      	cmp	r3, r5
 8008844:	da4a      	bge.n	80088dc <__gethex+0x294>
 8008846:	4621      	mov	r1, r4
 8008848:	9802      	ldr	r0, [sp, #8]
 800884a:	f000 fae1 	bl	8008e10 <_Bfree>
 800884e:	2300      	movs	r3, #0
 8008850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008852:	27a3      	movs	r7, #163	; 0xa3
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	e789      	b.n	800876c <__gethex+0x124>
 8008858:	1e73      	subs	r3, r6, #1
 800885a:	9a06      	ldr	r2, [sp, #24]
 800885c:	9307      	str	r3, [sp, #28]
 800885e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008862:	4293      	cmp	r3, r2
 8008864:	d019      	beq.n	800889a <__gethex+0x252>
 8008866:	f1bb 0f20 	cmp.w	fp, #32
 800886a:	d107      	bne.n	800887c <__gethex+0x234>
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	9a01      	ldr	r2, [sp, #4]
 8008870:	f843 2b04 	str.w	r2, [r3], #4
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	2300      	movs	r3, #0
 8008878:	469b      	mov	fp, r3
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008880:	f7ff fecc 	bl	800861c <__hexdig_fun>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	f000 000f 	and.w	r0, r0, #15
 800888a:	fa00 f00b 	lsl.w	r0, r0, fp
 800888e:	4303      	orrs	r3, r0
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	f10b 0b04 	add.w	fp, fp, #4
 8008896:	9b07      	ldr	r3, [sp, #28]
 8008898:	e00d      	b.n	80088b6 <__gethex+0x26e>
 800889a:	9a08      	ldr	r2, [sp, #32]
 800889c:	1e73      	subs	r3, r6, #1
 800889e:	4413      	add	r3, r2
 80088a0:	42bb      	cmp	r3, r7
 80088a2:	d3e0      	bcc.n	8008866 <__gethex+0x21e>
 80088a4:	4618      	mov	r0, r3
 80088a6:	4652      	mov	r2, sl
 80088a8:	9903      	ldr	r1, [sp, #12]
 80088aa:	9309      	str	r3, [sp, #36]	; 0x24
 80088ac:	f001 fa39 	bl	8009d22 <strncmp>
 80088b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1d7      	bne.n	8008866 <__gethex+0x21e>
 80088b6:	461e      	mov	r6, r3
 80088b8:	e78c      	b.n	80087d4 <__gethex+0x18c>
 80088ba:	f04f 0a03 	mov.w	sl, #3
 80088be:	e7b9      	b.n	8008834 <__gethex+0x1ec>
 80088c0:	da09      	bge.n	80088d6 <__gethex+0x28e>
 80088c2:	1bf7      	subs	r7, r6, r7
 80088c4:	4621      	mov	r1, r4
 80088c6:	463a      	mov	r2, r7
 80088c8:	9802      	ldr	r0, [sp, #8]
 80088ca:	f000 fcb9 	bl	8009240 <__lshift>
 80088ce:	4604      	mov	r4, r0
 80088d0:	1bed      	subs	r5, r5, r7
 80088d2:	f100 0914 	add.w	r9, r0, #20
 80088d6:	f04f 0a00 	mov.w	sl, #0
 80088da:	e7b0      	b.n	800883e <__gethex+0x1f6>
 80088dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80088e0:	42a8      	cmp	r0, r5
 80088e2:	dd72      	ble.n	80089ca <__gethex+0x382>
 80088e4:	1b45      	subs	r5, r0, r5
 80088e6:	42ae      	cmp	r6, r5
 80088e8:	dc35      	bgt.n	8008956 <__gethex+0x30e>
 80088ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d029      	beq.n	8008946 <__gethex+0x2fe>
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d02b      	beq.n	800894e <__gethex+0x306>
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d11c      	bne.n	8008934 <__gethex+0x2ec>
 80088fa:	42ae      	cmp	r6, r5
 80088fc:	d11a      	bne.n	8008934 <__gethex+0x2ec>
 80088fe:	2e01      	cmp	r6, #1
 8008900:	d112      	bne.n	8008928 <__gethex+0x2e0>
 8008902:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008906:	9a05      	ldr	r2, [sp, #20]
 8008908:	2762      	movs	r7, #98	; 0x62
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	2301      	movs	r3, #1
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	f8c9 3000 	str.w	r3, [r9]
 8008914:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008916:	601c      	str	r4, [r3, #0]
 8008918:	e728      	b.n	800876c <__gethex+0x124>
 800891a:	bf00      	nop
 800891c:	0800a454 	.word	0x0800a454
 8008920:	0800a379 	.word	0x0800a379
 8008924:	0800a3ec 	.word	0x0800a3ec
 8008928:	4620      	mov	r0, r4
 800892a:	1e71      	subs	r1, r6, #1
 800892c:	f000 fec7 	bl	80096be <__any_on>
 8008930:	2800      	cmp	r0, #0
 8008932:	d1e6      	bne.n	8008902 <__gethex+0x2ba>
 8008934:	4621      	mov	r1, r4
 8008936:	9802      	ldr	r0, [sp, #8]
 8008938:	f000 fa6a 	bl	8008e10 <_Bfree>
 800893c:	2300      	movs	r3, #0
 800893e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008940:	2750      	movs	r7, #80	; 0x50
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e712      	b.n	800876c <__gethex+0x124>
 8008946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f3      	bne.n	8008934 <__gethex+0x2ec>
 800894c:	e7d9      	b.n	8008902 <__gethex+0x2ba>
 800894e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1d6      	bne.n	8008902 <__gethex+0x2ba>
 8008954:	e7ee      	b.n	8008934 <__gethex+0x2ec>
 8008956:	1e6f      	subs	r7, r5, #1
 8008958:	f1ba 0f00 	cmp.w	sl, #0
 800895c:	d132      	bne.n	80089c4 <__gethex+0x37c>
 800895e:	b127      	cbz	r7, 800896a <__gethex+0x322>
 8008960:	4639      	mov	r1, r7
 8008962:	4620      	mov	r0, r4
 8008964:	f000 feab 	bl	80096be <__any_on>
 8008968:	4682      	mov	sl, r0
 800896a:	2101      	movs	r1, #1
 800896c:	117b      	asrs	r3, r7, #5
 800896e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008972:	f007 071f 	and.w	r7, r7, #31
 8008976:	fa01 f707 	lsl.w	r7, r1, r7
 800897a:	421f      	tst	r7, r3
 800897c:	f04f 0702 	mov.w	r7, #2
 8008980:	4629      	mov	r1, r5
 8008982:	4620      	mov	r0, r4
 8008984:	bf18      	it	ne
 8008986:	f04a 0a02 	orrne.w	sl, sl, #2
 800898a:	1b76      	subs	r6, r6, r5
 800898c:	f7ff fdf3 	bl	8008576 <rshift>
 8008990:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008994:	f1ba 0f00 	cmp.w	sl, #0
 8008998:	d048      	beq.n	8008a2c <__gethex+0x3e4>
 800899a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d015      	beq.n	80089ce <__gethex+0x386>
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d017      	beq.n	80089d6 <__gethex+0x38e>
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d109      	bne.n	80089be <__gethex+0x376>
 80089aa:	f01a 0f02 	tst.w	sl, #2
 80089ae:	d006      	beq.n	80089be <__gethex+0x376>
 80089b0:	f8d9 0000 	ldr.w	r0, [r9]
 80089b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80089b8:	f01a 0f01 	tst.w	sl, #1
 80089bc:	d10e      	bne.n	80089dc <__gethex+0x394>
 80089be:	f047 0710 	orr.w	r7, r7, #16
 80089c2:	e033      	b.n	8008a2c <__gethex+0x3e4>
 80089c4:	f04f 0a01 	mov.w	sl, #1
 80089c8:	e7cf      	b.n	800896a <__gethex+0x322>
 80089ca:	2701      	movs	r7, #1
 80089cc:	e7e2      	b.n	8008994 <__gethex+0x34c>
 80089ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d0:	f1c3 0301 	rsb	r3, r3, #1
 80089d4:	9315      	str	r3, [sp, #84]	; 0x54
 80089d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0f0      	beq.n	80089be <__gethex+0x376>
 80089dc:	f04f 0c00 	mov.w	ip, #0
 80089e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089e4:	f104 0314 	add.w	r3, r4, #20
 80089e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089fa:	d01c      	beq.n	8008a36 <__gethex+0x3ee>
 80089fc:	3201      	adds	r2, #1
 80089fe:	6002      	str	r2, [r0, #0]
 8008a00:	2f02      	cmp	r7, #2
 8008a02:	f104 0314 	add.w	r3, r4, #20
 8008a06:	d13d      	bne.n	8008a84 <__gethex+0x43c>
 8008a08:	f8d8 2000 	ldr.w	r2, [r8]
 8008a0c:	3a01      	subs	r2, #1
 8008a0e:	42b2      	cmp	r2, r6
 8008a10:	d10a      	bne.n	8008a28 <__gethex+0x3e0>
 8008a12:	2201      	movs	r2, #1
 8008a14:	1171      	asrs	r1, r6, #5
 8008a16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a1a:	f006 061f 	and.w	r6, r6, #31
 8008a1e:	fa02 f606 	lsl.w	r6, r2, r6
 8008a22:	421e      	tst	r6, r3
 8008a24:	bf18      	it	ne
 8008a26:	4617      	movne	r7, r2
 8008a28:	f047 0720 	orr.w	r7, r7, #32
 8008a2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a2e:	601c      	str	r4, [r3, #0]
 8008a30:	9b05      	ldr	r3, [sp, #20]
 8008a32:	601d      	str	r5, [r3, #0]
 8008a34:	e69a      	b.n	800876c <__gethex+0x124>
 8008a36:	4299      	cmp	r1, r3
 8008a38:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a3c:	d8d8      	bhi.n	80089f0 <__gethex+0x3a8>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	459b      	cmp	fp, r3
 8008a42:	db17      	blt.n	8008a74 <__gethex+0x42c>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	9802      	ldr	r0, [sp, #8]
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f000 f9a1 	bl	8008d90 <_Balloc>
 8008a4e:	4681      	mov	r9, r0
 8008a50:	b918      	cbnz	r0, 8008a5a <__gethex+0x412>
 8008a52:	4602      	mov	r2, r0
 8008a54:	2184      	movs	r1, #132	; 0x84
 8008a56:	4b19      	ldr	r3, [pc, #100]	; (8008abc <__gethex+0x474>)
 8008a58:	e6ab      	b.n	80087b2 <__gethex+0x16a>
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	f104 010c 	add.w	r1, r4, #12
 8008a60:	3202      	adds	r2, #2
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	300c      	adds	r0, #12
 8008a66:	f000 f979 	bl	8008d5c <memcpy>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	9802      	ldr	r0, [sp, #8]
 8008a6e:	f000 f9cf 	bl	8008e10 <_Bfree>
 8008a72:	464c      	mov	r4, r9
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	6122      	str	r2, [r4, #16]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a80:	615a      	str	r2, [r3, #20]
 8008a82:	e7bd      	b.n	8008a00 <__gethex+0x3b8>
 8008a84:	6922      	ldr	r2, [r4, #16]
 8008a86:	455a      	cmp	r2, fp
 8008a88:	dd0b      	ble.n	8008aa2 <__gethex+0x45a>
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7ff fd72 	bl	8008576 <rshift>
 8008a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a96:	3501      	adds	r5, #1
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	f6ff aed4 	blt.w	8008846 <__gethex+0x1fe>
 8008a9e:	2701      	movs	r7, #1
 8008aa0:	e7c2      	b.n	8008a28 <__gethex+0x3e0>
 8008aa2:	f016 061f 	ands.w	r6, r6, #31
 8008aa6:	d0fa      	beq.n	8008a9e <__gethex+0x456>
 8008aa8:	4453      	add	r3, sl
 8008aaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008aae:	f000 fa61 	bl	8008f74 <__hi0bits>
 8008ab2:	f1c6 0620 	rsb	r6, r6, #32
 8008ab6:	42b0      	cmp	r0, r6
 8008ab8:	dbe7      	blt.n	8008a8a <__gethex+0x442>
 8008aba:	e7f0      	b.n	8008a9e <__gethex+0x456>
 8008abc:	0800a379 	.word	0x0800a379

08008ac0 <L_shift>:
 8008ac0:	f1c2 0208 	rsb	r2, r2, #8
 8008ac4:	0092      	lsls	r2, r2, #2
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	f1c2 0620 	rsb	r6, r2, #32
 8008acc:	6843      	ldr	r3, [r0, #4]
 8008ace:	6804      	ldr	r4, [r0, #0]
 8008ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8008ad4:	432c      	orrs	r4, r5
 8008ad6:	40d3      	lsrs	r3, r2
 8008ad8:	6004      	str	r4, [r0, #0]
 8008ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ade:	4288      	cmp	r0, r1
 8008ae0:	d3f4      	bcc.n	8008acc <L_shift+0xc>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}

08008ae4 <__match>:
 8008ae4:	b530      	push	{r4, r5, lr}
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aee:	b914      	cbnz	r4, 8008af6 <__match+0x12>
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	bd30      	pop	{r4, r5, pc}
 8008af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008afa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008afe:	2d19      	cmp	r5, #25
 8008b00:	bf98      	it	ls
 8008b02:	3220      	addls	r2, #32
 8008b04:	42a2      	cmp	r2, r4
 8008b06:	d0f0      	beq.n	8008aea <__match+0x6>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7f3      	b.n	8008af4 <__match+0x10>

08008b0c <__hexnan>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	2500      	movs	r5, #0
 8008b12:	680b      	ldr	r3, [r1, #0]
 8008b14:	4682      	mov	sl, r0
 8008b16:	115e      	asrs	r6, r3, #5
 8008b18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b1c:	f013 031f 	ands.w	r3, r3, #31
 8008b20:	bf18      	it	ne
 8008b22:	3604      	addne	r6, #4
 8008b24:	1f37      	subs	r7, r6, #4
 8008b26:	46b9      	mov	r9, r7
 8008b28:	463c      	mov	r4, r7
 8008b2a:	46ab      	mov	fp, r5
 8008b2c:	b087      	sub	sp, #28
 8008b2e:	4690      	mov	r8, r2
 8008b30:	6802      	ldr	r2, [r0, #0]
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b38:	9502      	str	r5, [sp, #8]
 8008b3a:	7851      	ldrb	r1, [r2, #1]
 8008b3c:	1c53      	adds	r3, r2, #1
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	b341      	cbz	r1, 8008b94 <__hexnan+0x88>
 8008b42:	4608      	mov	r0, r1
 8008b44:	9205      	str	r2, [sp, #20]
 8008b46:	9104      	str	r1, [sp, #16]
 8008b48:	f7ff fd68 	bl	800861c <__hexdig_fun>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d14f      	bne.n	8008bf0 <__hexnan+0xe4>
 8008b50:	9904      	ldr	r1, [sp, #16]
 8008b52:	9a05      	ldr	r2, [sp, #20]
 8008b54:	2920      	cmp	r1, #32
 8008b56:	d818      	bhi.n	8008b8a <__hexnan+0x7e>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	459b      	cmp	fp, r3
 8008b5c:	dd13      	ble.n	8008b86 <__hexnan+0x7a>
 8008b5e:	454c      	cmp	r4, r9
 8008b60:	d206      	bcs.n	8008b70 <__hexnan+0x64>
 8008b62:	2d07      	cmp	r5, #7
 8008b64:	dc04      	bgt.n	8008b70 <__hexnan+0x64>
 8008b66:	462a      	mov	r2, r5
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff ffa8 	bl	8008ac0 <L_shift>
 8008b70:	4544      	cmp	r4, r8
 8008b72:	d950      	bls.n	8008c16 <__hexnan+0x10a>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f1a4 0904 	sub.w	r9, r4, #4
 8008b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b7e:	461d      	mov	r5, r3
 8008b80:	464c      	mov	r4, r9
 8008b82:	f8cd b008 	str.w	fp, [sp, #8]
 8008b86:	9a03      	ldr	r2, [sp, #12]
 8008b88:	e7d7      	b.n	8008b3a <__hexnan+0x2e>
 8008b8a:	2929      	cmp	r1, #41	; 0x29
 8008b8c:	d156      	bne.n	8008c3c <__hexnan+0x130>
 8008b8e:	3202      	adds	r2, #2
 8008b90:	f8ca 2000 	str.w	r2, [sl]
 8008b94:	f1bb 0f00 	cmp.w	fp, #0
 8008b98:	d050      	beq.n	8008c3c <__hexnan+0x130>
 8008b9a:	454c      	cmp	r4, r9
 8008b9c:	d206      	bcs.n	8008bac <__hexnan+0xa0>
 8008b9e:	2d07      	cmp	r5, #7
 8008ba0:	dc04      	bgt.n	8008bac <__hexnan+0xa0>
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff ff8a 	bl	8008ac0 <L_shift>
 8008bac:	4544      	cmp	r4, r8
 8008bae:	d934      	bls.n	8008c1a <__hexnan+0x10e>
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	f1a8 0204 	sub.w	r2, r8, #4
 8008bb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008bba:	429f      	cmp	r7, r3
 8008bbc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bc0:	d2f9      	bcs.n	8008bb6 <__hexnan+0xaa>
 8008bc2:	1b3b      	subs	r3, r7, r4
 8008bc4:	f023 0303 	bic.w	r3, r3, #3
 8008bc8:	3304      	adds	r3, #4
 8008bca:	3401      	adds	r4, #1
 8008bcc:	3e03      	subs	r6, #3
 8008bce:	42b4      	cmp	r4, r6
 8008bd0:	bf88      	it	hi
 8008bd2:	2304      	movhi	r3, #4
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4443      	add	r3, r8
 8008bd8:	f843 2b04 	str.w	r2, [r3], #4
 8008bdc:	429f      	cmp	r7, r3
 8008bde:	d2fb      	bcs.n	8008bd8 <__hexnan+0xcc>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	b91b      	cbnz	r3, 8008bec <__hexnan+0xe0>
 8008be4:	4547      	cmp	r7, r8
 8008be6:	d127      	bne.n	8008c38 <__hexnan+0x12c>
 8008be8:	2301      	movs	r3, #1
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	2005      	movs	r0, #5
 8008bee:	e026      	b.n	8008c3e <__hexnan+0x132>
 8008bf0:	3501      	adds	r5, #1
 8008bf2:	2d08      	cmp	r5, #8
 8008bf4:	f10b 0b01 	add.w	fp, fp, #1
 8008bf8:	dd06      	ble.n	8008c08 <__hexnan+0xfc>
 8008bfa:	4544      	cmp	r4, r8
 8008bfc:	d9c3      	bls.n	8008b86 <__hexnan+0x7a>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2501      	movs	r5, #1
 8008c02:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c06:	3c04      	subs	r4, #4
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	f000 000f 	and.w	r0, r0, #15
 8008c0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008c12:	6022      	str	r2, [r4, #0]
 8008c14:	e7b7      	b.n	8008b86 <__hexnan+0x7a>
 8008c16:	2508      	movs	r5, #8
 8008c18:	e7b5      	b.n	8008b86 <__hexnan+0x7a>
 8008c1a:	9b01      	ldr	r3, [sp, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0df      	beq.n	8008be0 <__hexnan+0xd4>
 8008c20:	f04f 32ff 	mov.w	r2, #4294967295
 8008c24:	f1c3 0320 	rsb	r3, r3, #32
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c30:	401a      	ands	r2, r3
 8008c32:	f846 2c04 	str.w	r2, [r6, #-4]
 8008c36:	e7d3      	b.n	8008be0 <__hexnan+0xd4>
 8008c38:	3f04      	subs	r7, #4
 8008c3a:	e7d1      	b.n	8008be0 <__hexnan+0xd4>
 8008c3c:	2004      	movs	r0, #4
 8008c3e:	b007      	add	sp, #28
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c44 <_localeconv_r>:
 8008c44:	4800      	ldr	r0, [pc, #0]	; (8008c48 <_localeconv_r+0x4>)
 8008c46:	4770      	bx	lr
 8008c48:	20000174 	.word	0x20000174

08008c4c <__retarget_lock_init_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_acquire_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <__retarget_lock_release_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__swhatbuf_r>:
 8008c52:	b570      	push	{r4, r5, r6, lr}
 8008c54:	460e      	mov	r6, r1
 8008c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5a:	4614      	mov	r4, r2
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	461d      	mov	r5, r3
 8008c60:	b096      	sub	sp, #88	; 0x58
 8008c62:	da08      	bge.n	8008c76 <__swhatbuf_r+0x24>
 8008c64:	2200      	movs	r2, #0
 8008c66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c6a:	602a      	str	r2, [r5, #0]
 8008c6c:	061a      	lsls	r2, r3, #24
 8008c6e:	d410      	bmi.n	8008c92 <__swhatbuf_r+0x40>
 8008c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c74:	e00e      	b.n	8008c94 <__swhatbuf_r+0x42>
 8008c76:	466a      	mov	r2, sp
 8008c78:	f001 f89e 	bl	8009db8 <_fstat_r>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dbf1      	blt.n	8008c64 <__swhatbuf_r+0x12>
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c8a:	425a      	negs	r2, r3
 8008c8c:	415a      	adcs	r2, r3
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	e7ee      	b.n	8008c70 <__swhatbuf_r+0x1e>
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	2000      	movs	r0, #0
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	b016      	add	sp, #88	; 0x58
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}

08008c9c <__smakebuf_r>:
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca0:	079d      	lsls	r5, r3, #30
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	d507      	bpl.n	8008cb8 <__smakebuf_r+0x1c>
 8008ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	466a      	mov	r2, sp
 8008cba:	ab01      	add	r3, sp, #4
 8008cbc:	f7ff ffc9 	bl	8008c52 <__swhatbuf_r>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7fc fe7f 	bl	80059c8 <_malloc_r>
 8008cca:	b948      	cbnz	r0, 8008ce0 <__smakebuf_r+0x44>
 8008ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d4ef      	bmi.n	8008cb4 <__smakebuf_r+0x18>
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e7e3      	b.n	8008ca8 <__smakebuf_r+0xc>
 8008ce0:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <__smakebuf_r+0x7c>)
 8008ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	9b00      	ldr	r3, [sp, #0]
 8008cf0:	6120      	str	r0, [r4, #16]
 8008cf2:	6163      	str	r3, [r4, #20]
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x74>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfe:	f001 f86d 	bl	8009ddc <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x74>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a0      	ldrh	r0, [r4, #12]
 8008d12:	4305      	orrs	r5, r0
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cd      	b.n	8008cb4 <__smakebuf_r+0x18>
 8008d18:	080083b1 	.word	0x080083b1

08008d1c <__ascii_mbtowc>:
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	b901      	cbnz	r1, 8008d22 <__ascii_mbtowc+0x6>
 8008d20:	a901      	add	r1, sp, #4
 8008d22:	b142      	cbz	r2, 8008d36 <__ascii_mbtowc+0x1a>
 8008d24:	b14b      	cbz	r3, 8008d3a <__ascii_mbtowc+0x1e>
 8008d26:	7813      	ldrb	r3, [r2, #0]
 8008d28:	600b      	str	r3, [r1, #0]
 8008d2a:	7812      	ldrb	r2, [r2, #0]
 8008d2c:	1e10      	subs	r0, r2, #0
 8008d2e:	bf18      	it	ne
 8008d30:	2001      	movne	r0, #1
 8008d32:	b002      	add	sp, #8
 8008d34:	4770      	bx	lr
 8008d36:	4610      	mov	r0, r2
 8008d38:	e7fb      	b.n	8008d32 <__ascii_mbtowc+0x16>
 8008d3a:	f06f 0001 	mvn.w	r0, #1
 8008d3e:	e7f8      	b.n	8008d32 <__ascii_mbtowc+0x16>

08008d40 <memchr>:
 8008d40:	4603      	mov	r3, r0
 8008d42:	b510      	push	{r4, lr}
 8008d44:	b2c9      	uxtb	r1, r1
 8008d46:	4402      	add	r2, r0
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	d101      	bne.n	8008d52 <memchr+0x12>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e003      	b.n	8008d5a <memchr+0x1a>
 8008d52:	7804      	ldrb	r4, [r0, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	428c      	cmp	r4, r1
 8008d58:	d1f6      	bne.n	8008d48 <memchr+0x8>
 8008d5a:	bd10      	pop	{r4, pc}

08008d5c <memcpy>:
 8008d5c:	440a      	add	r2, r1
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d64:	d100      	bne.n	8008d68 <memcpy+0xc>
 8008d66:	4770      	bx	lr
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	d1f9      	bne.n	8008d6a <memcpy+0xe>
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <__malloc_lock>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__malloc_lock+0x8>)
 8008d7a:	f7ff bf68 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20000460 	.word	0x20000460

08008d84 <__malloc_unlock>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__malloc_unlock+0x8>)
 8008d86:	f7ff bf63 	b.w	8008c50 <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	20000460 	.word	0x20000460

08008d90 <_Balloc>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d94:	4604      	mov	r4, r0
 8008d96:	460d      	mov	r5, r1
 8008d98:	b976      	cbnz	r6, 8008db8 <_Balloc+0x28>
 8008d9a:	2010      	movs	r0, #16
 8008d9c:	f7fc fd9c 	bl	80058d8 <malloc>
 8008da0:	4602      	mov	r2, r0
 8008da2:	6260      	str	r0, [r4, #36]	; 0x24
 8008da4:	b920      	cbnz	r0, 8008db0 <_Balloc+0x20>
 8008da6:	2166      	movs	r1, #102	; 0x66
 8008da8:	4b17      	ldr	r3, [pc, #92]	; (8008e08 <_Balloc+0x78>)
 8008daa:	4818      	ldr	r0, [pc, #96]	; (8008e0c <_Balloc+0x7c>)
 8008dac:	f7fe fb86 	bl	80074bc <__assert_func>
 8008db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008db4:	6006      	str	r6, [r0, #0]
 8008db6:	60c6      	str	r6, [r0, #12]
 8008db8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dba:	68f3      	ldr	r3, [r6, #12]
 8008dbc:	b183      	cbz	r3, 8008de0 <_Balloc+0x50>
 8008dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dc6:	b9b8      	cbnz	r0, 8008df8 <_Balloc+0x68>
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f605 	lsl.w	r6, r1, r5
 8008dce:	1d72      	adds	r2, r6, #5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	0092      	lsls	r2, r2, #2
 8008dd4:	f000 fc94 	bl	8009700 <_calloc_r>
 8008dd8:	b160      	cbz	r0, 8008df4 <_Balloc+0x64>
 8008dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dde:	e00e      	b.n	8008dfe <_Balloc+0x6e>
 8008de0:	2221      	movs	r2, #33	; 0x21
 8008de2:	2104      	movs	r1, #4
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fc8b 	bl	8009700 <_calloc_r>
 8008dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dec:	60f0      	str	r0, [r6, #12]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e4      	bne.n	8008dbe <_Balloc+0x2e>
 8008df4:	2000      	movs	r0, #0
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	6802      	ldr	r2, [r0, #0]
 8008dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e04:	e7f7      	b.n	8008df6 <_Balloc+0x66>
 8008e06:	bf00      	nop
 8008e08:	0800a160 	.word	0x0800a160
 8008e0c:	0800a468 	.word	0x0800a468

08008e10 <_Bfree>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e14:	4605      	mov	r5, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	b976      	cbnz	r6, 8008e38 <_Bfree+0x28>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	f7fc fd5c 	bl	80058d8 <malloc>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6268      	str	r0, [r5, #36]	; 0x24
 8008e24:	b920      	cbnz	r0, 8008e30 <_Bfree+0x20>
 8008e26:	218a      	movs	r1, #138	; 0x8a
 8008e28:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <_Bfree+0x3c>)
 8008e2a:	4809      	ldr	r0, [pc, #36]	; (8008e50 <_Bfree+0x40>)
 8008e2c:	f7fe fb46 	bl	80074bc <__assert_func>
 8008e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e34:	6006      	str	r6, [r0, #0]
 8008e36:	60c6      	str	r6, [r0, #12]
 8008e38:	b13c      	cbz	r4, 8008e4a <_Bfree+0x3a>
 8008e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e3c:	6862      	ldr	r2, [r4, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e44:	6021      	str	r1, [r4, #0]
 8008e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	0800a160 	.word	0x0800a160
 8008e50:	0800a468 	.word	0x0800a468

08008e54 <__multadd>:
 8008e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e58:	4607      	mov	r7, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	461e      	mov	r6, r3
 8008e5e:	2000      	movs	r0, #0
 8008e60:	690d      	ldr	r5, [r1, #16]
 8008e62:	f101 0c14 	add.w	ip, r1, #20
 8008e66:	f8dc 3000 	ldr.w	r3, [ip]
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	b299      	uxth	r1, r3
 8008e6e:	fb02 6101 	mla	r1, r2, r1, r6
 8008e72:	0c1e      	lsrs	r6, r3, #16
 8008e74:	0c0b      	lsrs	r3, r1, #16
 8008e76:	fb02 3306 	mla	r3, r2, r6, r3
 8008e7a:	b289      	uxth	r1, r1
 8008e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e80:	4285      	cmp	r5, r0
 8008e82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e86:	f84c 1b04 	str.w	r1, [ip], #4
 8008e8a:	dcec      	bgt.n	8008e66 <__multadd+0x12>
 8008e8c:	b30e      	cbz	r6, 8008ed2 <__multadd+0x7e>
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	42ab      	cmp	r3, r5
 8008e92:	dc19      	bgt.n	8008ec8 <__multadd+0x74>
 8008e94:	6861      	ldr	r1, [r4, #4]
 8008e96:	4638      	mov	r0, r7
 8008e98:	3101      	adds	r1, #1
 8008e9a:	f7ff ff79 	bl	8008d90 <_Balloc>
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	b928      	cbnz	r0, 8008eae <__multadd+0x5a>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	21b5      	movs	r1, #181	; 0xb5
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <__multadd+0x84>)
 8008ea8:	480c      	ldr	r0, [pc, #48]	; (8008edc <__multadd+0x88>)
 8008eaa:	f7fe fb07 	bl	80074bc <__assert_func>
 8008eae:	6922      	ldr	r2, [r4, #16]
 8008eb0:	f104 010c 	add.w	r1, r4, #12
 8008eb4:	3202      	adds	r2, #2
 8008eb6:	0092      	lsls	r2, r2, #2
 8008eb8:	300c      	adds	r0, #12
 8008eba:	f7ff ff4f 	bl	8008d5c <memcpy>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ffa5 	bl	8008e10 <_Bfree>
 8008ec6:	4644      	mov	r4, r8
 8008ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ecc:	3501      	adds	r5, #1
 8008ece:	615e      	str	r6, [r3, #20]
 8008ed0:	6125      	str	r5, [r4, #16]
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed8:	0800a379 	.word	0x0800a379
 8008edc:	0800a468 	.word	0x0800a468

08008ee0 <__s2b>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	2209      	movs	r2, #9
 8008ee8:	461f      	mov	r7, r3
 8008eea:	3308      	adds	r3, #8
 8008eec:	460c      	mov	r4, r1
 8008eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	db09      	blt.n	8008f10 <__s2b+0x30>
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7ff ff47 	bl	8008d90 <_Balloc>
 8008f02:	b940      	cbnz	r0, 8008f16 <__s2b+0x36>
 8008f04:	4602      	mov	r2, r0
 8008f06:	21ce      	movs	r1, #206	; 0xce
 8008f08:	4b18      	ldr	r3, [pc, #96]	; (8008f6c <__s2b+0x8c>)
 8008f0a:	4819      	ldr	r0, [pc, #100]	; (8008f70 <__s2b+0x90>)
 8008f0c:	f7fe fad6 	bl	80074bc <__assert_func>
 8008f10:	0052      	lsls	r2, r2, #1
 8008f12:	3101      	adds	r1, #1
 8008f14:	e7f0      	b.n	8008ef8 <__s2b+0x18>
 8008f16:	9b08      	ldr	r3, [sp, #32]
 8008f18:	2d09      	cmp	r5, #9
 8008f1a:	6143      	str	r3, [r0, #20]
 8008f1c:	f04f 0301 	mov.w	r3, #1
 8008f20:	6103      	str	r3, [r0, #16]
 8008f22:	dd16      	ble.n	8008f52 <__s2b+0x72>
 8008f24:	f104 0909 	add.w	r9, r4, #9
 8008f28:	46c8      	mov	r8, r9
 8008f2a:	442c      	add	r4, r5
 8008f2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f30:	4601      	mov	r1, r0
 8008f32:	220a      	movs	r2, #10
 8008f34:	4630      	mov	r0, r6
 8008f36:	3b30      	subs	r3, #48	; 0x30
 8008f38:	f7ff ff8c 	bl	8008e54 <__multadd>
 8008f3c:	45a0      	cmp	r8, r4
 8008f3e:	d1f5      	bne.n	8008f2c <__s2b+0x4c>
 8008f40:	f1a5 0408 	sub.w	r4, r5, #8
 8008f44:	444c      	add	r4, r9
 8008f46:	1b2d      	subs	r5, r5, r4
 8008f48:	1963      	adds	r3, r4, r5
 8008f4a:	42bb      	cmp	r3, r7
 8008f4c:	db04      	blt.n	8008f58 <__s2b+0x78>
 8008f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f52:	2509      	movs	r5, #9
 8008f54:	340a      	adds	r4, #10
 8008f56:	e7f6      	b.n	8008f46 <__s2b+0x66>
 8008f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f5c:	4601      	mov	r1, r0
 8008f5e:	220a      	movs	r2, #10
 8008f60:	4630      	mov	r0, r6
 8008f62:	3b30      	subs	r3, #48	; 0x30
 8008f64:	f7ff ff76 	bl	8008e54 <__multadd>
 8008f68:	e7ee      	b.n	8008f48 <__s2b+0x68>
 8008f6a:	bf00      	nop
 8008f6c:	0800a379 	.word	0x0800a379
 8008f70:	0800a468 	.word	0x0800a468

08008f74 <__hi0bits>:
 8008f74:	0c02      	lsrs	r2, r0, #16
 8008f76:	0412      	lsls	r2, r2, #16
 8008f78:	4603      	mov	r3, r0
 8008f7a:	b9ca      	cbnz	r2, 8008fb0 <__hi0bits+0x3c>
 8008f7c:	0403      	lsls	r3, r0, #16
 8008f7e:	2010      	movs	r0, #16
 8008f80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f84:	bf04      	itt	eq
 8008f86:	021b      	lsleq	r3, r3, #8
 8008f88:	3008      	addeq	r0, #8
 8008f8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f8e:	bf04      	itt	eq
 8008f90:	011b      	lsleq	r3, r3, #4
 8008f92:	3004      	addeq	r0, #4
 8008f94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f98:	bf04      	itt	eq
 8008f9a:	009b      	lsleq	r3, r3, #2
 8008f9c:	3002      	addeq	r0, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	db05      	blt.n	8008fae <__hi0bits+0x3a>
 8008fa2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008fa6:	f100 0001 	add.w	r0, r0, #1
 8008faa:	bf08      	it	eq
 8008fac:	2020      	moveq	r0, #32
 8008fae:	4770      	bx	lr
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7e5      	b.n	8008f80 <__hi0bits+0xc>

08008fb4 <__lo0bits>:
 8008fb4:	6803      	ldr	r3, [r0, #0]
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	f013 0007 	ands.w	r0, r3, #7
 8008fbc:	d00b      	beq.n	8008fd6 <__lo0bits+0x22>
 8008fbe:	07d9      	lsls	r1, r3, #31
 8008fc0:	d421      	bmi.n	8009006 <__lo0bits+0x52>
 8008fc2:	0798      	lsls	r0, r3, #30
 8008fc4:	bf49      	itett	mi
 8008fc6:	085b      	lsrmi	r3, r3, #1
 8008fc8:	089b      	lsrpl	r3, r3, #2
 8008fca:	2001      	movmi	r0, #1
 8008fcc:	6013      	strmi	r3, [r2, #0]
 8008fce:	bf5c      	itt	pl
 8008fd0:	2002      	movpl	r0, #2
 8008fd2:	6013      	strpl	r3, [r2, #0]
 8008fd4:	4770      	bx	lr
 8008fd6:	b299      	uxth	r1, r3
 8008fd8:	b909      	cbnz	r1, 8008fde <__lo0bits+0x2a>
 8008fda:	2010      	movs	r0, #16
 8008fdc:	0c1b      	lsrs	r3, r3, #16
 8008fde:	b2d9      	uxtb	r1, r3
 8008fe0:	b909      	cbnz	r1, 8008fe6 <__lo0bits+0x32>
 8008fe2:	3008      	adds	r0, #8
 8008fe4:	0a1b      	lsrs	r3, r3, #8
 8008fe6:	0719      	lsls	r1, r3, #28
 8008fe8:	bf04      	itt	eq
 8008fea:	091b      	lsreq	r3, r3, #4
 8008fec:	3004      	addeq	r0, #4
 8008fee:	0799      	lsls	r1, r3, #30
 8008ff0:	bf04      	itt	eq
 8008ff2:	089b      	lsreq	r3, r3, #2
 8008ff4:	3002      	addeq	r0, #2
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d403      	bmi.n	8009002 <__lo0bits+0x4e>
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	f100 0001 	add.w	r0, r0, #1
 8009000:	d003      	beq.n	800900a <__lo0bits+0x56>
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	4770      	bx	lr
 8009006:	2000      	movs	r0, #0
 8009008:	4770      	bx	lr
 800900a:	2020      	movs	r0, #32
 800900c:	4770      	bx	lr
	...

08009010 <__i2b>:
 8009010:	b510      	push	{r4, lr}
 8009012:	460c      	mov	r4, r1
 8009014:	2101      	movs	r1, #1
 8009016:	f7ff febb 	bl	8008d90 <_Balloc>
 800901a:	4602      	mov	r2, r0
 800901c:	b928      	cbnz	r0, 800902a <__i2b+0x1a>
 800901e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009022:	4b04      	ldr	r3, [pc, #16]	; (8009034 <__i2b+0x24>)
 8009024:	4804      	ldr	r0, [pc, #16]	; (8009038 <__i2b+0x28>)
 8009026:	f7fe fa49 	bl	80074bc <__assert_func>
 800902a:	2301      	movs	r3, #1
 800902c:	6144      	str	r4, [r0, #20]
 800902e:	6103      	str	r3, [r0, #16]
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	0800a379 	.word	0x0800a379
 8009038:	0800a468 	.word	0x0800a468

0800903c <__multiply>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4691      	mov	r9, r2
 8009042:	690a      	ldr	r2, [r1, #16]
 8009044:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009048:	460c      	mov	r4, r1
 800904a:	429a      	cmp	r2, r3
 800904c:	bfbe      	ittt	lt
 800904e:	460b      	movlt	r3, r1
 8009050:	464c      	movlt	r4, r9
 8009052:	4699      	movlt	r9, r3
 8009054:	6927      	ldr	r7, [r4, #16]
 8009056:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	6861      	ldr	r1, [r4, #4]
 800905e:	eb07 060a 	add.w	r6, r7, sl
 8009062:	42b3      	cmp	r3, r6
 8009064:	b085      	sub	sp, #20
 8009066:	bfb8      	it	lt
 8009068:	3101      	addlt	r1, #1
 800906a:	f7ff fe91 	bl	8008d90 <_Balloc>
 800906e:	b930      	cbnz	r0, 800907e <__multiply+0x42>
 8009070:	4602      	mov	r2, r0
 8009072:	f240 115d 	movw	r1, #349	; 0x15d
 8009076:	4b43      	ldr	r3, [pc, #268]	; (8009184 <__multiply+0x148>)
 8009078:	4843      	ldr	r0, [pc, #268]	; (8009188 <__multiply+0x14c>)
 800907a:	f7fe fa1f 	bl	80074bc <__assert_func>
 800907e:	f100 0514 	add.w	r5, r0, #20
 8009082:	462b      	mov	r3, r5
 8009084:	2200      	movs	r2, #0
 8009086:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800908a:	4543      	cmp	r3, r8
 800908c:	d321      	bcc.n	80090d2 <__multiply+0x96>
 800908e:	f104 0314 	add.w	r3, r4, #20
 8009092:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009096:	f109 0314 	add.w	r3, r9, #20
 800909a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800909e:	9202      	str	r2, [sp, #8]
 80090a0:	1b3a      	subs	r2, r7, r4
 80090a2:	3a15      	subs	r2, #21
 80090a4:	f022 0203 	bic.w	r2, r2, #3
 80090a8:	3204      	adds	r2, #4
 80090aa:	f104 0115 	add.w	r1, r4, #21
 80090ae:	428f      	cmp	r7, r1
 80090b0:	bf38      	it	cc
 80090b2:	2204      	movcc	r2, #4
 80090b4:	9201      	str	r2, [sp, #4]
 80090b6:	9a02      	ldr	r2, [sp, #8]
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d80c      	bhi.n	80090d8 <__multiply+0x9c>
 80090be:	2e00      	cmp	r6, #0
 80090c0:	dd03      	ble.n	80090ca <__multiply+0x8e>
 80090c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d059      	beq.n	800917e <__multiply+0x142>
 80090ca:	6106      	str	r6, [r0, #16]
 80090cc:	b005      	add	sp, #20
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	f843 2b04 	str.w	r2, [r3], #4
 80090d6:	e7d8      	b.n	800908a <__multiply+0x4e>
 80090d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80090dc:	f1ba 0f00 	cmp.w	sl, #0
 80090e0:	d023      	beq.n	800912a <__multiply+0xee>
 80090e2:	46a9      	mov	r9, r5
 80090e4:	f04f 0c00 	mov.w	ip, #0
 80090e8:	f104 0e14 	add.w	lr, r4, #20
 80090ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090f0:	f8d9 1000 	ldr.w	r1, [r9]
 80090f4:	fa1f fb82 	uxth.w	fp, r2
 80090f8:	b289      	uxth	r1, r1
 80090fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80090fe:	4461      	add	r1, ip
 8009100:	f8d9 c000 	ldr.w	ip, [r9]
 8009104:	0c12      	lsrs	r2, r2, #16
 8009106:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800910a:	fb0a c202 	mla	r2, sl, r2, ip
 800910e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009112:	b289      	uxth	r1, r1
 8009114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009118:	4577      	cmp	r7, lr
 800911a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800911e:	f849 1b04 	str.w	r1, [r9], #4
 8009122:	d8e3      	bhi.n	80090ec <__multiply+0xb0>
 8009124:	9a01      	ldr	r2, [sp, #4]
 8009126:	f845 c002 	str.w	ip, [r5, r2]
 800912a:	9a03      	ldr	r2, [sp, #12]
 800912c:	3304      	adds	r3, #4
 800912e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009132:	f1b9 0f00 	cmp.w	r9, #0
 8009136:	d020      	beq.n	800917a <__multiply+0x13e>
 8009138:	46ae      	mov	lr, r5
 800913a:	f04f 0a00 	mov.w	sl, #0
 800913e:	6829      	ldr	r1, [r5, #0]
 8009140:	f104 0c14 	add.w	ip, r4, #20
 8009144:	f8bc b000 	ldrh.w	fp, [ip]
 8009148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800914c:	b289      	uxth	r1, r1
 800914e:	fb09 220b 	mla	r2, r9, fp, r2
 8009152:	4492      	add	sl, r2
 8009154:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009158:	f84e 1b04 	str.w	r1, [lr], #4
 800915c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009160:	f8be 1000 	ldrh.w	r1, [lr]
 8009164:	0c12      	lsrs	r2, r2, #16
 8009166:	fb09 1102 	mla	r1, r9, r2, r1
 800916a:	4567      	cmp	r7, ip
 800916c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009174:	d8e6      	bhi.n	8009144 <__multiply+0x108>
 8009176:	9a01      	ldr	r2, [sp, #4]
 8009178:	50a9      	str	r1, [r5, r2]
 800917a:	3504      	adds	r5, #4
 800917c:	e79b      	b.n	80090b6 <__multiply+0x7a>
 800917e:	3e01      	subs	r6, #1
 8009180:	e79d      	b.n	80090be <__multiply+0x82>
 8009182:	bf00      	nop
 8009184:	0800a379 	.word	0x0800a379
 8009188:	0800a468 	.word	0x0800a468

0800918c <__pow5mult>:
 800918c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009190:	4615      	mov	r5, r2
 8009192:	f012 0203 	ands.w	r2, r2, #3
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	d007      	beq.n	80091ac <__pow5mult+0x20>
 800919c:	4c25      	ldr	r4, [pc, #148]	; (8009234 <__pow5mult+0xa8>)
 800919e:	3a01      	subs	r2, #1
 80091a0:	2300      	movs	r3, #0
 80091a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091a6:	f7ff fe55 	bl	8008e54 <__multadd>
 80091aa:	4607      	mov	r7, r0
 80091ac:	10ad      	asrs	r5, r5, #2
 80091ae:	d03d      	beq.n	800922c <__pow5mult+0xa0>
 80091b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091b2:	b97c      	cbnz	r4, 80091d4 <__pow5mult+0x48>
 80091b4:	2010      	movs	r0, #16
 80091b6:	f7fc fb8f 	bl	80058d8 <malloc>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6270      	str	r0, [r6, #36]	; 0x24
 80091be:	b928      	cbnz	r0, 80091cc <__pow5mult+0x40>
 80091c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091c4:	4b1c      	ldr	r3, [pc, #112]	; (8009238 <__pow5mult+0xac>)
 80091c6:	481d      	ldr	r0, [pc, #116]	; (800923c <__pow5mult+0xb0>)
 80091c8:	f7fe f978 	bl	80074bc <__assert_func>
 80091cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091d0:	6004      	str	r4, [r0, #0]
 80091d2:	60c4      	str	r4, [r0, #12]
 80091d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091dc:	b94c      	cbnz	r4, 80091f2 <__pow5mult+0x66>
 80091de:	f240 2171 	movw	r1, #625	; 0x271
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7ff ff14 	bl	8009010 <__i2b>
 80091e8:	2300      	movs	r3, #0
 80091ea:	4604      	mov	r4, r0
 80091ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80091f0:	6003      	str	r3, [r0, #0]
 80091f2:	f04f 0900 	mov.w	r9, #0
 80091f6:	07eb      	lsls	r3, r5, #31
 80091f8:	d50a      	bpl.n	8009210 <__pow5mult+0x84>
 80091fa:	4639      	mov	r1, r7
 80091fc:	4622      	mov	r2, r4
 80091fe:	4630      	mov	r0, r6
 8009200:	f7ff ff1c 	bl	800903c <__multiply>
 8009204:	4680      	mov	r8, r0
 8009206:	4639      	mov	r1, r7
 8009208:	4630      	mov	r0, r6
 800920a:	f7ff fe01 	bl	8008e10 <_Bfree>
 800920e:	4647      	mov	r7, r8
 8009210:	106d      	asrs	r5, r5, #1
 8009212:	d00b      	beq.n	800922c <__pow5mult+0xa0>
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	b938      	cbnz	r0, 8009228 <__pow5mult+0x9c>
 8009218:	4622      	mov	r2, r4
 800921a:	4621      	mov	r1, r4
 800921c:	4630      	mov	r0, r6
 800921e:	f7ff ff0d 	bl	800903c <__multiply>
 8009222:	6020      	str	r0, [r4, #0]
 8009224:	f8c0 9000 	str.w	r9, [r0]
 8009228:	4604      	mov	r4, r0
 800922a:	e7e4      	b.n	80091f6 <__pow5mult+0x6a>
 800922c:	4638      	mov	r0, r7
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	bf00      	nop
 8009234:	0800a5b8 	.word	0x0800a5b8
 8009238:	0800a160 	.word	0x0800a160
 800923c:	0800a468 	.word	0x0800a468

08009240 <__lshift>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	460c      	mov	r4, r1
 8009246:	4607      	mov	r7, r0
 8009248:	4691      	mov	r9, r2
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6849      	ldr	r1, [r1, #4]
 800924e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009258:	f108 0601 	add.w	r6, r8, #1
 800925c:	42b3      	cmp	r3, r6
 800925e:	db0b      	blt.n	8009278 <__lshift+0x38>
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff fd95 	bl	8008d90 <_Balloc>
 8009266:	4605      	mov	r5, r0
 8009268:	b948      	cbnz	r0, 800927e <__lshift+0x3e>
 800926a:	4602      	mov	r2, r0
 800926c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009270:	4b29      	ldr	r3, [pc, #164]	; (8009318 <__lshift+0xd8>)
 8009272:	482a      	ldr	r0, [pc, #168]	; (800931c <__lshift+0xdc>)
 8009274:	f7fe f922 	bl	80074bc <__assert_func>
 8009278:	3101      	adds	r1, #1
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	e7ee      	b.n	800925c <__lshift+0x1c>
 800927e:	2300      	movs	r3, #0
 8009280:	f100 0114 	add.w	r1, r0, #20
 8009284:	f100 0210 	add.w	r2, r0, #16
 8009288:	4618      	mov	r0, r3
 800928a:	4553      	cmp	r3, sl
 800928c:	db37      	blt.n	80092fe <__lshift+0xbe>
 800928e:	6920      	ldr	r0, [r4, #16]
 8009290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009294:	f104 0314 	add.w	r3, r4, #20
 8009298:	f019 091f 	ands.w	r9, r9, #31
 800929c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092a4:	d02f      	beq.n	8009306 <__lshift+0xc6>
 80092a6:	468a      	mov	sl, r1
 80092a8:	f04f 0c00 	mov.w	ip, #0
 80092ac:	f1c9 0e20 	rsb	lr, r9, #32
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	fa02 f209 	lsl.w	r2, r2, r9
 80092b6:	ea42 020c 	orr.w	r2, r2, ip
 80092ba:	f84a 2b04 	str.w	r2, [sl], #4
 80092be:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c2:	4298      	cmp	r0, r3
 80092c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80092c8:	d8f2      	bhi.n	80092b0 <__lshift+0x70>
 80092ca:	1b03      	subs	r3, r0, r4
 80092cc:	3b15      	subs	r3, #21
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	3304      	adds	r3, #4
 80092d4:	f104 0215 	add.w	r2, r4, #21
 80092d8:	4290      	cmp	r0, r2
 80092da:	bf38      	it	cc
 80092dc:	2304      	movcc	r3, #4
 80092de:	f841 c003 	str.w	ip, [r1, r3]
 80092e2:	f1bc 0f00 	cmp.w	ip, #0
 80092e6:	d001      	beq.n	80092ec <__lshift+0xac>
 80092e8:	f108 0602 	add.w	r6, r8, #2
 80092ec:	3e01      	subs	r6, #1
 80092ee:	4638      	mov	r0, r7
 80092f0:	4621      	mov	r1, r4
 80092f2:	612e      	str	r6, [r5, #16]
 80092f4:	f7ff fd8c 	bl	8008e10 <_Bfree>
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009302:	3301      	adds	r3, #1
 8009304:	e7c1      	b.n	800928a <__lshift+0x4a>
 8009306:	3904      	subs	r1, #4
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	4298      	cmp	r0, r3
 800930e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009312:	d8f9      	bhi.n	8009308 <__lshift+0xc8>
 8009314:	e7ea      	b.n	80092ec <__lshift+0xac>
 8009316:	bf00      	nop
 8009318:	0800a379 	.word	0x0800a379
 800931c:	0800a468 	.word	0x0800a468

08009320 <__mcmp>:
 8009320:	4603      	mov	r3, r0
 8009322:	690a      	ldr	r2, [r1, #16]
 8009324:	6900      	ldr	r0, [r0, #16]
 8009326:	b530      	push	{r4, r5, lr}
 8009328:	1a80      	subs	r0, r0, r2
 800932a:	d10d      	bne.n	8009348 <__mcmp+0x28>
 800932c:	3314      	adds	r3, #20
 800932e:	3114      	adds	r1, #20
 8009330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800933c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009340:	4295      	cmp	r5, r2
 8009342:	d002      	beq.n	800934a <__mcmp+0x2a>
 8009344:	d304      	bcc.n	8009350 <__mcmp+0x30>
 8009346:	2001      	movs	r0, #1
 8009348:	bd30      	pop	{r4, r5, pc}
 800934a:	42a3      	cmp	r3, r4
 800934c:	d3f4      	bcc.n	8009338 <__mcmp+0x18>
 800934e:	e7fb      	b.n	8009348 <__mcmp+0x28>
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	e7f8      	b.n	8009348 <__mcmp+0x28>
	...

08009358 <__mdiff>:
 8009358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	460d      	mov	r5, r1
 800935e:	4607      	mov	r7, r0
 8009360:	4611      	mov	r1, r2
 8009362:	4628      	mov	r0, r5
 8009364:	4614      	mov	r4, r2
 8009366:	f7ff ffdb 	bl	8009320 <__mcmp>
 800936a:	1e06      	subs	r6, r0, #0
 800936c:	d111      	bne.n	8009392 <__mdiff+0x3a>
 800936e:	4631      	mov	r1, r6
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff fd0d 	bl	8008d90 <_Balloc>
 8009376:	4602      	mov	r2, r0
 8009378:	b928      	cbnz	r0, 8009386 <__mdiff+0x2e>
 800937a:	f240 2132 	movw	r1, #562	; 0x232
 800937e:	4b3a      	ldr	r3, [pc, #232]	; (8009468 <__mdiff+0x110>)
 8009380:	483a      	ldr	r0, [pc, #232]	; (800946c <__mdiff+0x114>)
 8009382:	f7fe f89b 	bl	80074bc <__assert_func>
 8009386:	2301      	movs	r3, #1
 8009388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800938c:	4610      	mov	r0, r2
 800938e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009392:	bfa4      	itt	ge
 8009394:	4623      	movge	r3, r4
 8009396:	462c      	movge	r4, r5
 8009398:	4638      	mov	r0, r7
 800939a:	6861      	ldr	r1, [r4, #4]
 800939c:	bfa6      	itte	ge
 800939e:	461d      	movge	r5, r3
 80093a0:	2600      	movge	r6, #0
 80093a2:	2601      	movlt	r6, #1
 80093a4:	f7ff fcf4 	bl	8008d90 <_Balloc>
 80093a8:	4602      	mov	r2, r0
 80093aa:	b918      	cbnz	r0, 80093b4 <__mdiff+0x5c>
 80093ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <__mdiff+0x110>)
 80093b2:	e7e5      	b.n	8009380 <__mdiff+0x28>
 80093b4:	f102 0814 	add.w	r8, r2, #20
 80093b8:	46c2      	mov	sl, r8
 80093ba:	f04f 0c00 	mov.w	ip, #0
 80093be:	6927      	ldr	r7, [r4, #16]
 80093c0:	60c6      	str	r6, [r0, #12]
 80093c2:	692e      	ldr	r6, [r5, #16]
 80093c4:	f104 0014 	add.w	r0, r4, #20
 80093c8:	f105 0914 	add.w	r9, r5, #20
 80093cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80093d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093d4:	3410      	adds	r4, #16
 80093d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80093da:	f859 3b04 	ldr.w	r3, [r9], #4
 80093de:	fa1f f18b 	uxth.w	r1, fp
 80093e2:	448c      	add	ip, r1
 80093e4:	b299      	uxth	r1, r3
 80093e6:	0c1b      	lsrs	r3, r3, #16
 80093e8:	ebac 0101 	sub.w	r1, ip, r1
 80093ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093f4:	b289      	uxth	r1, r1
 80093f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80093fa:	454e      	cmp	r6, r9
 80093fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009400:	f84a 3b04 	str.w	r3, [sl], #4
 8009404:	d8e7      	bhi.n	80093d6 <__mdiff+0x7e>
 8009406:	1b73      	subs	r3, r6, r5
 8009408:	3b15      	subs	r3, #21
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	3515      	adds	r5, #21
 8009410:	3304      	adds	r3, #4
 8009412:	42ae      	cmp	r6, r5
 8009414:	bf38      	it	cc
 8009416:	2304      	movcc	r3, #4
 8009418:	4418      	add	r0, r3
 800941a:	4443      	add	r3, r8
 800941c:	461e      	mov	r6, r3
 800941e:	4605      	mov	r5, r0
 8009420:	4575      	cmp	r5, lr
 8009422:	d30e      	bcc.n	8009442 <__mdiff+0xea>
 8009424:	f10e 0103 	add.w	r1, lr, #3
 8009428:	1a09      	subs	r1, r1, r0
 800942a:	f021 0103 	bic.w	r1, r1, #3
 800942e:	3803      	subs	r0, #3
 8009430:	4586      	cmp	lr, r0
 8009432:	bf38      	it	cc
 8009434:	2100      	movcc	r1, #0
 8009436:	4419      	add	r1, r3
 8009438:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800943c:	b18b      	cbz	r3, 8009462 <__mdiff+0x10a>
 800943e:	6117      	str	r7, [r2, #16]
 8009440:	e7a4      	b.n	800938c <__mdiff+0x34>
 8009442:	f855 8b04 	ldr.w	r8, [r5], #4
 8009446:	fa1f f188 	uxth.w	r1, r8
 800944a:	4461      	add	r1, ip
 800944c:	140c      	asrs	r4, r1, #16
 800944e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009452:	b289      	uxth	r1, r1
 8009454:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009458:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800945c:	f846 1b04 	str.w	r1, [r6], #4
 8009460:	e7de      	b.n	8009420 <__mdiff+0xc8>
 8009462:	3f01      	subs	r7, #1
 8009464:	e7e8      	b.n	8009438 <__mdiff+0xe0>
 8009466:	bf00      	nop
 8009468:	0800a379 	.word	0x0800a379
 800946c:	0800a468 	.word	0x0800a468

08009470 <__ulp>:
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <__ulp+0x48>)
 8009472:	400b      	ands	r3, r1
 8009474:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009478:	2b00      	cmp	r3, #0
 800947a:	dd02      	ble.n	8009482 <__ulp+0x12>
 800947c:	2000      	movs	r0, #0
 800947e:	4619      	mov	r1, r3
 8009480:	4770      	bx	lr
 8009482:	425b      	negs	r3, r3
 8009484:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009488:	f04f 0000 	mov.w	r0, #0
 800948c:	f04f 0100 	mov.w	r1, #0
 8009490:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009494:	da04      	bge.n	80094a0 <__ulp+0x30>
 8009496:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800949a:	fa43 f102 	asr.w	r1, r3, r2
 800949e:	4770      	bx	lr
 80094a0:	f1a2 0314 	sub.w	r3, r2, #20
 80094a4:	2b1e      	cmp	r3, #30
 80094a6:	bfd6      	itet	le
 80094a8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80094ac:	2301      	movgt	r3, #1
 80094ae:	fa22 f303 	lsrle.w	r3, r2, r3
 80094b2:	4618      	mov	r0, r3
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	7ff00000 	.word	0x7ff00000

080094bc <__b2d>:
 80094bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c0:	6907      	ldr	r7, [r0, #16]
 80094c2:	f100 0914 	add.w	r9, r0, #20
 80094c6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80094ca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80094ce:	f1a7 0804 	sub.w	r8, r7, #4
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7ff fd4e 	bl	8008f74 <__hi0bits>
 80094d8:	f1c0 0320 	rsb	r3, r0, #32
 80094dc:	280a      	cmp	r0, #10
 80094de:	600b      	str	r3, [r1, #0]
 80094e0:	491f      	ldr	r1, [pc, #124]	; (8009560 <__b2d+0xa4>)
 80094e2:	dc17      	bgt.n	8009514 <__b2d+0x58>
 80094e4:	45c1      	cmp	r9, r8
 80094e6:	bf28      	it	cs
 80094e8:	2200      	movcs	r2, #0
 80094ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80094ee:	fa26 f30c 	lsr.w	r3, r6, ip
 80094f2:	bf38      	it	cc
 80094f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80094f8:	ea43 0501 	orr.w	r5, r3, r1
 80094fc:	f100 0315 	add.w	r3, r0, #21
 8009500:	fa06 f303 	lsl.w	r3, r6, r3
 8009504:	fa22 f20c 	lsr.w	r2, r2, ip
 8009508:	ea43 0402 	orr.w	r4, r3, r2
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009514:	45c1      	cmp	r9, r8
 8009516:	bf2e      	itee	cs
 8009518:	2200      	movcs	r2, #0
 800951a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800951e:	f1a7 0808 	subcc.w	r8, r7, #8
 8009522:	f1b0 030b 	subs.w	r3, r0, #11
 8009526:	d016      	beq.n	8009556 <__b2d+0x9a>
 8009528:	f1c3 0720 	rsb	r7, r3, #32
 800952c:	fa22 f107 	lsr.w	r1, r2, r7
 8009530:	45c8      	cmp	r8, r9
 8009532:	fa06 f603 	lsl.w	r6, r6, r3
 8009536:	ea46 0601 	orr.w	r6, r6, r1
 800953a:	bf94      	ite	ls
 800953c:	2100      	movls	r1, #0
 800953e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009542:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009546:	fa02 f003 	lsl.w	r0, r2, r3
 800954a:	40f9      	lsrs	r1, r7
 800954c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009550:	ea40 0401 	orr.w	r4, r0, r1
 8009554:	e7da      	b.n	800950c <__b2d+0x50>
 8009556:	4614      	mov	r4, r2
 8009558:	ea46 0501 	orr.w	r5, r6, r1
 800955c:	e7d6      	b.n	800950c <__b2d+0x50>
 800955e:	bf00      	nop
 8009560:	3ff00000 	.word	0x3ff00000

08009564 <__d2b>:
 8009564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009568:	2101      	movs	r1, #1
 800956a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800956e:	4690      	mov	r8, r2
 8009570:	461d      	mov	r5, r3
 8009572:	f7ff fc0d 	bl	8008d90 <_Balloc>
 8009576:	4604      	mov	r4, r0
 8009578:	b930      	cbnz	r0, 8009588 <__d2b+0x24>
 800957a:	4602      	mov	r2, r0
 800957c:	f240 310a 	movw	r1, #778	; 0x30a
 8009580:	4b24      	ldr	r3, [pc, #144]	; (8009614 <__d2b+0xb0>)
 8009582:	4825      	ldr	r0, [pc, #148]	; (8009618 <__d2b+0xb4>)
 8009584:	f7fd ff9a 	bl	80074bc <__assert_func>
 8009588:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800958c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009590:	bb2d      	cbnz	r5, 80095de <__d2b+0x7a>
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	f1b8 0300 	subs.w	r3, r8, #0
 8009598:	d026      	beq.n	80095e8 <__d2b+0x84>
 800959a:	4668      	mov	r0, sp
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	f7ff fd09 	bl	8008fb4 <__lo0bits>
 80095a2:	9900      	ldr	r1, [sp, #0]
 80095a4:	b1f0      	cbz	r0, 80095e4 <__d2b+0x80>
 80095a6:	9a01      	ldr	r2, [sp, #4]
 80095a8:	f1c0 0320 	rsb	r3, r0, #32
 80095ac:	fa02 f303 	lsl.w	r3, r2, r3
 80095b0:	430b      	orrs	r3, r1
 80095b2:	40c2      	lsrs	r2, r0
 80095b4:	6163      	str	r3, [r4, #20]
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bf14      	ite	ne
 80095be:	2102      	movne	r1, #2
 80095c0:	2101      	moveq	r1, #1
 80095c2:	61a3      	str	r3, [r4, #24]
 80095c4:	6121      	str	r1, [r4, #16]
 80095c6:	b1c5      	cbz	r5, 80095fa <__d2b+0x96>
 80095c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095cc:	4405      	add	r5, r0
 80095ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095d2:	603d      	str	r5, [r7, #0]
 80095d4:	6030      	str	r0, [r6, #0]
 80095d6:	4620      	mov	r0, r4
 80095d8:	b002      	add	sp, #8
 80095da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e2:	e7d6      	b.n	8009592 <__d2b+0x2e>
 80095e4:	6161      	str	r1, [r4, #20]
 80095e6:	e7e7      	b.n	80095b8 <__d2b+0x54>
 80095e8:	a801      	add	r0, sp, #4
 80095ea:	f7ff fce3 	bl	8008fb4 <__lo0bits>
 80095ee:	2101      	movs	r1, #1
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	6121      	str	r1, [r4, #16]
 80095f4:	6163      	str	r3, [r4, #20]
 80095f6:	3020      	adds	r0, #32
 80095f8:	e7e5      	b.n	80095c6 <__d2b+0x62>
 80095fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80095fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009602:	6038      	str	r0, [r7, #0]
 8009604:	6918      	ldr	r0, [r3, #16]
 8009606:	f7ff fcb5 	bl	8008f74 <__hi0bits>
 800960a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800960e:	6031      	str	r1, [r6, #0]
 8009610:	e7e1      	b.n	80095d6 <__d2b+0x72>
 8009612:	bf00      	nop
 8009614:	0800a379 	.word	0x0800a379
 8009618:	0800a468 	.word	0x0800a468

0800961c <__ratio>:
 800961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4688      	mov	r8, r1
 8009622:	4669      	mov	r1, sp
 8009624:	4681      	mov	r9, r0
 8009626:	f7ff ff49 	bl	80094bc <__b2d>
 800962a:	460f      	mov	r7, r1
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	4640      	mov	r0, r8
 8009632:	a901      	add	r1, sp, #4
 8009634:	f7ff ff42 	bl	80094bc <__b2d>
 8009638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800963c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009640:	468b      	mov	fp, r1
 8009642:	eba3 0c02 	sub.w	ip, r3, r2
 8009646:	e9dd 3200 	ldrd	r3, r2, [sp]
 800964a:	1a9b      	subs	r3, r3, r2
 800964c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfd5      	itete	le
 8009654:	460a      	movle	r2, r1
 8009656:	462a      	movgt	r2, r5
 8009658:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800965c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009660:	bfd8      	it	le
 8009662:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009666:	465b      	mov	r3, fp
 8009668:	4602      	mov	r2, r0
 800966a:	4639      	mov	r1, r7
 800966c:	4620      	mov	r0, r4
 800966e:	f7f7 f867 	bl	8000740 <__aeabi_ddiv>
 8009672:	b003      	add	sp, #12
 8009674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009678 <__copybits>:
 8009678:	3901      	subs	r1, #1
 800967a:	b570      	push	{r4, r5, r6, lr}
 800967c:	1149      	asrs	r1, r1, #5
 800967e:	6914      	ldr	r4, [r2, #16]
 8009680:	3101      	adds	r1, #1
 8009682:	f102 0314 	add.w	r3, r2, #20
 8009686:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800968a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800968e:	1f05      	subs	r5, r0, #4
 8009690:	42a3      	cmp	r3, r4
 8009692:	d30c      	bcc.n	80096ae <__copybits+0x36>
 8009694:	1aa3      	subs	r3, r4, r2
 8009696:	3b11      	subs	r3, #17
 8009698:	f023 0303 	bic.w	r3, r3, #3
 800969c:	3211      	adds	r2, #17
 800969e:	42a2      	cmp	r2, r4
 80096a0:	bf88      	it	hi
 80096a2:	2300      	movhi	r3, #0
 80096a4:	4418      	add	r0, r3
 80096a6:	2300      	movs	r3, #0
 80096a8:	4288      	cmp	r0, r1
 80096aa:	d305      	bcc.n	80096b8 <__copybits+0x40>
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80096b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80096b6:	e7eb      	b.n	8009690 <__copybits+0x18>
 80096b8:	f840 3b04 	str.w	r3, [r0], #4
 80096bc:	e7f4      	b.n	80096a8 <__copybits+0x30>

080096be <__any_on>:
 80096be:	f100 0214 	add.w	r2, r0, #20
 80096c2:	6900      	ldr	r0, [r0, #16]
 80096c4:	114b      	asrs	r3, r1, #5
 80096c6:	4298      	cmp	r0, r3
 80096c8:	b510      	push	{r4, lr}
 80096ca:	db11      	blt.n	80096f0 <__any_on+0x32>
 80096cc:	dd0a      	ble.n	80096e4 <__any_on+0x26>
 80096ce:	f011 011f 	ands.w	r1, r1, #31
 80096d2:	d007      	beq.n	80096e4 <__any_on+0x26>
 80096d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096d8:	fa24 f001 	lsr.w	r0, r4, r1
 80096dc:	fa00 f101 	lsl.w	r1, r0, r1
 80096e0:	428c      	cmp	r4, r1
 80096e2:	d10b      	bne.n	80096fc <__any_on+0x3e>
 80096e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d803      	bhi.n	80096f4 <__any_on+0x36>
 80096ec:	2000      	movs	r0, #0
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	4603      	mov	r3, r0
 80096f2:	e7f7      	b.n	80096e4 <__any_on+0x26>
 80096f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096f8:	2900      	cmp	r1, #0
 80096fa:	d0f5      	beq.n	80096e8 <__any_on+0x2a>
 80096fc:	2001      	movs	r0, #1
 80096fe:	e7f6      	b.n	80096ee <__any_on+0x30>

08009700 <_calloc_r>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	fba1 5402 	umull	r5, r4, r1, r2
 8009706:	b934      	cbnz	r4, 8009716 <_calloc_r+0x16>
 8009708:	4629      	mov	r1, r5
 800970a:	f7fc f95d 	bl	80059c8 <_malloc_r>
 800970e:	4606      	mov	r6, r0
 8009710:	b928      	cbnz	r0, 800971e <_calloc_r+0x1e>
 8009712:	4630      	mov	r0, r6
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	220c      	movs	r2, #12
 8009718:	2600      	movs	r6, #0
 800971a:	6002      	str	r2, [r0, #0]
 800971c:	e7f9      	b.n	8009712 <_calloc_r+0x12>
 800971e:	462a      	mov	r2, r5
 8009720:	4621      	mov	r1, r4
 8009722:	f7fc f8e1 	bl	80058e8 <memset>
 8009726:	e7f4      	b.n	8009712 <_calloc_r+0x12>

08009728 <__ssputs_r>:
 8009728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	688e      	ldr	r6, [r1, #8]
 800972e:	4682      	mov	sl, r0
 8009730:	429e      	cmp	r6, r3
 8009732:	460c      	mov	r4, r1
 8009734:	4690      	mov	r8, r2
 8009736:	461f      	mov	r7, r3
 8009738:	d838      	bhi.n	80097ac <__ssputs_r+0x84>
 800973a:	898a      	ldrh	r2, [r1, #12]
 800973c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009740:	d032      	beq.n	80097a8 <__ssputs_r+0x80>
 8009742:	6825      	ldr	r5, [r4, #0]
 8009744:	6909      	ldr	r1, [r1, #16]
 8009746:	3301      	adds	r3, #1
 8009748:	eba5 0901 	sub.w	r9, r5, r1
 800974c:	6965      	ldr	r5, [r4, #20]
 800974e:	444b      	add	r3, r9
 8009750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009758:	106d      	asrs	r5, r5, #1
 800975a:	429d      	cmp	r5, r3
 800975c:	bf38      	it	cc
 800975e:	461d      	movcc	r5, r3
 8009760:	0553      	lsls	r3, r2, #21
 8009762:	d531      	bpl.n	80097c8 <__ssputs_r+0xa0>
 8009764:	4629      	mov	r1, r5
 8009766:	f7fc f92f 	bl	80059c8 <_malloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	b950      	cbnz	r0, 8009784 <__ssputs_r+0x5c>
 800976e:	230c      	movs	r3, #12
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	f8ca 3000 	str.w	r3, [sl]
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009784:	464a      	mov	r2, r9
 8009786:	6921      	ldr	r1, [r4, #16]
 8009788:	f7ff fae8 	bl	8008d5c <memcpy>
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	6126      	str	r6, [r4, #16]
 800979a:	444e      	add	r6, r9
 800979c:	6026      	str	r6, [r4, #0]
 800979e:	463e      	mov	r6, r7
 80097a0:	6165      	str	r5, [r4, #20]
 80097a2:	eba5 0509 	sub.w	r5, r5, r9
 80097a6:	60a5      	str	r5, [r4, #8]
 80097a8:	42be      	cmp	r6, r7
 80097aa:	d900      	bls.n	80097ae <__ssputs_r+0x86>
 80097ac:	463e      	mov	r6, r7
 80097ae:	4632      	mov	r2, r6
 80097b0:	4641      	mov	r1, r8
 80097b2:	6820      	ldr	r0, [r4, #0]
 80097b4:	f000 fb34 	bl	8009e20 <memmove>
 80097b8:	68a3      	ldr	r3, [r4, #8]
 80097ba:	2000      	movs	r0, #0
 80097bc:	1b9b      	subs	r3, r3, r6
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	4433      	add	r3, r6
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	e7db      	b.n	8009780 <__ssputs_r+0x58>
 80097c8:	462a      	mov	r2, r5
 80097ca:	f000 fb43 	bl	8009e54 <_realloc_r>
 80097ce:	4606      	mov	r6, r0
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d1e1      	bne.n	8009798 <__ssputs_r+0x70>
 80097d4:	4650      	mov	r0, sl
 80097d6:	6921      	ldr	r1, [r4, #16]
 80097d8:	f7fc f88e 	bl	80058f8 <_free_r>
 80097dc:	e7c7      	b.n	800976e <__ssputs_r+0x46>
	...

080097e0 <_svfiprintf_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	4698      	mov	r8, r3
 80097e6:	898b      	ldrh	r3, [r1, #12]
 80097e8:	4607      	mov	r7, r0
 80097ea:	061b      	lsls	r3, r3, #24
 80097ec:	460d      	mov	r5, r1
 80097ee:	4614      	mov	r4, r2
 80097f0:	b09d      	sub	sp, #116	; 0x74
 80097f2:	d50e      	bpl.n	8009812 <_svfiprintf_r+0x32>
 80097f4:	690b      	ldr	r3, [r1, #16]
 80097f6:	b963      	cbnz	r3, 8009812 <_svfiprintf_r+0x32>
 80097f8:	2140      	movs	r1, #64	; 0x40
 80097fa:	f7fc f8e5 	bl	80059c8 <_malloc_r>
 80097fe:	6028      	str	r0, [r5, #0]
 8009800:	6128      	str	r0, [r5, #16]
 8009802:	b920      	cbnz	r0, 800980e <_svfiprintf_r+0x2e>
 8009804:	230c      	movs	r3, #12
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	e0d1      	b.n	80099b2 <_svfiprintf_r+0x1d2>
 800980e:	2340      	movs	r3, #64	; 0x40
 8009810:	616b      	str	r3, [r5, #20]
 8009812:	2300      	movs	r3, #0
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	2320      	movs	r3, #32
 8009818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800981c:	2330      	movs	r3, #48	; 0x30
 800981e:	f04f 0901 	mov.w	r9, #1
 8009822:	f8cd 800c 	str.w	r8, [sp, #12]
 8009826:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099cc <_svfiprintf_r+0x1ec>
 800982a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800982e:	4623      	mov	r3, r4
 8009830:	469a      	mov	sl, r3
 8009832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009836:	b10a      	cbz	r2, 800983c <_svfiprintf_r+0x5c>
 8009838:	2a25      	cmp	r2, #37	; 0x25
 800983a:	d1f9      	bne.n	8009830 <_svfiprintf_r+0x50>
 800983c:	ebba 0b04 	subs.w	fp, sl, r4
 8009840:	d00b      	beq.n	800985a <_svfiprintf_r+0x7a>
 8009842:	465b      	mov	r3, fp
 8009844:	4622      	mov	r2, r4
 8009846:	4629      	mov	r1, r5
 8009848:	4638      	mov	r0, r7
 800984a:	f7ff ff6d 	bl	8009728 <__ssputs_r>
 800984e:	3001      	adds	r0, #1
 8009850:	f000 80aa 	beq.w	80099a8 <_svfiprintf_r+0x1c8>
 8009854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009856:	445a      	add	r2, fp
 8009858:	9209      	str	r2, [sp, #36]	; 0x24
 800985a:	f89a 3000 	ldrb.w	r3, [sl]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80a2 	beq.w	80099a8 <_svfiprintf_r+0x1c8>
 8009864:	2300      	movs	r3, #0
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800986e:	f10a 0a01 	add.w	sl, sl, #1
 8009872:	9304      	str	r3, [sp, #16]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987a:	931a      	str	r3, [sp, #104]	; 0x68
 800987c:	4654      	mov	r4, sl
 800987e:	2205      	movs	r2, #5
 8009880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009884:	4851      	ldr	r0, [pc, #324]	; (80099cc <_svfiprintf_r+0x1ec>)
 8009886:	f7ff fa5b 	bl	8008d40 <memchr>
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	b9d8      	cbnz	r0, 80098c6 <_svfiprintf_r+0xe6>
 800988e:	06d0      	lsls	r0, r2, #27
 8009890:	bf44      	itt	mi
 8009892:	2320      	movmi	r3, #32
 8009894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009898:	0711      	lsls	r1, r2, #28
 800989a:	bf44      	itt	mi
 800989c:	232b      	movmi	r3, #43	; 0x2b
 800989e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a2:	f89a 3000 	ldrb.w	r3, [sl]
 80098a6:	2b2a      	cmp	r3, #42	; 0x2a
 80098a8:	d015      	beq.n	80098d6 <_svfiprintf_r+0xf6>
 80098aa:	4654      	mov	r4, sl
 80098ac:	2000      	movs	r0, #0
 80098ae:	f04f 0c0a 	mov.w	ip, #10
 80098b2:	9a07      	ldr	r2, [sp, #28]
 80098b4:	4621      	mov	r1, r4
 80098b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ba:	3b30      	subs	r3, #48	; 0x30
 80098bc:	2b09      	cmp	r3, #9
 80098be:	d94e      	bls.n	800995e <_svfiprintf_r+0x17e>
 80098c0:	b1b0      	cbz	r0, 80098f0 <_svfiprintf_r+0x110>
 80098c2:	9207      	str	r2, [sp, #28]
 80098c4:	e014      	b.n	80098f0 <_svfiprintf_r+0x110>
 80098c6:	eba0 0308 	sub.w	r3, r0, r8
 80098ca:	fa09 f303 	lsl.w	r3, r9, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	46a2      	mov	sl, r4
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	e7d2      	b.n	800987c <_svfiprintf_r+0x9c>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	1d19      	adds	r1, r3, #4
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	9103      	str	r1, [sp, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfbb      	ittet	lt
 80098e2:	425b      	neglt	r3, r3
 80098e4:	f042 0202 	orrlt.w	r2, r2, #2
 80098e8:	9307      	strge	r3, [sp, #28]
 80098ea:	9307      	strlt	r3, [sp, #28]
 80098ec:	bfb8      	it	lt
 80098ee:	9204      	strlt	r2, [sp, #16]
 80098f0:	7823      	ldrb	r3, [r4, #0]
 80098f2:	2b2e      	cmp	r3, #46	; 0x2e
 80098f4:	d10c      	bne.n	8009910 <_svfiprintf_r+0x130>
 80098f6:	7863      	ldrb	r3, [r4, #1]
 80098f8:	2b2a      	cmp	r3, #42	; 0x2a
 80098fa:	d135      	bne.n	8009968 <_svfiprintf_r+0x188>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	3402      	adds	r4, #2
 8009900:	1d1a      	adds	r2, r3, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	9203      	str	r2, [sp, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	f04f 33ff 	movlt.w	r3, #4294967295
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80099d0 <_svfiprintf_r+0x1f0>
 8009914:	2203      	movs	r2, #3
 8009916:	4650      	mov	r0, sl
 8009918:	7821      	ldrb	r1, [r4, #0]
 800991a:	f7ff fa11 	bl	8008d40 <memchr>
 800991e:	b140      	cbz	r0, 8009932 <_svfiprintf_r+0x152>
 8009920:	2340      	movs	r3, #64	; 0x40
 8009922:	eba0 000a 	sub.w	r0, r0, sl
 8009926:	fa03 f000 	lsl.w	r0, r3, r0
 800992a:	9b04      	ldr	r3, [sp, #16]
 800992c:	3401      	adds	r4, #1
 800992e:	4303      	orrs	r3, r0
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009936:	2206      	movs	r2, #6
 8009938:	4826      	ldr	r0, [pc, #152]	; (80099d4 <_svfiprintf_r+0x1f4>)
 800993a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800993e:	f7ff f9ff 	bl	8008d40 <memchr>
 8009942:	2800      	cmp	r0, #0
 8009944:	d038      	beq.n	80099b8 <_svfiprintf_r+0x1d8>
 8009946:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <_svfiprintf_r+0x1f8>)
 8009948:	bb1b      	cbnz	r3, 8009992 <_svfiprintf_r+0x1b2>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	3307      	adds	r3, #7
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	3308      	adds	r3, #8
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009958:	4433      	add	r3, r6
 800995a:	9309      	str	r3, [sp, #36]	; 0x24
 800995c:	e767      	b.n	800982e <_svfiprintf_r+0x4e>
 800995e:	460c      	mov	r4, r1
 8009960:	2001      	movs	r0, #1
 8009962:	fb0c 3202 	mla	r2, ip, r2, r3
 8009966:	e7a5      	b.n	80098b4 <_svfiprintf_r+0xd4>
 8009968:	2300      	movs	r3, #0
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4619      	mov	r1, r3
 8009970:	3401      	adds	r4, #1
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	4620      	mov	r0, r4
 8009976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997a:	3a30      	subs	r2, #48	; 0x30
 800997c:	2a09      	cmp	r2, #9
 800997e:	d903      	bls.n	8009988 <_svfiprintf_r+0x1a8>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0c5      	beq.n	8009910 <_svfiprintf_r+0x130>
 8009984:	9105      	str	r1, [sp, #20]
 8009986:	e7c3      	b.n	8009910 <_svfiprintf_r+0x130>
 8009988:	4604      	mov	r4, r0
 800998a:	2301      	movs	r3, #1
 800998c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009990:	e7f0      	b.n	8009974 <_svfiprintf_r+0x194>
 8009992:	ab03      	add	r3, sp, #12
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	462a      	mov	r2, r5
 8009998:	4638      	mov	r0, r7
 800999a:	4b10      	ldr	r3, [pc, #64]	; (80099dc <_svfiprintf_r+0x1fc>)
 800999c:	a904      	add	r1, sp, #16
 800999e:	f7fc f925 	bl	8005bec <_printf_float>
 80099a2:	1c42      	adds	r2, r0, #1
 80099a4:	4606      	mov	r6, r0
 80099a6:	d1d6      	bne.n	8009956 <_svfiprintf_r+0x176>
 80099a8:	89ab      	ldrh	r3, [r5, #12]
 80099aa:	065b      	lsls	r3, r3, #25
 80099ac:	f53f af2c 	bmi.w	8009808 <_svfiprintf_r+0x28>
 80099b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b2:	b01d      	add	sp, #116	; 0x74
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	462a      	mov	r2, r5
 80099be:	4638      	mov	r0, r7
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <_svfiprintf_r+0x1fc>)
 80099c2:	a904      	add	r1, sp, #16
 80099c4:	f7fc fbae 	bl	8006124 <_printf_i>
 80099c8:	e7eb      	b.n	80099a2 <_svfiprintf_r+0x1c2>
 80099ca:	bf00      	nop
 80099cc:	0800a5c4 	.word	0x0800a5c4
 80099d0:	0800a5ca 	.word	0x0800a5ca
 80099d4:	0800a5ce 	.word	0x0800a5ce
 80099d8:	08005bed 	.word	0x08005bed
 80099dc:	08009729 	.word	0x08009729

080099e0 <__sfputc_r>:
 80099e0:	6893      	ldr	r3, [r2, #8]
 80099e2:	b410      	push	{r4}
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	6093      	str	r3, [r2, #8]
 80099ea:	da07      	bge.n	80099fc <__sfputc_r+0x1c>
 80099ec:	6994      	ldr	r4, [r2, #24]
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	db01      	blt.n	80099f6 <__sfputc_r+0x16>
 80099f2:	290a      	cmp	r1, #10
 80099f4:	d102      	bne.n	80099fc <__sfputc_r+0x1c>
 80099f6:	bc10      	pop	{r4}
 80099f8:	f7fd bca0 	b.w	800733c <__swbuf_r>
 80099fc:	6813      	ldr	r3, [r2, #0]
 80099fe:	1c58      	adds	r0, r3, #1
 8009a00:	6010      	str	r0, [r2, #0]
 8009a02:	7019      	strb	r1, [r3, #0]
 8009a04:	4608      	mov	r0, r1
 8009a06:	bc10      	pop	{r4}
 8009a08:	4770      	bx	lr

08009a0a <__sfputs_r>:
 8009a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	4614      	mov	r4, r2
 8009a12:	18d5      	adds	r5, r2, r3
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	d101      	bne.n	8009a1c <__sfputs_r+0x12>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e007      	b.n	8009a2c <__sfputs_r+0x22>
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a24:	f7ff ffdc 	bl	80099e0 <__sfputc_r>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d1f3      	bne.n	8009a14 <__sfputs_r+0xa>
 8009a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a30 <_vfiprintf_r>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	460d      	mov	r5, r1
 8009a36:	4614      	mov	r4, r2
 8009a38:	4698      	mov	r8, r3
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	b09d      	sub	sp, #116	; 0x74
 8009a3e:	b118      	cbz	r0, 8009a48 <_vfiprintf_r+0x18>
 8009a40:	6983      	ldr	r3, [r0, #24]
 8009a42:	b90b      	cbnz	r3, 8009a48 <_vfiprintf_r+0x18>
 8009a44:	f7fe fce8 	bl	8008418 <__sinit>
 8009a48:	4b89      	ldr	r3, [pc, #548]	; (8009c70 <_vfiprintf_r+0x240>)
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	d11b      	bne.n	8009a86 <_vfiprintf_r+0x56>
 8009a4e:	6875      	ldr	r5, [r6, #4]
 8009a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a52:	07d9      	lsls	r1, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	059a      	lsls	r2, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_vfiprintf_r+0x32>
 8009a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a5e:	f7ff f8f6 	bl	8008c4e <__retarget_lock_acquire_recursive>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	071b      	lsls	r3, r3, #28
 8009a66:	d501      	bpl.n	8009a6c <_vfiprintf_r+0x3c>
 8009a68:	692b      	ldr	r3, [r5, #16]
 8009a6a:	b9eb      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x78>
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7fd fcb6 	bl	80073e0 <__swsetup_r>
 8009a74:	b1c0      	cbz	r0, 8009aa8 <_vfiprintf_r+0x78>
 8009a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a78:	07dc      	lsls	r4, r3, #31
 8009a7a:	d50e      	bpl.n	8009a9a <_vfiprintf_r+0x6a>
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	; 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	4b7b      	ldr	r3, [pc, #492]	; (8009c74 <_vfiprintf_r+0x244>)
 8009a88:	429d      	cmp	r5, r3
 8009a8a:	d101      	bne.n	8009a90 <_vfiprintf_r+0x60>
 8009a8c:	68b5      	ldr	r5, [r6, #8]
 8009a8e:	e7df      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a90:	4b79      	ldr	r3, [pc, #484]	; (8009c78 <_vfiprintf_r+0x248>)
 8009a92:	429d      	cmp	r5, r3
 8009a94:	bf08      	it	eq
 8009a96:	68f5      	ldreq	r5, [r6, #12]
 8009a98:	e7da      	b.n	8009a50 <_vfiprintf_r+0x20>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	0598      	lsls	r0, r3, #22
 8009a9e:	d4ed      	bmi.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa2:	f7ff f8d5 	bl	8008c50 <__retarget_lock_release_recursive>
 8009aa6:	e7e9      	b.n	8009a7c <_vfiprintf_r+0x4c>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009aac:	2320      	movs	r3, #32
 8009aae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab2:	2330      	movs	r3, #48	; 0x30
 8009ab4:	f04f 0901 	mov.w	r9, #1
 8009ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009abc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c7c <_vfiprintf_r+0x24c>
 8009ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_vfiprintf_r+0xa2>
 8009ace:	2a25      	cmp	r2, #37	; 0x25
 8009ad0:	d1f9      	bne.n	8009ac6 <_vfiprintf_r+0x96>
 8009ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad6:	d00b      	beq.n	8009af0 <_vfiprintf_r+0xc0>
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff93 	bl	8009a0a <__sfputs_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f000 80aa 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009aea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aec:	445a      	add	r2, fp
 8009aee:	9209      	str	r2, [sp, #36]	; 0x24
 8009af0:	f89a 3000 	ldrb.w	r3, [sl]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80a2 	beq.w	8009c3e <_vfiprintf_r+0x20e>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b04:	f10a 0a01 	add.w	sl, sl, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b10:	931a      	str	r3, [sp, #104]	; 0x68
 8009b12:	4654      	mov	r4, sl
 8009b14:	2205      	movs	r2, #5
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4858      	ldr	r0, [pc, #352]	; (8009c7c <_vfiprintf_r+0x24c>)
 8009b1c:	f7ff f910 	bl	8008d40 <memchr>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	b9d8      	cbnz	r0, 8009b5c <_vfiprintf_r+0x12c>
 8009b24:	06d1      	lsls	r1, r2, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2320      	movmi	r3, #32
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2e:	0713      	lsls	r3, r2, #28
 8009b30:	bf44      	itt	mi
 8009b32:	232b      	movmi	r3, #43	; 0x2b
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3e:	d015      	beq.n	8009b6c <_vfiprintf_r+0x13c>
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b50:	3b30      	subs	r3, #48	; 0x30
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d94e      	bls.n	8009bf4 <_vfiprintf_r+0x1c4>
 8009b56:	b1b0      	cbz	r0, 8009b86 <_vfiprintf_r+0x156>
 8009b58:	9207      	str	r2, [sp, #28]
 8009b5a:	e014      	b.n	8009b86 <_vfiprintf_r+0x156>
 8009b5c:	eba0 0308 	sub.w	r3, r0, r8
 8009b60:	fa09 f303 	lsl.w	r3, r9, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	46a2      	mov	sl, r4
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	e7d2      	b.n	8009b12 <_vfiprintf_r+0xe2>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9103      	str	r1, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	425b      	neglt	r3, r3
 8009b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7e:	9307      	strge	r3, [sp, #28]
 8009b80:	9307      	strlt	r3, [sp, #28]
 8009b82:	bfb8      	it	lt
 8009b84:	9204      	strlt	r2, [sp, #16]
 8009b86:	7823      	ldrb	r3, [r4, #0]
 8009b88:	2b2e      	cmp	r3, #46	; 0x2e
 8009b8a:	d10c      	bne.n	8009ba6 <_vfiprintf_r+0x176>
 8009b8c:	7863      	ldrb	r3, [r4, #1]
 8009b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b90:	d135      	bne.n	8009bfe <_vfiprintf_r+0x1ce>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	3402      	adds	r4, #2
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9203      	str	r2, [sp, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfb8      	it	lt
 8009ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c80 <_vfiprintf_r+0x250>
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	7821      	ldrb	r1, [r4, #0]
 8009bb0:	f7ff f8c6 	bl	8008d40 <memchr>
 8009bb4:	b140      	cbz	r0, 8009bc8 <_vfiprintf_r+0x198>
 8009bb6:	2340      	movs	r3, #64	; 0x40
 8009bb8:	eba0 000a 	sub.w	r0, r0, sl
 8009bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	4303      	orrs	r3, r0
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bcc:	2206      	movs	r2, #6
 8009bce:	482d      	ldr	r0, [pc, #180]	; (8009c84 <_vfiprintf_r+0x254>)
 8009bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd4:	f7ff f8b4 	bl	8008d40 <memchr>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d03f      	beq.n	8009c5c <_vfiprintf_r+0x22c>
 8009bdc:	4b2a      	ldr	r3, [pc, #168]	; (8009c88 <_vfiprintf_r+0x258>)
 8009bde:	bb1b      	cbnz	r3, 8009c28 <_vfiprintf_r+0x1f8>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	3307      	adds	r3, #7
 8009be4:	f023 0307 	bic.w	r3, r3, #7
 8009be8:	3308      	adds	r3, #8
 8009bea:	9303      	str	r3, [sp, #12]
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	443b      	add	r3, r7
 8009bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf2:	e767      	b.n	8009ac4 <_vfiprintf_r+0x94>
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bfc:	e7a5      	b.n	8009b4a <_vfiprintf_r+0x11a>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f04f 0c0a 	mov.w	ip, #10
 8009c04:	4619      	mov	r1, r3
 8009c06:	3401      	adds	r4, #1
 8009c08:	9305      	str	r3, [sp, #20]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c10:	3a30      	subs	r2, #48	; 0x30
 8009c12:	2a09      	cmp	r2, #9
 8009c14:	d903      	bls.n	8009c1e <_vfiprintf_r+0x1ee>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c5      	beq.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1a:	9105      	str	r1, [sp, #20]
 8009c1c:	e7c3      	b.n	8009ba6 <_vfiprintf_r+0x176>
 8009c1e:	4604      	mov	r4, r0
 8009c20:	2301      	movs	r3, #1
 8009c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c26:	e7f0      	b.n	8009c0a <_vfiprintf_r+0x1da>
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	4b16      	ldr	r3, [pc, #88]	; (8009c8c <_vfiprintf_r+0x25c>)
 8009c32:	a904      	add	r1, sp, #16
 8009c34:	f7fb ffda 	bl	8005bec <_printf_float>
 8009c38:	4607      	mov	r7, r0
 8009c3a:	1c78      	adds	r0, r7, #1
 8009c3c:	d1d6      	bne.n	8009bec <_vfiprintf_r+0x1bc>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c40:	07d9      	lsls	r1, r3, #31
 8009c42:	d405      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	059a      	lsls	r2, r3, #22
 8009c48:	d402      	bmi.n	8009c50 <_vfiprintf_r+0x220>
 8009c4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4c:	f7ff f800 	bl	8008c50 <__retarget_lock_release_recursive>
 8009c50:	89ab      	ldrh	r3, [r5, #12]
 8009c52:	065b      	lsls	r3, r3, #25
 8009c54:	f53f af12 	bmi.w	8009a7c <_vfiprintf_r+0x4c>
 8009c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5a:	e711      	b.n	8009a80 <_vfiprintf_r+0x50>
 8009c5c:	ab03      	add	r3, sp, #12
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	462a      	mov	r2, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <_vfiprintf_r+0x25c>)
 8009c66:	a904      	add	r1, sp, #16
 8009c68:	f7fc fa5c 	bl	8006124 <_printf_i>
 8009c6c:	e7e4      	b.n	8009c38 <_vfiprintf_r+0x208>
 8009c6e:	bf00      	nop
 8009c70:	0800a3ac 	.word	0x0800a3ac
 8009c74:	0800a3cc 	.word	0x0800a3cc
 8009c78:	0800a38c 	.word	0x0800a38c
 8009c7c:	0800a5c4 	.word	0x0800a5c4
 8009c80:	0800a5ca 	.word	0x0800a5ca
 8009c84:	0800a5ce 	.word	0x0800a5ce
 8009c88:	08005bed 	.word	0x08005bed
 8009c8c:	08009a0b 	.word	0x08009a0b

08009c90 <nan>:
 8009c90:	2000      	movs	r0, #0
 8009c92:	4901      	ldr	r1, [pc, #4]	; (8009c98 <nan+0x8>)
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	7ff80000 	.word	0x7ff80000

08009c9c <__sread>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	f000 f906 	bl	8009eb4 <_read_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	bfab      	itete	ge
 8009cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cae:	89a3      	ldrhlt	r3, [r4, #12]
 8009cb0:	181b      	addge	r3, r3, r0
 8009cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb6:	bfac      	ite	ge
 8009cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cba:	81a3      	strhlt	r3, [r4, #12]
 8009cbc:	bd10      	pop	{r4, pc}

08009cbe <__swrite>:
 8009cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	898b      	ldrh	r3, [r1, #12]
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	05db      	lsls	r3, r3, #23
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4616      	mov	r6, r2
 8009cce:	d505      	bpl.n	8009cdc <__swrite+0x1e>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd8:	f000 f890 	bl	8009dfc <_lseek_r>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	4632      	mov	r2, r6
 8009ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce4:	81a3      	strh	r3, [r4, #12]
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	463b      	mov	r3, r7
 8009cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	f000 b837 	b.w	8009d64 <_write_r>

08009cf6 <__sseek>:
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfe:	f000 f87d 	bl	8009dfc <_lseek_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	bf15      	itete	ne
 8009d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d12:	81a3      	strheq	r3, [r4, #12]
 8009d14:	bf18      	it	ne
 8009d16:	81a3      	strhne	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__sclose>:
 8009d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1e:	f000 b83b 	b.w	8009d98 <_close_r>

08009d22 <strncmp>:
 8009d22:	4603      	mov	r3, r0
 8009d24:	b510      	push	{r4, lr}
 8009d26:	b172      	cbz	r2, 8009d46 <strncmp+0x24>
 8009d28:	3901      	subs	r1, #1
 8009d2a:	1884      	adds	r4, r0, r2
 8009d2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009d34:	4290      	cmp	r0, r2
 8009d36:	d101      	bne.n	8009d3c <strncmp+0x1a>
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	d101      	bne.n	8009d40 <strncmp+0x1e>
 8009d3c:	1a80      	subs	r0, r0, r2
 8009d3e:	bd10      	pop	{r4, pc}
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1f3      	bne.n	8009d2c <strncmp+0xa>
 8009d44:	e7fa      	b.n	8009d3c <strncmp+0x1a>
 8009d46:	4610      	mov	r0, r2
 8009d48:	e7f9      	b.n	8009d3e <strncmp+0x1c>

08009d4a <__ascii_wctomb>:
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	b141      	cbz	r1, 8009d62 <__ascii_wctomb+0x18>
 8009d50:	2aff      	cmp	r2, #255	; 0xff
 8009d52:	d904      	bls.n	8009d5e <__ascii_wctomb+0x14>
 8009d54:	228a      	movs	r2, #138	; 0x8a
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	4770      	bx	lr
 8009d5e:	2001      	movs	r0, #1
 8009d60:	700a      	strb	r2, [r1, #0]
 8009d62:	4770      	bx	lr

08009d64 <_write_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4d05      	ldr	r5, [pc, #20]	; (8009d84 <_write_r+0x20>)
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f7f8 f95a 	bl	800202c <_write>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_write_r+0x1e>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_write_r+0x1e>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	20000464 	.word	0x20000464

08009d88 <abort>:
 8009d88:	2006      	movs	r0, #6
 8009d8a:	b508      	push	{r3, lr}
 8009d8c:	f000 f8cc 	bl	8009f28 <raise>
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7f8 f924 	bl	8001fde <_exit>
	...

08009d98 <_close_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	4d05      	ldr	r5, [pc, #20]	; (8009db4 <_close_r+0x1c>)
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f8 f95e 	bl	8002064 <_close>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_close_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_close_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20000464 	.word	0x20000464

08009db8 <_fstat_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4d06      	ldr	r5, [pc, #24]	; (8009dd8 <_fstat_r+0x20>)
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	f7f8 f958 	bl	800207a <_fstat>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d102      	bne.n	8009dd4 <_fstat_r+0x1c>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	b103      	cbz	r3, 8009dd4 <_fstat_r+0x1c>
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20000464 	.word	0x20000464

08009ddc <_isatty_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	2300      	movs	r3, #0
 8009de0:	4d05      	ldr	r5, [pc, #20]	; (8009df8 <_isatty_r+0x1c>)
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f8 f956 	bl	8002098 <_isatty>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d102      	bne.n	8009df6 <_isatty_r+0x1a>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	b103      	cbz	r3, 8009df6 <_isatty_r+0x1a>
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	20000464 	.word	0x20000464

08009dfc <_lseek_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4604      	mov	r4, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	2200      	movs	r2, #0
 8009e06:	4d05      	ldr	r5, [pc, #20]	; (8009e1c <_lseek_r+0x20>)
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f8 f94e 	bl	80020ac <_lseek>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_lseek_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_lseek_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000464 	.word	0x20000464

08009e20 <memmove>:
 8009e20:	4288      	cmp	r0, r1
 8009e22:	b510      	push	{r4, lr}
 8009e24:	eb01 0402 	add.w	r4, r1, r2
 8009e28:	d902      	bls.n	8009e30 <memmove+0x10>
 8009e2a:	4284      	cmp	r4, r0
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	d807      	bhi.n	8009e40 <memmove+0x20>
 8009e30:	1e43      	subs	r3, r0, #1
 8009e32:	42a1      	cmp	r1, r4
 8009e34:	d008      	beq.n	8009e48 <memmove+0x28>
 8009e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e3e:	e7f8      	b.n	8009e32 <memmove+0x12>
 8009e40:	4601      	mov	r1, r0
 8009e42:	4402      	add	r2, r0
 8009e44:	428a      	cmp	r2, r1
 8009e46:	d100      	bne.n	8009e4a <memmove+0x2a>
 8009e48:	bd10      	pop	{r4, pc}
 8009e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e52:	e7f7      	b.n	8009e44 <memmove+0x24>

08009e54 <_realloc_r>:
 8009e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e58:	4680      	mov	r8, r0
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	460e      	mov	r6, r1
 8009e5e:	b921      	cbnz	r1, 8009e6a <_realloc_r+0x16>
 8009e60:	4611      	mov	r1, r2
 8009e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e66:	f7fb bdaf 	b.w	80059c8 <_malloc_r>
 8009e6a:	b92a      	cbnz	r2, 8009e78 <_realloc_r+0x24>
 8009e6c:	f7fb fd44 	bl	80058f8 <_free_r>
 8009e70:	4625      	mov	r5, r4
 8009e72:	4628      	mov	r0, r5
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	f000 f872 	bl	8009f60 <_malloc_usable_size_r>
 8009e7c:	4284      	cmp	r4, r0
 8009e7e:	4607      	mov	r7, r0
 8009e80:	d802      	bhi.n	8009e88 <_realloc_r+0x34>
 8009e82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e86:	d812      	bhi.n	8009eae <_realloc_r+0x5a>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	f7fb fd9c 	bl	80059c8 <_malloc_r>
 8009e90:	4605      	mov	r5, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d0ed      	beq.n	8009e72 <_realloc_r+0x1e>
 8009e96:	42bc      	cmp	r4, r7
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	bf28      	it	cs
 8009e9e:	463a      	movcs	r2, r7
 8009ea0:	f7fe ff5c 	bl	8008d5c <memcpy>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	f7fb fd26 	bl	80058f8 <_free_r>
 8009eac:	e7e1      	b.n	8009e72 <_realloc_r+0x1e>
 8009eae:	4635      	mov	r5, r6
 8009eb0:	e7df      	b.n	8009e72 <_realloc_r+0x1e>
	...

08009eb4 <_read_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4d05      	ldr	r5, [pc, #20]	; (8009ed4 <_read_r+0x20>)
 8009ec0:	602a      	str	r2, [r5, #0]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f7f8 f895 	bl	8001ff2 <_read>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_read_r+0x1e>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_read_r+0x1e>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20000464 	.word	0x20000464

08009ed8 <_raise_r>:
 8009ed8:	291f      	cmp	r1, #31
 8009eda:	b538      	push	{r3, r4, r5, lr}
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	d904      	bls.n	8009eec <_raise_r+0x14>
 8009ee2:	2316      	movs	r3, #22
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eee:	b112      	cbz	r2, 8009ef6 <_raise_r+0x1e>
 8009ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef4:	b94b      	cbnz	r3, 8009f0a <_raise_r+0x32>
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f830 	bl	8009f5c <_getpid_r>
 8009efc:	462a      	mov	r2, r5
 8009efe:	4601      	mov	r1, r0
 8009f00:	4620      	mov	r0, r4
 8009f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f06:	f000 b817 	b.w	8009f38 <_kill_r>
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d00a      	beq.n	8009f24 <_raise_r+0x4c>
 8009f0e:	1c59      	adds	r1, r3, #1
 8009f10:	d103      	bne.n	8009f1a <_raise_r+0x42>
 8009f12:	2316      	movs	r3, #22
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7e7      	b.n	8009eea <_raise_r+0x12>
 8009f1a:	2400      	movs	r4, #0
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f22:	4798      	blx	r3
 8009f24:	2000      	movs	r0, #0
 8009f26:	e7e0      	b.n	8009eea <_raise_r+0x12>

08009f28 <raise>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <raise+0xc>)
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	f7ff bfd3 	b.w	8009ed8 <_raise_r>
 8009f32:	bf00      	nop
 8009f34:	2000001c 	.word	0x2000001c

08009f38 <_kill_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4d06      	ldr	r5, [pc, #24]	; (8009f58 <_kill_r+0x20>)
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f7f8 f83a 	bl	8001fbe <_kill>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	d102      	bne.n	8009f54 <_kill_r+0x1c>
 8009f4e:	682b      	ldr	r3, [r5, #0]
 8009f50:	b103      	cbz	r3, 8009f54 <_kill_r+0x1c>
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	bf00      	nop
 8009f58:	20000464 	.word	0x20000464

08009f5c <_getpid_r>:
 8009f5c:	f7f8 b828 	b.w	8001fb0 <_getpid>

08009f60 <_malloc_usable_size_r>:
 8009f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f64:	1f18      	subs	r0, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bfbc      	itt	lt
 8009f6a:	580b      	ldrlt	r3, [r1, r0]
 8009f6c:	18c0      	addlt	r0, r0, r3
 8009f6e:	4770      	bx	lr

08009f70 <_init>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr

08009f7c <_fini>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr
